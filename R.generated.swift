//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 20 storyboards.
  struct storyboard {
    /// Storyboard `BookService`.
    static let bookService = _R.storyboard.bookService()
    /// Storyboard `Bot`.
    static let bot = _R.storyboard.bot()
    /// Storyboard `Chats`.
    static let chats = _R.storyboard.chats()
    /// Storyboard `DoctorHome`.
    static let doctorHome = _R.storyboard.doctorHome()
    /// Storyboard `DrinkingWater`.
    static let drinkingWater = _R.storyboard.drinkingWater()
    /// Storyboard `Laundry`.
    static let laundry = _R.storyboard.laundry()
    /// Storyboard `MainCab`.
    static let mainCab = _R.storyboard.mainCab()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MixedHome`.
    static let mixedHome = _R.storyboard.mixedHome()
    /// Storyboard `MoreScreen`.
    static let moreScreen = _R.storyboard.moreScreen()
    /// Storyboard `NewTemplateLoginSignUp`.
    static let newTemplateLoginSignUp = _R.storyboard.newTemplateLoginSignUp()
    /// Storyboard `Options`.
    static let options = _R.storyboard.options()
    /// Storyboard `Order`.
    static let order = _R.storyboard.order()
    /// Storyboard `Payment`.
    static let payment = _R.storyboard.payment()
    /// Storyboard `Referal`.
    static let referal = _R.storyboard.referal()
    /// Storyboard `Register`.
    static let register = _R.storyboard.register()
    /// Storyboard `SideMenu`.
    static let sideMenu = _R.storyboard.sideMenu()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `Template1_Design`.
    static let template1_Design = _R.storyboard.template1_Design()
    /// Storyboard `Tracking`.
    static let tracking = _R.storyboard.tracking()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BookService", bundle: ...)`
    static func bookService(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bookService)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Bot", bundle: ...)`
    static func bot(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bot)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Chats", bundle: ...)`
    static func chats(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chats)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DoctorHome", bundle: ...)`
    static func doctorHome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.doctorHome)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DrinkingWater", bundle: ...)`
    static func drinkingWater(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drinkingWater)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Laundry", bundle: ...)`
    static func laundry(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.laundry)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainCab", bundle: ...)`
    static func mainCab(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainCab)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MixedHome", bundle: ...)`
    static func mixedHome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mixedHome)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MoreScreen", bundle: ...)`
    static func moreScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.moreScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NewTemplateLoginSignUp", bundle: ...)`
    static func newTemplateLoginSignUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newTemplateLoginSignUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Options", bundle: ...)`
    static func options(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.options)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Order", bundle: ...)`
    static func order(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.order)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Payment", bundle: ...)`
    static func payment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.payment)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Referal", bundle: ...)`
    static func referal(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.referal)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Register", bundle: ...)`
    static func register(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.register)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SideMenu", bundle: ...)`
    static func sideMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sideMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Template1_Design", bundle: ...)`
    static func template1_Design(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.template1_Design)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Tracking", bundle: ...)`
    static func tracking(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tracking)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `AppDarkGrayHigh`.
    static let appDarkGrayHigh = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppDarkGrayHigh")
    /// Color `AppDefaultLight`.
    static let appDefaultLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppDefaultLight")
    /// Color `AppGreen`.
    static let appGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGreen")
    /// Color `AppNewRedBorder`.
    static let appNewRedBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppNewRedBorder")
    /// Color `AppOrange`.
    static let appOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppOrange")
    /// Color `AppPurple`.
    static let appPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppPurple")
    /// Color `AppRed`.
    static let appRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppRed")
    /// Color `AppShadowLightGray`.
    static let appShadowLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppShadowLightGray")
    /// Color `AppTextBlack`.
    static let appTextBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppTextBlack")
    /// Color `App_Color1`.
    static let app_Color1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "App_Color1")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppDarkGrayHigh", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDarkGrayHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDarkGrayHigh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppDefaultLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDefaultLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDefaultLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppNewRedBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appNewRedBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appNewRedBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppShadowLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appShadowLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appShadowLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppTextBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appTextBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appTextBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "App_Color1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app_Color1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app_Color1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperAssociatedDomains {
      static let applinksRoyoappPageLink = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:royoapp.page.link") ?? "applinks:royoapp.page.link"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComCodebrewCustomer = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.codebrew.customer") ?? "$(AppIdentifierPrefix)com.codebrew.customer"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 295 files.
  struct file {
    /// Resource file `Apache License.txt`.
    static let apacheLicenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Apache License", pathExtension: "txt")
    /// Resource file `BEEP.mp3`.
    static let beepMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "BEEP", pathExtension: "mp3")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `MapStyle.json`.
    static let mapStyleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MapStyle", pathExtension: "json")
    /// Resource file `OpenSans-Bold.ttf`.
    static let openSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans-BoldItalic.ttf`.
    static let openSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBold.ttf`.
    static let openSansExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBoldItalic.ttf`.
    static let openSansExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Italic.ttf`.
    static let openSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans-Light.ttf`.
    static let openSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Light", pathExtension: "ttf")
    /// Resource file `OpenSans-LightItalic.ttf`.
    static let openSansLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Regular.ttf`.
    static let openSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-Semibold.ttf`.
    static let openSansSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Semibold", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiboldItalic.ttf`.
    static let openSansSemiboldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiboldItalic", pathExtension: "ttf")
    /// Resource file `PROXIMANOVA-BLACK.OTF`.
    static let proximanovablackotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-BLACK", pathExtension: "OTF")
    /// Resource file `PROXIMANOVA-BOLD.OTF`.
    static let proximanovaboldotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-BOLD", pathExtension: "OTF")
    /// Resource file `PROXIMANOVA-EXTRABLD.OTF`.
    static let proximanovaextrabldotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-EXTRABLD", pathExtension: "OTF")
    /// Resource file `PROXIMANOVA-LIGHT.OTF`.
    static let proximanovalightotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-LIGHT", pathExtension: "OTF")
    /// Resource file `PROXIMANOVA-REGULAR.OTF`.
    static let proximanovaregularotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-REGULAR", pathExtension: "OTF")
    /// Resource file `PROXIMANOVA-SEMIBOLD.OTF`.
    static let proximanovasemiboldotF = Rswift.FileResource(bundle: R.hostingBundle, name: "PROXIMANOVA-SEMIBOLD", pathExtension: "OTF")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `SF-Pro-Display-Black.otf`.
    static let sfProDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Light.otf`.
    static let sfProDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Medium.otf`.
    static let sfProDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Semibold.otf`.
    static let sfProDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Thin.otf`.
    static let sfProDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Bold.otf`.
    static let sfProTextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Light.otf`.
    static let sfProTextLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Medium.otf`.
    static let sfProTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Regular.otf`.
    static let sfProTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Semibold.otf`.
    static let sfProTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Semibold", pathExtension: "otf")
    /// Resource file `ad.png`.
    static let adPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ad", pathExtension: "png")
    /// Resource file `ae.png`.
    static let aePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ae", pathExtension: "png")
    /// Resource file `af.png`.
    static let afPng = Rswift.FileResource(bundle: R.hostingBundle, name: "af", pathExtension: "png")
    /// Resource file `ag.png`.
    static let agPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ag", pathExtension: "png")
    /// Resource file `ai.png`.
    static let aiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ai", pathExtension: "png")
    /// Resource file `al.png`.
    static let alPng = Rswift.FileResource(bundle: R.hostingBundle, name: "al", pathExtension: "png")
    /// Resource file `am.png`.
    static let amPng = Rswift.FileResource(bundle: R.hostingBundle, name: "am", pathExtension: "png")
    /// Resource file `ao.png`.
    static let aoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ao", pathExtension: "png")
    /// Resource file `aq.png`.
    static let aqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "aq", pathExtension: "png")
    /// Resource file `ar.png`.
    static let arPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ar", pathExtension: "png")
    /// Resource file `arrow_down@3x.png`.
    static let arrow_down3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "arrow_down@3x", pathExtension: "png")
    /// Resource file `arrow_left@3x.png`.
    static let arrow_left3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "arrow_left@3x", pathExtension: "png")
    /// Resource file `arrow_right@3x.png`.
    static let arrow_right3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "arrow_right@3x", pathExtension: "png")
    /// Resource file `as.png`.
    static let asPng = Rswift.FileResource(bundle: R.hostingBundle, name: "as", pathExtension: "png")
    /// Resource file `at.png`.
    static let atPng = Rswift.FileResource(bundle: R.hostingBundle, name: "at", pathExtension: "png")
    /// Resource file `au.png`.
    static let auPng = Rswift.FileResource(bundle: R.hostingBundle, name: "au", pathExtension: "png")
    /// Resource file `aw.png`.
    static let awPng = Rswift.FileResource(bundle: R.hostingBundle, name: "aw", pathExtension: "png")
    /// Resource file `ax.png`.
    static let axPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ax", pathExtension: "png")
    /// Resource file `az.png`.
    static let azPng = Rswift.FileResource(bundle: R.hostingBundle, name: "az", pathExtension: "png")
    /// Resource file `ba.png`.
    static let baPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ba", pathExtension: "png")
    /// Resource file `bb.png`.
    static let bbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bb", pathExtension: "png")
    /// Resource file `bd.png`.
    static let bdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bd", pathExtension: "png")
    /// Resource file `be.png`.
    static let bePng = Rswift.FileResource(bundle: R.hostingBundle, name: "be", pathExtension: "png")
    /// Resource file `bf.png`.
    static let bfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bf", pathExtension: "png")
    /// Resource file `bg.png`.
    static let bgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bg", pathExtension: "png")
    /// Resource file `bh.png`.
    static let bhPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bh", pathExtension: "png")
    /// Resource file `bi.png`.
    static let biPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bi", pathExtension: "png")
    /// Resource file `bj.png`.
    static let bjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bj", pathExtension: "png")
    /// Resource file `bl.png`.
    static let blPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bl", pathExtension: "png")
    /// Resource file `bm.png`.
    static let bmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bm", pathExtension: "png")
    /// Resource file `bn.png`.
    static let bnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bn", pathExtension: "png")
    /// Resource file `bo.png`.
    static let boPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bo", pathExtension: "png")
    /// Resource file `bq.png`.
    static let bqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bq", pathExtension: "png")
    /// Resource file `br.png`.
    static let brPng = Rswift.FileResource(bundle: R.hostingBundle, name: "br", pathExtension: "png")
    /// Resource file `bs.png`.
    static let bsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bs", pathExtension: "png")
    /// Resource file `bt.png`.
    static let btPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bt", pathExtension: "png")
    /// Resource file `bv.png`.
    static let bvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bv", pathExtension: "png")
    /// Resource file `bw.png`.
    static let bwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bw", pathExtension: "png")
    /// Resource file `by.png`.
    static let byPng = Rswift.FileResource(bundle: R.hostingBundle, name: "by", pathExtension: "png")
    /// Resource file `bz.png`.
    static let bzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bz", pathExtension: "png")
    /// Resource file `ca.png`.
    static let caPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ca", pathExtension: "png")
    /// Resource file `cc.png`.
    static let ccPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cc", pathExtension: "png")
    /// Resource file `cd.png`.
    static let cdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cd", pathExtension: "png")
    /// Resource file `cf.png`.
    static let cfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cf", pathExtension: "png")
    /// Resource file `cg.png`.
    static let cgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cg", pathExtension: "png")
    /// Resource file `ch.png`.
    static let chPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ch", pathExtension: "png")
    /// Resource file `ci.png`.
    static let ciPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ci", pathExtension: "png")
    /// Resource file `ck.png`.
    static let ckPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ck", pathExtension: "png")
    /// Resource file `cl.png`.
    static let clPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cl", pathExtension: "png")
    /// Resource file `cm.png`.
    static let cmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cm", pathExtension: "png")
    /// Resource file `cn.png`.
    static let cnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cn", pathExtension: "png")
    /// Resource file `co.png`.
    static let coPng = Rswift.FileResource(bundle: R.hostingBundle, name: "co", pathExtension: "png")
    /// Resource file `countries.json`.
    static let countriesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "countries", pathExtension: "json")
    /// Resource file `cr.png`.
    static let crPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cr", pathExtension: "png")
    /// Resource file `cu.png`.
    static let cuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cu", pathExtension: "png")
    /// Resource file `cv.png`.
    static let cvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cv", pathExtension: "png")
    /// Resource file `cw.png`.
    static let cwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cw", pathExtension: "png")
    /// Resource file `cx.png`.
    static let cxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cx", pathExtension: "png")
    /// Resource file `cy.png`.
    static let cyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cy", pathExtension: "png")
    /// Resource file `cz.png`.
    static let czPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cz", pathExtension: "png")
    /// Resource file `de.png`.
    static let dePng = Rswift.FileResource(bundle: R.hostingBundle, name: "de", pathExtension: "png")
    /// Resource file `dj.png`.
    static let djPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dj", pathExtension: "png")
    /// Resource file `dk.png`.
    static let dkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dk", pathExtension: "png")
    /// Resource file `dm.png`.
    static let dmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dm", pathExtension: "png")
    /// Resource file `do.png`.
    static let doPng = Rswift.FileResource(bundle: R.hostingBundle, name: "do", pathExtension: "png")
    /// Resource file `dz.png`.
    static let dzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dz", pathExtension: "png")
    /// Resource file `ec.png`.
    static let ecPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ec", pathExtension: "png")
    /// Resource file `ee.png`.
    static let eePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ee", pathExtension: "png")
    /// Resource file `eg.png`.
    static let egPng = Rswift.FileResource(bundle: R.hostingBundle, name: "eg", pathExtension: "png")
    /// Resource file `eh.png`.
    static let ehPng = Rswift.FileResource(bundle: R.hostingBundle, name: "eh", pathExtension: "png")
    /// Resource file `er.png`.
    static let erPng = Rswift.FileResource(bundle: R.hostingBundle, name: "er", pathExtension: "png")
    /// Resource file `es.png`.
    static let esPng = Rswift.FileResource(bundle: R.hostingBundle, name: "es", pathExtension: "png")
    /// Resource file `et.png`.
    static let etPng = Rswift.FileResource(bundle: R.hostingBundle, name: "et", pathExtension: "png")
    /// Resource file `failure@3x.png`.
    static let failure3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "failure@3x", pathExtension: "png")
    /// Resource file `fi.png`.
    static let fiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fi", pathExtension: "png")
    /// Resource file `fj.png`.
    static let fjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fj", pathExtension: "png")
    /// Resource file `fk.png`.
    static let fkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fk", pathExtension: "png")
    /// Resource file `fm.png`.
    static let fmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fm", pathExtension: "png")
    /// Resource file `fo.png`.
    static let foPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fo", pathExtension: "png")
    /// Resource file `fr.png`.
    static let frPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fr", pathExtension: "png")
    /// Resource file `ga.png`.
    static let gaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ga", pathExtension: "png")
    /// Resource file `gb.png`.
    static let gbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gb", pathExtension: "png")
    /// Resource file `gd.png`.
    static let gdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gd", pathExtension: "png")
    /// Resource file `ge.png`.
    static let gePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ge", pathExtension: "png")
    /// Resource file `gf.png`.
    static let gfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gf", pathExtension: "png")
    /// Resource file `gg.png`.
    static let ggPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gg", pathExtension: "png")
    /// Resource file `gh.png`.
    static let ghPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gh", pathExtension: "png")
    /// Resource file `gi.png`.
    static let giPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gi", pathExtension: "png")
    /// Resource file `gl.png`.
    static let glPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gl", pathExtension: "png")
    /// Resource file `gm.png`.
    static let gmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gm", pathExtension: "png")
    /// Resource file `gn.png`.
    static let gnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gn", pathExtension: "png")
    /// Resource file `gp.png`.
    static let gpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gp", pathExtension: "png")
    /// Resource file `gq.png`.
    static let gqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gq", pathExtension: "png")
    /// Resource file `gr.png`.
    static let grPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gr", pathExtension: "png")
    /// Resource file `gs.png`.
    static let gsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gs", pathExtension: "png")
    /// Resource file `gt.png`.
    static let gtPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gt", pathExtension: "png")
    /// Resource file `gu.png`.
    static let guPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gu", pathExtension: "png")
    /// Resource file `gw.png`.
    static let gwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gw", pathExtension: "png")
    /// Resource file `gy.png`.
    static let gyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gy", pathExtension: "png")
    /// Resource file `hk.png`.
    static let hkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hk", pathExtension: "png")
    /// Resource file `hm.png`.
    static let hmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hm", pathExtension: "png")
    /// Resource file `hn.png`.
    static let hnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hn", pathExtension: "png")
    /// Resource file `hr.png`.
    static let hrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hr", pathExtension: "png")
    /// Resource file `ht.png`.
    static let htPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ht", pathExtension: "png")
    /// Resource file `hu.png`.
    static let huPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hu", pathExtension: "png")
    /// Resource file `id.png`.
    static let idPng = Rswift.FileResource(bundle: R.hostingBundle, name: "id", pathExtension: "png")
    /// Resource file `ie.png`.
    static let iePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ie", pathExtension: "png")
    /// Resource file `il.png`.
    static let ilPng = Rswift.FileResource(bundle: R.hostingBundle, name: "il", pathExtension: "png")
    /// Resource file `im.png`.
    static let imPng = Rswift.FileResource(bundle: R.hostingBundle, name: "im", pathExtension: "png")
    /// Resource file `in.png`.
    static let inPng = Rswift.FileResource(bundle: R.hostingBundle, name: "in", pathExtension: "png")
    /// Resource file `io.png`.
    static let ioPng = Rswift.FileResource(bundle: R.hostingBundle, name: "io", pathExtension: "png")
    /// Resource file `iq.png`.
    static let iqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iq", pathExtension: "png")
    /// Resource file `ir.png`.
    static let irPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ir", pathExtension: "png")
    /// Resource file `is.png`.
    static let isPng = Rswift.FileResource(bundle: R.hostingBundle, name: "is", pathExtension: "png")
    /// Resource file `it.png`.
    static let itPng = Rswift.FileResource(bundle: R.hostingBundle, name: "it", pathExtension: "png")
    /// Resource file `je.png`.
    static let jePng = Rswift.FileResource(bundle: R.hostingBundle, name: "je", pathExtension: "png")
    /// Resource file `jm.png`.
    static let jmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jm", pathExtension: "png")
    /// Resource file `jo.png`.
    static let joPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jo", pathExtension: "png")
    /// Resource file `jp.png`.
    static let jpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jp", pathExtension: "png")
    /// Resource file `ke.png`.
    static let kePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ke", pathExtension: "png")
    /// Resource file `keeda.gif`.
    static let keedaGif = Rswift.FileResource(bundle: R.hostingBundle, name: "keeda", pathExtension: "gif")
    /// Resource file `kg.png`.
    static let kgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kg", pathExtension: "png")
    /// Resource file `kh.png`.
    static let khPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kh", pathExtension: "png")
    /// Resource file `ki.png`.
    static let kiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ki", pathExtension: "png")
    /// Resource file `km.png`.
    static let kmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "km", pathExtension: "png")
    /// Resource file `kn.png`.
    static let knPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kn", pathExtension: "png")
    /// Resource file `kp.png`.
    static let kpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kp", pathExtension: "png")
    /// Resource file `kr.png`.
    static let krPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kr", pathExtension: "png")
    /// Resource file `kw.png`.
    static let kwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kw", pathExtension: "png")
    /// Resource file `ky.png`.
    static let kyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ky", pathExtension: "png")
    /// Resource file `kz.png`.
    static let kzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kz", pathExtension: "png")
    /// Resource file `la.png`.
    static let laPng = Rswift.FileResource(bundle: R.hostingBundle, name: "la", pathExtension: "png")
    /// Resource file `lb.png`.
    static let lbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lb", pathExtension: "png")
    /// Resource file `lc.png`.
    static let lcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lc", pathExtension: "png")
    /// Resource file `li.png`.
    static let liPng = Rswift.FileResource(bundle: R.hostingBundle, name: "li", pathExtension: "png")
    /// Resource file `lk.png`.
    static let lkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lk", pathExtension: "png")
    /// Resource file `loader.gif`.
    static let loaderGif = Rswift.FileResource(bundle: R.hostingBundle, name: "loader", pathExtension: "gif")
    /// Resource file `location.gif`.
    static let locationGif = Rswift.FileResource(bundle: R.hostingBundle, name: "location", pathExtension: "gif")
    /// Resource file `lr.png`.
    static let lrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lr", pathExtension: "png")
    /// Resource file `ls.png`.
    static let lsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ls", pathExtension: "png")
    /// Resource file `lt.png`.
    static let ltPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lt", pathExtension: "png")
    /// Resource file `lu.png`.
    static let luPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lu", pathExtension: "png")
    /// Resource file `lv.png`.
    static let lvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lv", pathExtension: "png")
    /// Resource file `ly.png`.
    static let lyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ly", pathExtension: "png")
    /// Resource file `ma.png`.
    static let maPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ma", pathExtension: "png")
    /// Resource file `mc.png`.
    static let mcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mc", pathExtension: "png")
    /// Resource file `md.png`.
    static let mdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "md", pathExtension: "png")
    /// Resource file `me.png`.
    static let mePng = Rswift.FileResource(bundle: R.hostingBundle, name: "me", pathExtension: "png")
    /// Resource file `mf.png`.
    static let mfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mf", pathExtension: "png")
    /// Resource file `mg.png`.
    static let mgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mg", pathExtension: "png")
    /// Resource file `mh.png`.
    static let mhPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mh", pathExtension: "png")
    /// Resource file `mk.png`.
    static let mkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mk", pathExtension: "png")
    /// Resource file `ml.png`.
    static let mlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ml", pathExtension: "png")
    /// Resource file `mm.png`.
    static let mmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mm", pathExtension: "png")
    /// Resource file `mn.png`.
    static let mnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mn", pathExtension: "png")
    /// Resource file `mo.png`.
    static let moPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mo", pathExtension: "png")
    /// Resource file `mp.png`.
    static let mpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mp", pathExtension: "png")
    /// Resource file `mq.png`.
    static let mqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mq", pathExtension: "png")
    /// Resource file `mr.png`.
    static let mrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mr", pathExtension: "png")
    /// Resource file `ms.png`.
    static let msPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ms", pathExtension: "png")
    /// Resource file `mt.png`.
    static let mtPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mt", pathExtension: "png")
    /// Resource file `mu.png`.
    static let muPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mu", pathExtension: "png")
    /// Resource file `mv.png`.
    static let mvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mv", pathExtension: "png")
    /// Resource file `mw.png`.
    static let mwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mw", pathExtension: "png")
    /// Resource file `mx.png`.
    static let mxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mx", pathExtension: "png")
    /// Resource file `my.png`.
    static let myPng = Rswift.FileResource(bundle: R.hostingBundle, name: "my", pathExtension: "png")
    /// Resource file `mz.png`.
    static let mzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mz", pathExtension: "png")
    /// Resource file `na.png`.
    static let naPng = Rswift.FileResource(bundle: R.hostingBundle, name: "na", pathExtension: "png")
    /// Resource file `nc.png`.
    static let ncPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nc", pathExtension: "png")
    /// Resource file `ne.png`.
    static let nePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ne", pathExtension: "png")
    /// Resource file `nf.png`.
    static let nfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nf", pathExtension: "png")
    /// Resource file `ng.png`.
    static let ngPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ng", pathExtension: "png")
    /// Resource file `ni.png`.
    static let niPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ni", pathExtension: "png")
    /// Resource file `nl.png`.
    static let nlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nl", pathExtension: "png")
    /// Resource file `no.png`.
    static let noPng = Rswift.FileResource(bundle: R.hostingBundle, name: "no", pathExtension: "png")
    /// Resource file `np.png`.
    static let npPng = Rswift.FileResource(bundle: R.hostingBundle, name: "np", pathExtension: "png")
    /// Resource file `nr.png`.
    static let nrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nr", pathExtension: "png")
    /// Resource file `nu.png`.
    static let nuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nu", pathExtension: "png")
    /// Resource file `nz.png`.
    static let nzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nz", pathExtension: "png")
    /// Resource file `om.png`.
    static let omPng = Rswift.FileResource(bundle: R.hostingBundle, name: "om", pathExtension: "png")
    /// Resource file `pa.png`.
    static let paPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pa", pathExtension: "png")
    /// Resource file `pe.png`.
    static let pePng = Rswift.FileResource(bundle: R.hostingBundle, name: "pe", pathExtension: "png")
    /// Resource file `pf.png`.
    static let pfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pf", pathExtension: "png")
    /// Resource file `pg.png`.
    static let pgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pg", pathExtension: "png")
    /// Resource file `ph.png`.
    static let phPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ph", pathExtension: "png")
    /// Resource file `pk.png`.
    static let pkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pk", pathExtension: "png")
    /// Resource file `pl.png`.
    static let plPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pl", pathExtension: "png")
    /// Resource file `pm.png`.
    static let pmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pm", pathExtension: "png")
    /// Resource file `pn.png`.
    static let pnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pn", pathExtension: "png")
    /// Resource file `pr.png`.
    static let prPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pr", pathExtension: "png")
    /// Resource file `ps.png`.
    static let psPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ps", pathExtension: "png")
    /// Resource file `pt.png`.
    static let ptPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pt", pathExtension: "png")
    /// Resource file `push.mp3`.
    static let pushMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "push", pathExtension: "mp3")
    /// Resource file `pw.png`.
    static let pwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pw", pathExtension: "png")
    /// Resource file `py.png`.
    static let pyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "py", pathExtension: "png")
    /// Resource file `qa.png`.
    static let qaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qa", pathExtension: "png")
    /// Resource file `re.png`.
    static let rePng = Rswift.FileResource(bundle: R.hostingBundle, name: "re", pathExtension: "png")
    /// Resource file `ro.png`.
    static let roPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ro", pathExtension: "png")
    /// Resource file `rs.png`.
    static let rsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "rs", pathExtension: "png")
    /// Resource file `ru.png`.
    static let ruPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ru", pathExtension: "png")
    /// Resource file `rw.png`.
    static let rwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "rw", pathExtension: "png")
    /// Resource file `sa.png`.
    static let saPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sa", pathExtension: "png")
    /// Resource file `sb.png`.
    static let sbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sb", pathExtension: "png")
    /// Resource file `sc.png`.
    static let scPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sc", pathExtension: "png")
    /// Resource file `sd.png`.
    static let sdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sd", pathExtension: "png")
    /// Resource file `se.png`.
    static let sePng = Rswift.FileResource(bundle: R.hostingBundle, name: "se", pathExtension: "png")
    /// Resource file `sg.png`.
    static let sgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sg", pathExtension: "png")
    /// Resource file `sh.png`.
    static let shPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sh", pathExtension: "png")
    /// Resource file `si.png`.
    static let siPng = Rswift.FileResource(bundle: R.hostingBundle, name: "si", pathExtension: "png")
    /// Resource file `sj.png`.
    static let sjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sj", pathExtension: "png")
    /// Resource file `sk.png`.
    static let skPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sk", pathExtension: "png")
    /// Resource file `sl.png`.
    static let slPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sl", pathExtension: "png")
    /// Resource file `sm.png`.
    static let smPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sm", pathExtension: "png")
    /// Resource file `sn.png`.
    static let snPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sn", pathExtension: "png")
    /// Resource file `so.png`.
    static let soPng = Rswift.FileResource(bundle: R.hostingBundle, name: "so", pathExtension: "png")
    /// Resource file `sound.mp3`.
    static let soundMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "sound", pathExtension: "mp3")
    /// Resource file `sr.png`.
    static let srPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sr", pathExtension: "png")
    /// Resource file `ss.png`.
    static let ssPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ss", pathExtension: "png")
    /// Resource file `st.png`.
    static let stPng = Rswift.FileResource(bundle: R.hostingBundle, name: "st", pathExtension: "png")
    /// Resource file `success@3x.png`.
    static let success3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "success@3x", pathExtension: "png")
    /// Resource file `sv.png`.
    static let svPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sv", pathExtension: "png")
    /// Resource file `sx.png`.
    static let sxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sx", pathExtension: "png")
    /// Resource file `sy.png`.
    static let syPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sy", pathExtension: "png")
    /// Resource file `sz.png`.
    static let szPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sz", pathExtension: "png")
    /// Resource file `tc.png`.
    static let tcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tc", pathExtension: "png")
    /// Resource file `td.png`.
    static let tdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "td", pathExtension: "png")
    /// Resource file `tf.png`.
    static let tfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tf", pathExtension: "png")
    /// Resource file `tg.png`.
    static let tgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tg", pathExtension: "png")
    /// Resource file `th.png`.
    static let thPng = Rswift.FileResource(bundle: R.hostingBundle, name: "th", pathExtension: "png")
    /// Resource file `tj.png`.
    static let tjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tj", pathExtension: "png")
    /// Resource file `tk.png`.
    static let tkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tk", pathExtension: "png")
    /// Resource file `tl.png`.
    static let tlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tl", pathExtension: "png")
    /// Resource file `tm.png`.
    static let tmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tm", pathExtension: "png")
    /// Resource file `tn.png`.
    static let tnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tn", pathExtension: "png")
    /// Resource file `to.png`.
    static let toPng = Rswift.FileResource(bundle: R.hostingBundle, name: "to", pathExtension: "png")
    /// Resource file `tr.png`.
    static let trPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tr", pathExtension: "png")
    /// Resource file `tt.png`.
    static let ttPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tt", pathExtension: "png")
    /// Resource file `tv.png`.
    static let tvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tv", pathExtension: "png")
    /// Resource file `tw.png`.
    static let twPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tw", pathExtension: "png")
    /// Resource file `tz.png`.
    static let tzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tz", pathExtension: "png")
    /// Resource file `ua.png`.
    static let uaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ua", pathExtension: "png")
    /// Resource file `ug.png`.
    static let ugPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ug", pathExtension: "png")
    /// Resource file `um.png`.
    static let umPng = Rswift.FileResource(bundle: R.hostingBundle, name: "um", pathExtension: "png")
    /// Resource file `us.png`.
    static let usPng = Rswift.FileResource(bundle: R.hostingBundle, name: "us", pathExtension: "png")
    /// Resource file `uy.png`.
    static let uyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "uy", pathExtension: "png")
    /// Resource file `uz.png`.
    static let uzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "uz", pathExtension: "png")
    /// Resource file `va.png`.
    static let vaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "va", pathExtension: "png")
    /// Resource file `vc.png`.
    static let vcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vc", pathExtension: "png")
    /// Resource file `ve.png`.
    static let vePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ve", pathExtension: "png")
    /// Resource file `vg.png`.
    static let vgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vg", pathExtension: "png")
    /// Resource file `vi.png`.
    static let viPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vi", pathExtension: "png")
    /// Resource file `vn.png`.
    static let vnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vn", pathExtension: "png")
    /// Resource file `vu.png`.
    static let vuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vu", pathExtension: "png")
    /// Resource file `wf.png`.
    static let wfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "wf", pathExtension: "png")
    /// Resource file `ws.png`.
    static let wsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ws", pathExtension: "png")
    /// Resource file `ye.png`.
    static let yePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ye", pathExtension: "png")
    /// Resource file `yt.png`.
    static let ytPng = Rswift.FileResource(bundle: R.hostingBundle, name: "yt", pathExtension: "png")
    /// Resource file `za.png`.
    static let zaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "za", pathExtension: "png")
    /// Resource file `zm.png`.
    static let zmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zm", pathExtension: "png")
    /// Resource file `zw.png`.
    static let zwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zw", pathExtension: "png")
    /// Resource file `zz.png`.
    static let zzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zz", pathExtension: "png")

    /// `bundle.url(forResource: "Apache License", withExtension: "txt")`
    static func apacheLicenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.apacheLicenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BEEP", withExtension: "mp3")`
    static func beepMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.beepMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MapStyle", withExtension: "json")`
    static func mapStyleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mapStyleJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Bold", withExtension: "ttf")`
    static func openSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-BoldItalic", withExtension: "ttf")`
    static func openSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBold", withExtension: "ttf")`
    static func openSansExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBoldItalic", withExtension: "ttf")`
    static func openSansExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Italic", withExtension: "ttf")`
    static func openSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Light", withExtension: "ttf")`
    static func openSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-LightItalic", withExtension: "ttf")`
    static func openSansLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Regular", withExtension: "ttf")`
    static func openSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Semibold", withExtension: "ttf")`
    static func openSansSemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiboldItalic", withExtension: "ttf")`
    static func openSansSemiboldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiboldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-BLACK", withExtension: "OTF")`
    static func proximanovablackotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovablackotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-BOLD", withExtension: "OTF")`
    static func proximanovaboldotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovaboldotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-EXTRABLD", withExtension: "OTF")`
    static func proximanovaextrabldotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovaextrabldotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-LIGHT", withExtension: "OTF")`
    static func proximanovalightotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovalightotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-REGULAR", withExtension: "OTF")`
    static func proximanovaregularotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovaregularotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PROXIMANOVA-SEMIBOLD", withExtension: "OTF")`
    static func proximanovasemiboldotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximanovasemiboldotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Black", withExtension: "otf")`
    static func sfProDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Light", withExtension: "otf")`
    static func sfProDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Medium", withExtension: "otf")`
    static func sfProDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Semibold", withExtension: "otf")`
    static func sfProDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Thin", withExtension: "otf")`
    static func sfProDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Bold", withExtension: "otf")`
    static func sfProTextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Light", withExtension: "otf")`
    static func sfProTextLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Medium", withExtension: "otf")`
    static func sfProTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Regular", withExtension: "otf")`
    static func sfProTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Semibold", withExtension: "otf")`
    static func sfProTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ad", withExtension: "png")`
    static func adPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ae", withExtension: "png")`
    static func aePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "af", withExtension: "png")`
    static func afPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.afPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ag", withExtension: "png")`
    static func agPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.agPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ai", withExtension: "png")`
    static func aiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "al", withExtension: "png")`
    static func alPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "am", withExtension: "png")`
    static func amPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.amPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ao", withExtension: "png")`
    static func aoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aoPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "aq", withExtension: "png")`
    static func aqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ar", withExtension: "png")`
    static func arPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "arrow_down@3x", withExtension: "png")`
    static func arrow_down3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arrow_down3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "arrow_left@3x", withExtension: "png")`
    static func arrow_left3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arrow_left3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "arrow_right@3x", withExtension: "png")`
    static func arrow_right3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arrow_right3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "as", withExtension: "png")`
    static func asPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.asPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "at", withExtension: "png")`
    static func atPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.atPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "au", withExtension: "png")`
    static func auPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.auPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "aw", withExtension: "png")`
    static func awPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ax", withExtension: "png")`
    static func axPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.axPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "az", withExtension: "png")`
    static func azPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.azPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ba", withExtension: "png")`
    static func baPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.baPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bb", withExtension: "png")`
    static func bbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bd", withExtension: "png")`
    static func bdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "be", withExtension: "png")`
    static func bePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bf", withExtension: "png")`
    static func bfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bg", withExtension: "png")`
    static func bgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bh", withExtension: "png")`
    static func bhPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bhPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bi", withExtension: "png")`
    static func biPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.biPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bj", withExtension: "png")`
    static func bjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bl", withExtension: "png")`
    static func blPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bm", withExtension: "png")`
    static func bmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bn", withExtension: "png")`
    static func bnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bo", withExtension: "png")`
    static func boPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bq", withExtension: "png")`
    static func bqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "br", withExtension: "png")`
    static func brPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bs", withExtension: "png")`
    static func bsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bt", withExtension: "png")`
    static func btPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.btPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bv", withExtension: "png")`
    static func bvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bw", withExtension: "png")`
    static func bwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "by", withExtension: "png")`
    static func byPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.byPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bz", withExtension: "png")`
    static func bzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ca", withExtension: "png")`
    static func caPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cc", withExtension: "png")`
    static func ccPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ccPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cd", withExtension: "png")`
    static func cdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cf", withExtension: "png")`
    static func cfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cg", withExtension: "png")`
    static func cgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ch", withExtension: "png")`
    static func chPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci", withExtension: "png")`
    static func ciPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ck", withExtension: "png")`
    static func ckPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ckPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cl", withExtension: "png")`
    static func clPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.clPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cm", withExtension: "png")`
    static func cmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cn", withExtension: "png")`
    static func cnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "co", withExtension: "png")`
    static func coPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "countries", withExtension: "json")`
    static func countriesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.countriesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cr", withExtension: "png")`
    static func crPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.crPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cu", withExtension: "png")`
    static func cuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cv", withExtension: "png")`
    static func cvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cw", withExtension: "png")`
    static func cwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cx", withExtension: "png")`
    static func cxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cy", withExtension: "png")`
    static func cyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cz", withExtension: "png")`
    static func czPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.czPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "de", withExtension: "png")`
    static func dePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dj", withExtension: "png")`
    static func djPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.djPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dk", withExtension: "png")`
    static func dkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dm", withExtension: "png")`
    static func dmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "do", withExtension: "png")`
    static func doPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dz", withExtension: "png")`
    static func dzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ec", withExtension: "png")`
    static func ecPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ecPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ee", withExtension: "png")`
    static func eePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "eg", withExtension: "png")`
    static func egPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.egPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "eh", withExtension: "png")`
    static func ehPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ehPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "er", withExtension: "png")`
    static func erPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "es", withExtension: "png")`
    static func esPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.esPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "et", withExtension: "png")`
    static func etPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.etPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "failure@3x", withExtension: "png")`
    static func failure3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.failure3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fi", withExtension: "png")`
    static func fiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fj", withExtension: "png")`
    static func fjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fk", withExtension: "png")`
    static func fkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fm", withExtension: "png")`
    static func fmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fo", withExtension: "png")`
    static func foPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.foPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fr", withExtension: "png")`
    static func frPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.frPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ga", withExtension: "png")`
    static func gaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gb", withExtension: "png")`
    static func gbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gd", withExtension: "png")`
    static func gdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ge", withExtension: "png")`
    static func gePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gf", withExtension: "png")`
    static func gfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gg", withExtension: "png")`
    static func ggPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ggPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gh", withExtension: "png")`
    static func ghPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ghPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gi", withExtension: "png")`
    static func giPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gl", withExtension: "png")`
    static func glPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.glPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gm", withExtension: "png")`
    static func gmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gn", withExtension: "png")`
    static func gnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gp", withExtension: "png")`
    static func gpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gq", withExtension: "png")`
    static func gqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gr", withExtension: "png")`
    static func grPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.grPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gs", withExtension: "png")`
    static func gsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gt", withExtension: "png")`
    static func gtPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gu", withExtension: "png")`
    static func guPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gw", withExtension: "png")`
    static func gwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gy", withExtension: "png")`
    static func gyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hk", withExtension: "png")`
    static func hkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hm", withExtension: "png")`
    static func hmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hn", withExtension: "png")`
    static func hnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hr", withExtension: "png")`
    static func hrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ht", withExtension: "png")`
    static func htPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.htPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hu", withExtension: "png")`
    static func huPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.huPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "id", withExtension: "png")`
    static func idPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.idPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ie", withExtension: "png")`
    static func iePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "il", withExtension: "png")`
    static func ilPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ilPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "im", withExtension: "png")`
    static func imPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.imPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "in", withExtension: "png")`
    static func inPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "io", withExtension: "png")`
    static func ioPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ioPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iq", withExtension: "png")`
    static func iqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ir", withExtension: "png")`
    static func irPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.irPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "is", withExtension: "png")`
    static func isPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.isPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "it", withExtension: "png")`
    static func itPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.itPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "je", withExtension: "png")`
    static func jePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jm", withExtension: "png")`
    static func jmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jo", withExtension: "png")`
    static func joPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.joPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jp", withExtension: "png")`
    static func jpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ke", withExtension: "png")`
    static func kePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "keeda", withExtension: "gif")`
    static func keedaGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.keedaGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kg", withExtension: "png")`
    static func kgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kh", withExtension: "png")`
    static func khPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.khPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ki", withExtension: "png")`
    static func kiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "km", withExtension: "png")`
    static func kmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kn", withExtension: "png")`
    static func knPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.knPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kp", withExtension: "png")`
    static func kpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kr", withExtension: "png")`
    static func krPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.krPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kw", withExtension: "png")`
    static func kwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ky", withExtension: "png")`
    static func kyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kz", withExtension: "png")`
    static func kzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "la", withExtension: "png")`
    static func laPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.laPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lb", withExtension: "png")`
    static func lbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lc", withExtension: "png")`
    static func lcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "li", withExtension: "png")`
    static func liPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.liPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lk", withExtension: "png")`
    static func lkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loader", withExtension: "gif")`
    static func loaderGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loaderGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "location", withExtension: "gif")`
    static func locationGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.locationGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lr", withExtension: "png")`
    static func lrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ls", withExtension: "png")`
    static func lsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lt", withExtension: "png")`
    static func ltPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lu", withExtension: "png")`
    static func luPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.luPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lv", withExtension: "png")`
    static func lvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ly", withExtension: "png")`
    static func lyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ma", withExtension: "png")`
    static func maPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.maPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mc", withExtension: "png")`
    static func mcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "md", withExtension: "png")`
    static func mdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "me", withExtension: "png")`
    static func mePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mf", withExtension: "png")`
    static func mfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mg", withExtension: "png")`
    static func mgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mh", withExtension: "png")`
    static func mhPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mhPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mk", withExtension: "png")`
    static func mkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ml", withExtension: "png")`
    static func mlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mm", withExtension: "png")`
    static func mmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mn", withExtension: "png")`
    static func mnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mo", withExtension: "png")`
    static func moPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mp", withExtension: "png")`
    static func mpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mq", withExtension: "png")`
    static func mqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mr", withExtension: "png")`
    static func mrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ms", withExtension: "png")`
    static func msPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.msPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mt", withExtension: "png")`
    static func mtPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mtPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mu", withExtension: "png")`
    static func muPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.muPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mv", withExtension: "png")`
    static func mvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mw", withExtension: "png")`
    static func mwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mx", withExtension: "png")`
    static func mxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "my", withExtension: "png")`
    static func myPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.myPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mz", withExtension: "png")`
    static func mzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "na", withExtension: "png")`
    static func naPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.naPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nc", withExtension: "png")`
    static func ncPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ncPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ne", withExtension: "png")`
    static func nePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nf", withExtension: "png")`
    static func nfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ng", withExtension: "png")`
    static func ngPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ngPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ni", withExtension: "png")`
    static func niPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.niPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nl", withExtension: "png")`
    static func nlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "no", withExtension: "png")`
    static func noPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "np", withExtension: "png")`
    static func npPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.npPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nr", withExtension: "png")`
    static func nrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nu", withExtension: "png")`
    static func nuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nz", withExtension: "png")`
    static func nzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "om", withExtension: "png")`
    static func omPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.omPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pa", withExtension: "png")`
    static func paPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.paPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pe", withExtension: "png")`
    static func pePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pf", withExtension: "png")`
    static func pfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pg", withExtension: "png")`
    static func pgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ph", withExtension: "png")`
    static func phPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.phPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pk", withExtension: "png")`
    static func pkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pl", withExtension: "png")`
    static func plPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pm", withExtension: "png")`
    static func pmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pn", withExtension: "png")`
    static func pnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pr", withExtension: "png")`
    static func prPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.prPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ps", withExtension: "png")`
    static func psPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.psPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pt", withExtension: "png")`
    static func ptPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ptPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "push", withExtension: "mp3")`
    static func pushMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pushMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pw", withExtension: "png")`
    static func pwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "py", withExtension: "png")`
    static func pyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "qa", withExtension: "png")`
    static func qaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "re", withExtension: "png")`
    static func rePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ro", withExtension: "png")`
    static func roPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.roPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rs", withExtension: "png")`
    static func rsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ru", withExtension: "png")`
    static func ruPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ruPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rw", withExtension: "png")`
    static func rwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sa", withExtension: "png")`
    static func saPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sb", withExtension: "png")`
    static func sbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sc", withExtension: "png")`
    static func scPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sd", withExtension: "png")`
    static func sdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "se", withExtension: "png")`
    static func sePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sg", withExtension: "png")`
    static func sgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sh", withExtension: "png")`
    static func shPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "si", withExtension: "png")`
    static func siPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sj", withExtension: "png")`
    static func sjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sk", withExtension: "png")`
    static func skPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.skPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sl", withExtension: "png")`
    static func slPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.slPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sm", withExtension: "png")`
    static func smPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sn", withExtension: "png")`
    static func snPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "so", withExtension: "png")`
    static func soPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sound", withExtension: "mp3")`
    static func soundMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soundMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sr", withExtension: "png")`
    static func srPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.srPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ss", withExtension: "png")`
    static func ssPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ssPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "st", withExtension: "png")`
    static func stPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "success@3x", withExtension: "png")`
    static func success3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.success3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sv", withExtension: "png")`
    static func svPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.svPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sx", withExtension: "png")`
    static func sxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sy", withExtension: "png")`
    static func syPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.syPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sz", withExtension: "png")`
    static func szPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.szPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tc", withExtension: "png")`
    static func tcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "td", withExtension: "png")`
    static func tdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tf", withExtension: "png")`
    static func tfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tg", withExtension: "png")`
    static func tgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "th", withExtension: "png")`
    static func thPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tj", withExtension: "png")`
    static func tjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tk", withExtension: "png")`
    static func tkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tl", withExtension: "png")`
    static func tlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tm", withExtension: "png")`
    static func tmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tn", withExtension: "png")`
    static func tnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "to", withExtension: "png")`
    static func toPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tr", withExtension: "png")`
    static func trPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.trPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tt", withExtension: "png")`
    static func ttPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tv", withExtension: "png")`
    static func tvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tw", withExtension: "png")`
    static func twPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.twPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tz", withExtension: "png")`
    static func tzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ua", withExtension: "png")`
    static func uaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ug", withExtension: "png")`
    static func ugPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ugPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "um", withExtension: "png")`
    static func umPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.umPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "us", withExtension: "png")`
    static func usPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.usPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "uy", withExtension: "png")`
    static func uyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "uz", withExtension: "png")`
    static func uzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "va", withExtension: "png")`
    static func vaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vc", withExtension: "png")`
    static func vcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ve", withExtension: "png")`
    static func vePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vg", withExtension: "png")`
    static func vgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vi", withExtension: "png")`
    static func viPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.viPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vn", withExtension: "png")`
    static func vnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vu", withExtension: "png")`
    static func vuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wf", withExtension: "png")`
    static func wfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ws", withExtension: "png")`
    static func wsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ye", withExtension: "png")`
    static func yePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "yt", withExtension: "png")`
    static func ytPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ytPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "za", withExtension: "png")`
    static func zaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zm", withExtension: "png")`
    static func zmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zw", withExtension: "png")`
    static func zwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zz", withExtension: "png")`
    static func zzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 28 fonts.
  struct font: Rswift.Validatable {
    /// Font `OpenSans-BoldItalic`.
    static let openSansBoldItalic = Rswift.FontResource(fontName: "OpenSans-BoldItalic")
    /// Font `OpenSans-Bold`.
    static let openSansBold = Rswift.FontResource(fontName: "OpenSans-Bold")
    /// Font `OpenSans-ExtraboldItalic`.
    static let openSansExtraboldItalic = Rswift.FontResource(fontName: "OpenSans-ExtraboldItalic")
    /// Font `OpenSans-Extrabold`.
    static let openSansExtrabold = Rswift.FontResource(fontName: "OpenSans-Extrabold")
    /// Font `OpenSans-Italic`.
    static let openSansItalic = Rswift.FontResource(fontName: "OpenSans-Italic")
    /// Font `OpenSans-Light`.
    static let openSansLight = Rswift.FontResource(fontName: "OpenSans-Light")
    /// Font `OpenSans-SemiboldItalic`.
    static let openSansSemiboldItalic = Rswift.FontResource(fontName: "OpenSans-SemiboldItalic")
    /// Font `OpenSans-Semibold`.
    static let openSansSemibold = Rswift.FontResource(fontName: "OpenSans-Semibold")
    /// Font `OpenSansLight-Italic`.
    static let openSansLightItalic = Rswift.FontResource(fontName: "OpenSansLight-Italic")
    /// Font `OpenSans`.
    static let openSans = Rswift.FontResource(fontName: "OpenSans")
    /// Font `ProximaNova-Black`.
    static let proximaNovaBlack = Rswift.FontResource(fontName: "ProximaNova-Black")
    /// Font `ProximaNova-Bold`.
    static let proximaNovaBold = Rswift.FontResource(fontName: "ProximaNova-Bold")
    /// Font `ProximaNova-Extrabld`.
    static let proximaNovaExtrabld = Rswift.FontResource(fontName: "ProximaNova-Extrabld")
    /// Font `ProximaNova-Light`.
    static let proximaNovaLight = Rswift.FontResource(fontName: "ProximaNova-Light")
    /// Font `ProximaNova-Regular`.
    static let proximaNovaRegular = Rswift.FontResource(fontName: "ProximaNova-Regular")
    /// Font `ProximaNova-Semibold`.
    static let proximaNovaSemibold = Rswift.FontResource(fontName: "ProximaNova-Semibold")
    /// Font `SFProDisplay-Black`.
    static let sfProDisplayBlack = Rswift.FontResource(fontName: "SFProDisplay-Black")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-Semibold`.
    static let sfProDisplaySemibold = Rswift.FontResource(fontName: "SFProDisplay-Semibold")
    /// Font `SFProDisplay-Thin`.
    static let sfProDisplayThin = Rswift.FontResource(fontName: "SFProDisplay-Thin")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")

    /// `UIFont(name: "OpenSans", size: ...)`
    static func openSans(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSans, size: size)
    }

    /// `UIFont(name: "OpenSans-Bold", size: ...)`
    static func openSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBold, size: size)
    }

    /// `UIFont(name: "OpenSans-BoldItalic", size: ...)`
    static func openSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Extrabold", size: ...)`
    static func openSansExtrabold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtrabold, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraboldItalic", size: ...)`
    static func openSansExtraboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraboldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Italic", size: ...)`
    static func openSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Light", size: ...)`
    static func openSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLight, size: size)
    }

    /// `UIFont(name: "OpenSans-Semibold", size: ...)`
    static func openSansSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemibold, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiboldItalic", size: ...)`
    static func openSansSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiboldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansLight-Italic", size: ...)`
    static func openSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLightItalic, size: size)
    }

    /// `UIFont(name: "ProximaNova-Black", size: ...)`
    static func proximaNovaBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaBlack, size: size)
    }

    /// `UIFont(name: "ProximaNova-Bold", size: ...)`
    static func proximaNovaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaBold, size: size)
    }

    /// `UIFont(name: "ProximaNova-Extrabld", size: ...)`
    static func proximaNovaExtrabld(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaExtrabld, size: size)
    }

    /// `UIFont(name: "ProximaNova-Light", size: ...)`
    static func proximaNovaLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaLight, size: size)
    }

    /// `UIFont(name: "ProximaNova-Regular", size: ...)`
    static func proximaNovaRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaRegular, size: size)
    }

    /// `UIFont(name: "ProximaNova-Semibold", size: ...)`
    static func proximaNovaSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaSemibold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Black", size: ...)`
    static func sfProDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Semibold", size: ...)`
    static func sfProDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Thin", size: ...)`
    static func sfProDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThin, size: size)
    }

    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }

    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }

    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }

    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }

    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }

    static func validate() throws {
      if R.font.openSans(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Bold' could not be loaded, is 'OpenSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-BoldItalic' could not be loaded, is 'OpenSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtrabold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Extrabold' could not be loaded, is 'OpenSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraboldItalic' could not be loaded, is 'OpenSans-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Italic' could not be loaded, is 'OpenSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Light' could not be loaded, is 'OpenSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Semibold' could not be loaded, is 'OpenSans-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiboldItalic' could not be loaded, is 'OpenSans-SemiboldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansLight-Italic' could not be loaded, is 'OpenSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Black' could not be loaded, is 'PROXIMANOVA-BLACK.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Bold' could not be loaded, is 'PROXIMANOVA-BOLD.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaExtrabld(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Extrabld' could not be loaded, is 'PROXIMANOVA-EXTRABLD.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Light' could not be loaded, is 'PROXIMANOVA-LIGHT.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Regular' could not be loaded, is 'PROXIMANOVA-REGULAR.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Semibold' could not be loaded, is 'PROXIMANOVA-SEMIBOLD.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Black' could not be loaded, is 'SF-Pro-Display-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'SF-Pro-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SF-Pro-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Semibold' could not be loaded, is 'SF-Pro-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Thin' could not be loaded, is 'SF-Pro-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct main {
      /// Accessibility identifier `PriceRangeTableViewCell`.
      static let priceRangeTableViewCell: String = "PriceRangeTableViewCell"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 833 images.
  struct image {
    /// Image ` ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: " ic_google")
    /// Image `Al-ain`.
    static let alAin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Al-ain")
    /// Image `Altameeza_logo`.
    static let altameeza_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Altameeza_logo")
    /// Image `AppLoginBG_Constrution`.
    static let appLoginBG_Constrution = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_Constrution")
    /// Image `AppLoginBG_ECom`.
    static let appLoginBG_ECom = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_ECom")
    /// Image `AppLoginBG_Food`.
    static let appLoginBG_Food = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_Food")
    /// Image `AppLoginBG_Gym`.
    static let appLoginBG_Gym = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_Gym")
    /// Image `AppLoginBG_Home`.
    static let appLoginBG_Home = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_Home")
    /// Image `AppLoginBG_JNJ`.
    static let appLoginBG_JNJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_JNJ")
    /// Image `AppLoginBG_Party`.
    static let appLoginBG_Party = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLoginBG_Party")
    /// Image `AppLogoEssentials`.
    static let appLogoEssentials = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLogoEssentials")
    /// Image `AppLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLogo")
    /// Image `Aquafina`.
    static let aquafina = Rswift.ImageResource(bundle: R.hostingBundle, name: "Aquafina")
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `Back_New`.
    static let back_New = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back_New")
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `Calender`.
    static let calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calender")
    /// Image `CallDriver`.
    static let callDriver = Rswift.ImageResource(bundle: R.hostingBundle, name: "CallDriver")
    /// Image `CashOnDelivery`.
    static let cashOnDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "CashOnDelivery")
    /// Image `Conekta logo-1`.
    static let conektaLogo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Conekta logo-1")
    /// Image `CreditCard`.
    static let creditCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreditCard")
    /// Image `CurrentLocation`.
    static let currentLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "CurrentLocation")
    /// Image `DeliveryfySplash`.
    static let deliveryfySplash = Rswift.ImageResource(bundle: R.hostingBundle, name: "DeliveryfySplash")
    /// Image `DrinkingWaterActive`.
    static let drinkingWaterActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "DrinkingWaterActive")
    /// Image `DrinkingWater`.
    static let drinkingWater = Rswift.ImageResource(bundle: R.hostingBundle, name: "DrinkingWater")
    /// Image `DropIcon`.
    static let dropIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "DropIcon")
    /// Image `DropMarker`.
    static let dropMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "DropMarker")
    /// Image `EmptyDescription`.
    static let emptyDescription = Rswift.ImageResource(bundle: R.hostingBundle, name: "EmptyDescription")
    /// Image `FreightActive`.
    static let freightActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "FreightActive")
    /// Image `Freight`.
    static let freight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Freight")
    /// Image `GasActive`.
    static let gasActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "GasActive")
    /// Image `Gas`.
    static let gas = Rswift.ImageResource(bundle: R.hostingBundle, name: "Gas")
    /// Image `HeavyMachineActive`.
    static let heavyMachineActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeavyMachineActive")
    /// Image `HeavyMachine`.
    static let heavyMachine = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeavyMachine")
    /// Image `HomeScreen_JNJ`.
    static let homeScreen_JNJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeScreen_JNJ")
    /// Image `MapChange`.
    static let mapChange = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapChange")
    /// Image `Musafi`.
    static let musafi = Rswift.ImageResource(bundle: R.hostingBundle, name: "Musafi")
    /// Image `NextMaterial`.
    static let nextMaterial = Rswift.ImageResource(bundle: R.hostingBundle, name: "NextMaterial")
    /// Image `Oasis`.
    static let oasis = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oasis")
    /// Image `OrangeArrowIcon`.
    static let orangeArrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "OrangeArrowIcon")
    /// Image `PickUpIcon`.
    static let pickUpIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PickUpIcon")
    /// Image `PickUpMarker`.
    static let pickUpMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "PickUpMarker")
    /// Image `PromoCode`.
    static let promoCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoCode")
    /// Image `RoyoLogo`.
    static let royoLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "RoyoLogo")
    /// Image `SplashBletani`.
    static let splashBletani = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashBletani")
    /// Image `Splashelconcierge`.
    static let splashelconcierge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splashelconcierge")
    /// Image `StarEmptyLarge`.
    static let starEmptyLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarEmptyLarge")
    /// Image `StarEmptySmall`.
    static let starEmptySmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarEmptySmall")
    /// Image `StarFullLarge`.
    static let starFullLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarFullLarge")
    /// Image `StarFullSmall`.
    static let starFullSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarFullSmall")
    /// Image `StarHalfLarge`.
    static let starHalfLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarHalfLarge")
    /// Image `StarHalfSmall`.
    static let starHalfSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarHalfSmall")
    /// Image `Star_grey`.
    static let star_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_grey")
    /// Image `Star_yellow`.
    static let star_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_yellow")
    /// Image `Support`.
    static let support = Rswift.ImageResource(bundle: R.hostingBundle, name: "Support")
    /// Image `TowTruckActive`.
    static let towTruckActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "TowTruckActive")
    /// Image `TowTruck`.
    static let towTruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "TowTruck")
    /// Image `UAE`.
    static let uaE = Rswift.ImageResource(bundle: R.hostingBundle, name: "UAE")
    /// Image `WT1`.
    static let wt1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WT1")
    /// Image `WaterTankerActive`.
    static let waterTankerActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "WaterTankerActive")
    /// Image `WaterTanker`.
    static let waterTanker = Rswift.ImageResource(bundle: R.hostingBundle, name: "WaterTanker")
    /// Image `aboutUs`.
    static let aboutUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutUs")
    /// Image `ad`.
    static let ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad")
    /// Image `add_location`.
    static let add_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_location")
    /// Image `advertisment_1`.
    static let advertisment_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "advertisment_1")
    /// Image `advertisment_2`.
    static let advertisment_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "advertisment_2")
    /// Image `ae`.
    static let ae = Rswift.ImageResource(bundle: R.hostingBundle, name: "ae")
    /// Image `af`.
    static let af = Rswift.ImageResource(bundle: R.hostingBundle, name: "af")
    /// Image `ag`.
    static let ag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ag")
    /// Image `ai`.
    static let ai = Rswift.ImageResource(bundle: R.hostingBundle, name: "ai")
    /// Image `al`.
    static let al = Rswift.ImageResource(bundle: R.hostingBundle, name: "al")
    /// Image `am`.
    static let am = Rswift.ImageResource(bundle: R.hostingBundle, name: "am")
    /// Image `ambu_marker`.
    static let ambu_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ambu_marker")
    /// Image `ambulanceNormal`.
    static let ambulanceNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ambulanceNormal")
    /// Image `ambulanceOutline`.
    static let ambulanceOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ambulanceOutline")
    /// Image `ambulance_v2`.
    static let ambulance_v2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ambulance_v2")
    /// Image `ambulance`.
    static let ambulance = Rswift.ImageResource(bundle: R.hostingBundle, name: "ambulance")
    /// Image `ao`.
    static let ao = Rswift.ImageResource(bundle: R.hostingBundle, name: "ao")
    /// Image `aq`.
    static let aq = Rswift.ImageResource(bundle: R.hostingBundle, name: "aq")
    /// Image `ar`.
    static let ar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ar")
    /// Image `arrow_down`.
    static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down")
    /// Image `arrow_left`.
    static let arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left")
    /// Image `arrow_right`.
    static let arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `as`.
    static let `as` = Rswift.ImageResource(bundle: R.hostingBundle, name: "as")
    /// Image `at`.
    static let at = Rswift.ImageResource(bundle: R.hostingBundle, name: "at")
    /// Image `au`.
    static let au = Rswift.ImageResource(bundle: R.hostingBundle, name: "au")
    /// Image `automaticIcon`.
    static let automaticIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "automaticIcon")
    /// Image `aw`.
    static let aw = Rswift.ImageResource(bundle: R.hostingBundle, name: "aw")
    /// Image `ax`.
    static let ax = Rswift.ImageResource(bundle: R.hostingBundle, name: "ax")
    /// Image `az`.
    static let az = Rswift.ImageResource(bundle: R.hostingBundle, name: "az")
    /// Image `ba`.
    static let ba = Rswift.ImageResource(bundle: R.hostingBundle, name: "ba")
    /// Image `backNew_white`.
    static let backNew_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNew_white")
    /// Image `backNew`.
    static let backNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNew")
    /// Image `back_home`.
    static let back_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_home")
    /// Image `badge_sponsor`.
    static let badge_sponsor = Rswift.ImageResource(bundle: R.hostingBundle, name: "badge_sponsor")
    /// Image `bagdeliveryicon`.
    static let bagdeliveryicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bagdeliveryicon")
    /// Image `banner1`.
    static let banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner1")
    /// Image `banner2`.
    static let banner2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner2")
    /// Image `banner3`.
    static let banner3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner3")
    /// Image `banner_bg`.
    static let banner_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_bg")
    /// Image `bb`.
    static let bb = Rswift.ImageResource(bundle: R.hostingBundle, name: "bb")
    /// Image `bd`.
    static let bd = Rswift.ImageResource(bundle: R.hostingBundle, name: "bd")
    /// Image `be`.
    static let be = Rswift.ImageResource(bundle: R.hostingBundle, name: "be")
    /// Image `bf`.
    static let bf = Rswift.ImageResource(bundle: R.hostingBundle, name: "bf")
    /// Image `bg_1`.
    static let bg_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_1")
    /// Image `bg_2`.
    static let bg_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_2")
    /// Image `bg_services`.
    static let bg_services = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_services")
    /// Image `bg_splash_ii`.
    static let bg_splash_ii = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_splash_ii")
    /// Image `bg_splash`.
    static let bg_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_splash")
    /// Image `bg`.
    static let bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg")
    /// Image `bh`.
    static let bh = Rswift.ImageResource(bundle: R.hostingBundle, name: "bh")
    /// Image `bi`.
    static let bi = Rswift.ImageResource(bundle: R.hostingBundle, name: "bi")
    /// Image `biplifelogo`.
    static let biplifelogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "biplifelogo")
    /// Image `bj`.
    static let bj = Rswift.ImageResource(bundle: R.hostingBundle, name: "bj")
    /// Image `bl`.
    static let bl = Rswift.ImageResource(bundle: R.hostingBundle, name: "bl")
    /// Image `bluePin`.
    static let bluePin = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluePin")
    /// Image `bm`.
    static let bm = Rswift.ImageResource(bundle: R.hostingBundle, name: "bm")
    /// Image `bn`.
    static let bn = Rswift.ImageResource(bundle: R.hostingBundle, name: "bn")
    /// Image `bo`.
    static let bo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bo")
    /// Image `book_a_taxi`.
    static let book_a_taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "book_a_taxi")
    /// Image `bq`.
    static let bq = Rswift.ImageResource(bundle: R.hostingBundle, name: "bq")
    /// Image `br`.
    static let br = Rswift.ImageResource(bundle: R.hostingBundle, name: "br")
    /// Image `brownstonelogo`.
    static let brownstonelogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "brownstonelogo")
    /// Image `bs`.
    static let bs = Rswift.ImageResource(bundle: R.hostingBundle, name: "bs")
    /// Image `bt`.
    static let bt = Rswift.ImageResource(bundle: R.hostingBundle, name: "bt")
    /// Image `bv`.
    static let bv = Rswift.ImageResource(bundle: R.hostingBundle, name: "bv")
    /// Image `bw`.
    static let bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "bw")
    /// Image `by`.
    static let by = Rswift.ImageResource(bundle: R.hostingBundle, name: "by")
    /// Image `bz`.
    static let bz = Rswift.ImageResource(bundle: R.hostingBundle, name: "bz")
    /// Image `c_institutional`.
    static let c_institutional = Rswift.ImageResource(bundle: R.hostingBundle, name: "c_institutional")
    /// Image `ca`.
    static let ca = Rswift.ImageResource(bundle: R.hostingBundle, name: "ca")
    /// Image `cab_v2`.
    static let cab_v2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cab_v2")
    /// Image `cab_v3`.
    static let cab_v3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cab_v3")
    /// Image `cab`.
    static let cab = Rswift.ImageResource(bundle: R.hostingBundle, name: "cab")
    /// Image `calenderIcon`.
    static let calenderIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calenderIcon")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cartSelected`.
    static let cartSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartSelected")
    /// Image `cartUnselected`.
    static let cartUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartUnselected")
    /// Image `cart_selected`.
    static let cart_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_selected")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `categories`.
    static let categories = Rswift.ImageResource(bundle: R.hostingBundle, name: "categories")
    /// Image `categries_selected`.
    static let categries_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "categries_selected")
    /// Image `cc`.
    static let cc = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc")
    /// Image `cd`.
    static let cd = Rswift.ImageResource(bundle: R.hostingBundle, name: "cd")
    /// Image `cf`.
    static let cf = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf")
    /// Image `cg`.
    static let cg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cg")
    /// Image `ch`.
    static let ch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch")
    /// Image `ci`.
    static let ci = Rswift.ImageResource(bundle: R.hostingBundle, name: "ci")
    /// Image `ck`.
    static let ck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ck")
    /// Image `cl`.
    static let cl = Rswift.ImageResource(bundle: R.hostingBundle, name: "cl")
    /// Image `clockBlue`.
    static let clockBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockBlue")
    /// Image `cm`.
    static let cm = Rswift.ImageResource(bundle: R.hostingBundle, name: "cm")
    /// Image `cn`.
    static let cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "cn")
    /// Image `co`.
    static let co = Rswift.ImageResource(bundle: R.hostingBundle, name: "co")
    /// Image `count_cart`.
    static let count_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "count_cart")
    /// Image `cr`.
    static let cr = Rswift.ImageResource(bundle: R.hostingBundle, name: "cr")
    /// Image `cu`.
    static let cu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cu")
    /// Image `currentLocationIcon`.
    static let currentLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "currentLocationIcon")
    /// Image `cv`.
    static let cv = Rswift.ImageResource(bundle: R.hostingBundle, name: "cv")
    /// Image `cw`.
    static let cw = Rswift.ImageResource(bundle: R.hostingBundle, name: "cw")
    /// Image `cx`.
    static let cx = Rswift.ImageResource(bundle: R.hostingBundle, name: "cx")
    /// Image `cy`.
    static let cy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cy")
    /// Image `cz`.
    static let cz = Rswift.ImageResource(bundle: R.hostingBundle, name: "cz")
    /// Image `de`.
    static let de = Rswift.ImageResource(bundle: R.hostingBundle, name: "de")
    /// Image `deliveryWhite`.
    static let deliveryWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "deliveryWhite")
    /// Image `delivery_food`.
    static let delivery_food = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery_food")
    /// Image `delivery_v2`.
    static let delivery_v2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery_v2")
    /// Image `delivery_v3`.
    static let delivery_v3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery_v3")
    /// Image `discount`.
    static let discount = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount")
    /// Image `discover_ecommerce`.
    static let discover_ecommerce = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover_ecommerce")
    /// Image `discover_party`.
    static let discover_party = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover_party")
    /// Image `dj`.
    static let dj = Rswift.ImageResource(bundle: R.hostingBundle, name: "dj")
    /// Image `dk`.
    static let dk = Rswift.ImageResource(bundle: R.hostingBundle, name: "dk")
    /// Image `dm`.
    static let dm = Rswift.ImageResource(bundle: R.hostingBundle, name: "dm")
    /// Image `do`.
    static let `do` = Rswift.ImageResource(bundle: R.hostingBundle, name: "do")
    /// Image `doorIcon`.
    static let doorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "doorIcon")
    /// Image `dotPurple`.
    static let dotPurple = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotPurple")
    /// Image `downArrowIcon`.
    static let downArrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "downArrowIcon")
    /// Image `dz`.
    static let dz = Rswift.ImageResource(bundle: R.hostingBundle, name: "dz")
    /// Image `ec`.
    static let ec = Rswift.ImageResource(bundle: R.hostingBundle, name: "ec")
    /// Image `ee`.
    static let ee = Rswift.ImageResource(bundle: R.hostingBundle, name: "ee")
    /// Image `eg`.
    static let eg = Rswift.ImageResource(bundle: R.hostingBundle, name: "eg")
    /// Image `eh`.
    static let eh = Rswift.ImageResource(bundle: R.hostingBundle, name: "eh")
    /// Image `engineIcon`.
    static let engineIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "engineIcon")
    /// Image `enjoy_service_homeservices`.
    static let enjoy_service_homeservices = Rswift.ImageResource(bundle: R.hostingBundle, name: "enjoy_service_homeservices")
    /// Image `enjoy_service_mp`.
    static let enjoy_service_mp = Rswift.ImageResource(bundle: R.hostingBundle, name: "enjoy_service_mp")
    /// Image `enjoy_shopping_ecommerce`.
    static let enjoy_shopping_ecommerce = Rswift.ImageResource(bundle: R.hostingBundle, name: "enjoy_shopping_ecommerce")
    /// Image `enjoy_shopping_party`.
    static let enjoy_shopping_party = Rswift.ImageResource(bundle: R.hostingBundle, name: "enjoy_shopping_party")
    /// Image `er`.
    static let er = Rswift.ImageResource(bundle: R.hostingBundle, name: "er")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `es`.
    static let es = Rswift.ImageResource(bundle: R.hostingBundle, name: "es")
    /// Image `et`.
    static let et = Rswift.ImageResource(bundle: R.hostingBundle, name: "et")
    /// Image `fab`.
    static let fab = Rswift.ImageResource(bundle: R.hostingBundle, name: "fab")
    /// Image `facebook-logo (7)`.
    static let facebookLogo7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-logo (7)")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `failure`.
    static let failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "failure")
    /// Image `favActive`.
    static let favActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "favActive")
    /// Image `favInactive`.
    static let favInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "favInactive")
    /// Image `favouriteSelected`.
    static let favouriteSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "favouriteSelected")
    /// Image `favouriteUnselected`.
    static let favouriteUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "favouriteUnselected")
    /// Image `favouritesIcon`.
    static let favouritesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favouritesIcon")
    /// Image `fi`.
    static let fi = Rswift.ImageResource(bundle: R.hostingBundle, name: "fi")
    /// Image `filterDark`.
    static let filterDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "filterDark")
    /// Image `fj`.
    static let fj = Rswift.ImageResource(bundle: R.hostingBundle, name: "fj")
    /// Image `fk`.
    static let fk = Rswift.ImageResource(bundle: R.hostingBundle, name: "fk")
    /// Image `flag_ead`.
    static let flag_ead = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_ead")
    /// Image `flag_us`.
    static let flag_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_us")
    /// Image `fm`.
    static let fm = Rswift.ImageResource(bundle: R.hostingBundle, name: "fm")
    /// Image `fo`.
    static let fo = Rswift.ImageResource(bundle: R.hostingBundle, name: "fo")
    /// Image `foodPickUpB1`.
    static let foodPickUpB1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodPickUpB1")
    /// Image `foodPickUpB2`.
    static let foodPickUpB2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodPickUpB2")
    /// Image `foodPickUpB3`.
    static let foodPickUpB3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodPickUpB3")
    /// Image `fr`.
    static let fr = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr")
    /// Image `ga`.
    static let ga = Rswift.ImageResource(bundle: R.hostingBundle, name: "ga")
    /// Image `gb`.
    static let gb = Rswift.ImageResource(bundle: R.hostingBundle, name: "gb")
    /// Image `gd`.
    static let gd = Rswift.ImageResource(bundle: R.hostingBundle, name: "gd")
    /// Image `ge`.
    static let ge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ge")
    /// Image `gf`.
    static let gf = Rswift.ImageResource(bundle: R.hostingBundle, name: "gf")
    /// Image `gg`.
    static let gg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gg")
    /// Image `gh`.
    static let gh = Rswift.ImageResource(bundle: R.hostingBundle, name: "gh")
    /// Image `gi`.
    static let gi = Rswift.ImageResource(bundle: R.hostingBundle, name: "gi")
    /// Image `gl`.
    static let gl = Rswift.ImageResource(bundle: R.hostingBundle, name: "gl")
    /// Image `globe`.
    static let globe = Rswift.ImageResource(bundle: R.hostingBundle, name: "globe")
    /// Image `gm`.
    static let gm = Rswift.ImageResource(bundle: R.hostingBundle, name: "gm")
    /// Image `gn`.
    static let gn = Rswift.ImageResource(bundle: R.hostingBundle, name: "gn")
    /// Image `gp`.
    static let gp = Rswift.ImageResource(bundle: R.hostingBundle, name: "gp")
    /// Image `gq`.
    static let gq = Rswift.ImageResource(bundle: R.hostingBundle, name: "gq")
    /// Image `gr`.
    static let gr = Rswift.ImageResource(bundle: R.hostingBundle, name: "gr")
    /// Image `gs`.
    static let gs = Rswift.ImageResource(bundle: R.hostingBundle, name: "gs")
    /// Image `gt`.
    static let gt = Rswift.ImageResource(bundle: R.hostingBundle, name: "gt")
    /// Image `gu`.
    static let gu = Rswift.ImageResource(bundle: R.hostingBundle, name: "gu")
    /// Image `gw`.
    static let gw = Rswift.ImageResource(bundle: R.hostingBundle, name: "gw")
    /// Image `gy`.
    static let gy = Rswift.ImageResource(bundle: R.hostingBundle, name: "gy")
    /// Image `heartSelected`.
    static let heartSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartSelected")
    /// Image `heartUnselected`.
    static let heartUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartUnselected")
    /// Image `helpIcon`.
    static let helpIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpIcon")
    /// Image `hk`.
    static let hk = Rswift.ImageResource(bundle: R.hostingBundle, name: "hk")
    /// Image `hm`.
    static let hm = Rswift.ImageResource(bundle: R.hostingBundle, name: "hm")
    /// Image `hn`.
    static let hn = Rswift.ImageResource(bundle: R.hostingBundle, name: "hn")
    /// Image `homeSelected`.
    static let homeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeSelected")
    /// Image `homeUnselected`.
    static let homeUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeUnselected")
    /// Image `home_selected`.
    static let home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_selected")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `homerservices_bg`.
    static let homerservices_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "homerservices_bg")
    /// Image `hr`.
    static let hr = Rswift.ImageResource(bundle: R.hostingBundle, name: "hr")
    /// Image `ht`.
    static let ht = Rswift.ImageResource(bundle: R.hostingBundle, name: "ht")
    /// Image `hu`.
    static let hu = Rswift.ImageResource(bundle: R.hostingBundle, name: "hu")
    /// Image `ic_1`.
    static let ic_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_1")
    /// Image `ic_1off`.
    static let ic_1off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_1off")
    /// Image `ic_1s`.
    static let ic_1s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_1s")
    /// Image `ic_2`.
    static let ic_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2")
    /// Image `ic_2off`.
    static let ic_2off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2off")
    /// Image `ic_2s`.
    static let ic_2s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2s")
    /// Image `ic_3`.
    static let ic_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3")
    /// Image `ic_3off`.
    static let ic_3off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3off")
    /// Image `ic_3s`.
    static let ic_3s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3s")
    /// Image `ic_4`.
    static let ic_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_4")
    /// Image `ic_4off`.
    static let ic_4off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_4off")
    /// Image `ic_4s`.
    static let ic_4s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_4s")
    /// Image `ic_5`.
    static let ic_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_5")
    /// Image `ic_5off`.
    static let ic_5off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_5off")
    /// Image `ic_5s`.
    static let ic_5s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_5s")
    /// Image `ic_ChatBot`.
    static let ic_ChatBot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ChatBot")
    /// Image `ic_UK_flag`.
    static let ic_UK_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_UK_flag")
    /// Image `ic_about_Us`.
    static let ic_about_Us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about_Us")
    /// Image `ic_active_dot`.
    static let ic_active_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_active_dot")
    /// Image `ic_add_Icon`.
    static let ic_add_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_Icon")
    /// Image `ic_add_bg-g`.
    static let ic_add_bgG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_bg-g")
    /// Image `ic_add_bg`.
    static let ic_add_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_bg")
    /// Image `ic_add_dp`.
    static let ic_add_dp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_dp")
    /// Image `ic_add_new_Icon`.
    static let ic_add_new_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_new_Icon")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_address`.
    static let ic_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address")
    /// Image `ic_apple`.
    static let ic_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_apple")
    /// Image `ic_arrow_forward`.
    static let ic_arrow_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_forward")
    /// Image `ic_arrow_round`.
    static let ic_arrow_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_round")
    /// Image `ic_back_arrow_black`.
    static let ic_back_arrow_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_arrow_black")
    /// Image `ic_back_arrow_white`.
    static let ic_back_arrow_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_arrow_white")
    /// Image `ic_back_map`.
    static let ic_back_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_map")
    /// Image `ic_back_white-1`.
    static let ic_back_white1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_white-1")
    /// Image `ic_back_white`.
    static let ic_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_white")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_badge_big`.
    static let ic_badge_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_big")
    /// Image `ic_badge_bronze_big`.
    static let ic_badge_bronze_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_bronze_big")
    /// Image `ic_badge_bronze_small`.
    static let ic_badge_bronze_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_bronze_small")
    /// Image `ic_badge_gold_big`.
    static let ic_badge_gold_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_gold_big")
    /// Image `ic_badge_gold_small`.
    static let ic_badge_gold_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_gold_small")
    /// Image `ic_badge_mini_bronze`.
    static let ic_badge_mini_bronze = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_mini_bronze")
    /// Image `ic_badge_mini_gold`.
    static let ic_badge_mini_gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_mini_gold")
    /// Image `ic_badge_mini_plat`.
    static let ic_badge_mini_plat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_mini_plat")
    /// Image `ic_badge_mini_silver`.
    static let ic_badge_mini_silver = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_mini_silver")
    /// Image `ic_badge_silver_big`.
    static let ic_badge_silver_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_silver_big")
    /// Image `ic_badge_silver_small`.
    static let ic_badge_silver_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_silver_small")
    /// Image `ic_badge_small`.
    static let ic_badge_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_badge_small")
    /// Image `ic_barcode_scan`.
    static let ic_barcode_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_barcode_scan")
    /// Image `ic_barcode_white`.
    static let ic_barcode_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_barcode_white")
    /// Image `ic_bg`.
    static let ic_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bg")
    /// Image `ic_bike_active`.
    static let ic_bike_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bike_active")
    /// Image `ic_bike_inactive`.
    static let ic_bike_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bike_inactive")
    /// Image `ic_book_by_call`.
    static let ic_book_by_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_book_by_call")
    /// Image `ic_book_taxi`.
    static let ic_book_taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_book_taxi")
    /// Image `ic_bot_send`.
    static let ic_bot_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bot_send")
    /// Image `ic_breackdown`.
    static let ic_breackdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_breackdown")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_calender_circle`.
    static let ic_calender_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_circle")
    /// Image `ic_call-1`.
    static let ic_call1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call-1")
    /// Image `ic_call_admin`.
    static let ic_call_admin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call_admin")
    /// Image `ic_call_driver`.
    static let ic_call_driver = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call_driver")
    /// Image `ic_call`.
    static let ic_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call")
    /// Image `ic_cancel_red`.
    static let ic_cancel_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel_red")
    /// Image `ic_cancel_ride_big`.
    static let ic_cancel_ride_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel_ride_big")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_car_0`.
    static let ic_car_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_0")
    /// Image `ic_car_1`.
    static let ic_car_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_1")
    /// Image `ic_car_active`.
    static let ic_car_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_active")
    /// Image `ic_car_inactive`.
    static let ic_car_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_inactive")
    /// Image `ic_car_white`.
    static let ic_car_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_white")
    /// Image `ic_card_active`.
    static let ic_card_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_active")
    /// Image `ic_card_inactive`.
    static let ic_card_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_inactive")
    /// Image `ic_card`.
    static let ic_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card")
    /// Image `ic_cart_minus_normal`.
    static let ic_cart_minus_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_minus_normal")
    /// Image `ic_cart_minus_pressed`.
    static let ic_cart_minus_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_minus_pressed")
    /// Image `ic_cart_plus_normal`.
    static let ic_cart_plus_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_plus_normal")
    /// Image `ic_cart_plus_pressed`.
    static let ic_cart_plus_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_plus_pressed")
    /// Image `ic_cart_red`.
    static let ic_cart_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_red")
    /// Image `ic_cart_white-1`.
    static let ic_cart_white1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_white-1")
    /// Image `ic_cart_white-2`.
    static let ic_cart_white2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_white-2")
    /// Image `ic_cart_white`.
    static let ic_cart_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_white")
    /// Image `ic_cart`.
    static let ic_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart")
    /// Image `ic_cash_active`.
    static let ic_cash_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash_active")
    /// Image `ic_cash_inactive`.
    static let ic_cash_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash_inactive")
    /// Image `ic_cash`.
    static let ic_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash")
    /// Image `ic_categories_unactive`.
    static let ic_categories_unactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_categories_unactive")
    /// Image `ic_categories`.
    static let ic_categories = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_categories")
    /// Image `ic_chat`.
    static let ic_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat")
    /// Image `ic_check_normal`.
    static let ic_check_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_normal")
    /// Image `ic_check_off`.
    static let ic_check_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_off")
    /// Image `ic_check_on`.
    static let ic_check_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_on")
    /// Image `ic_check_pressed`.
    static let ic_check_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_pressed")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_checkbox_active`.
    static let ic_checkbox_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_active")
    /// Image `ic_checkbox_checked-1`.
    static let ic_checkbox_checked1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_checked-1")
    /// Image `ic_checkbox_checked`.
    static let ic_checkbox_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_checked")
    /// Image `ic_checkbox_inactive`.
    static let ic_checkbox_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_inactive")
    /// Image `ic_checkbox`.
    static let ic_checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_compare`.
    static let ic_compare = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_compare")
    /// Image `ic_coupon`.
    static let ic_coupon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coupon")
    /// Image `ic_cross-g`.
    static let ic_crossG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross-g")
    /// Image `ic_cross_s`.
    static let ic_cross_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross_s")
    /// Image `ic_cross_white`.
    static let ic_cross_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross_white")
    /// Image `ic_dd_black`.
    static let ic_dd_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_black")
    /// Image `ic_dd_down`.
    static let ic_dd_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_down")
    /// Image `ic_dd_green`.
    static let ic_dd_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_green")
    /// Image `ic_dd_up`.
    static let ic_dd_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_up")
    /// Image `ic_default_address`.
    static let ic_default_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_default_address")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_delivery@3x`.
    static let ic_delivery3x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delivery@3x")
    /// Image `ic_discountFood`.
    static let ic_discountFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discountFood")
    /// Image `ic_discount`.
    static let ic_discount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discount")
    /// Image `ic_down`.
    static let ic_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_down")
    /// Image `ic_drawr`.
    static let ic_drawr = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drawr")
    /// Image `ic_drop_down_black`.
    static let ic_drop_down_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_down_black")
    /// Image `ic_drop_location`.
    static let ic_drop_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_location")
    /// Image `ic_drop_text_area`.
    static let ic_drop_text_area = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_text_area")
    /// Image `ic_dropdown_arrow`.
    static let ic_dropdown_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropdown_arrow")
    /// Image `ic_dropoff_dot`.
    static let ic_dropoff_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropoff_dot")
    /// Image `ic_dummy_user`.
    static let ic_dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dummy_user")
    /// Image `ic_email_us`.
    static let ic_email_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_us")
    /// Image `ic_enter_otp`.
    static let ic_enter_otp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_enter_otp")
    /// Image `ic_enter_phone`.
    static let ic_enter_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_enter_phone")
    /// Image `ic_facebbok`.
    static let ic_facebbok = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebbok")
    /// Image `ic_facebook`.
    static let ic_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook")
    /// Image `ic_favorite_white_normal-1`.
    static let ic_favorite_white_normal1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_white_normal-1")
    /// Image `ic_favorite_white_normal`.
    static let ic_favorite_white_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_white_normal")
    /// Image `ic_favorite_white_pressed`.
    static let ic_favorite_white_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_white_pressed")
    /// Image `ic_fb`.
    static let ic_fb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb")
    /// Image `ic_filter`.
    static let ic_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter")
    /// Image `ic_flag`.
    static let ic_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_flag")
    /// Image `ic_gps`.
    static let ic_gps = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gps")
    /// Image `ic_grid_view`.
    static let ic_grid_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grid_view")
    /// Image `ic_grocery_delivery_charges-1`.
    static let ic_grocery_delivery_charges1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grocery_delivery_charges-1")
    /// Image `ic_grocery_delivery_charges`.
    static let ic_grocery_delivery_charges = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grocery_delivery_charges")
    /// Image `ic_grocery_deliverytime`.
    static let ic_grocery_deliverytime = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grocery_deliverytime")
    /// Image `ic_half_way_stop`.
    static let ic_half_way_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_half_way_stop")
    /// Image `ic_heavy_machinery_m`.
    static let ic_heavy_machinery_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heavy_machinery_m")
    /// Image `ic_hm_service_charges`.
    static let ic_hm_service_charges = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hm_service_charges")
    /// Image `ic_hm_service_time`.
    static let ic_hm_service_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hm_service_time")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_illus_1`.
    static let ic_illus_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_illus_1")
    /// Image `ic_illus_2`.
    static let ic_illus_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_illus_2")
    /// Image `ic_illus_3`.
    static let ic_illus_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_illus_3")
    /// Image `ic_inactive_dot`.
    static let ic_inactive_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_inactive_dot")
    /// Image `ic_info`.
    static let ic_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info")
    /// Image `ic_instagram-1`.
    static let ic_instagram1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram-1")
    /// Image `ic_instagram-2`.
    static let ic_instagram2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram-2")
    /// Image `ic_instagram`.
    static let ic_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram")
    /// Image `ic_language`.
    static let ic_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_language")
    /// Image `ic_list_view`.
    static let ic_list_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_view")
    /// Image `ic_liveTracking`.
    static let ic_liveTracking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_liveTracking")
    /// Image `ic_loc`.
    static let ic_loc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_loc")
    /// Image `ic_location_blue`.
    static let ic_location_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_blue")
    /// Image `ic_location_done`.
    static let ic_location_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_done")
    /// Image `ic_location_grey`.
    static let ic_location_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_grey")
    /// Image `ic_location_pin`.
    static let ic_location_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_pin")
    /// Image `ic_location`.
    static let ic_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location")
    /// Image `ic_login`.
    static let ic_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_lp_medal`.
    static let ic_lp_medal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lp_medal")
    /// Image `ic_lp`.
    static let ic_lp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lp")
    /// Image `ic_mail_us`.
    static let ic_mail_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mail_us")
    /// Image `ic_map_car`.
    static let ic_map_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_car")
    /// Image `ic_map_pin`.
    static let ic_map_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_pin")
    /// Image `ic_master_card`.
    static let ic_master_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_master_card")
    /// Image `ic_menu-1`.
    static let ic_menu1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu-1")
    /// Image `ic_menu_white-1`.
    static let ic_menu_white1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_white-1")
    /// Image `ic_menu_white-2`.
    static let ic_menu_white2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_white-2")
    /// Image `ic_menu_white`.
    static let ic_menu_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_white")
    /// Image `ic_micro_active`.
    static let ic_micro_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_micro_active")
    /// Image `ic_micro_inactive`.
    static let ic_micro_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_micro_inactive")
    /// Image `ic_min_amount`.
    static let ic_min_amount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_min_amount")
    /// Image `ic_mini_cab_m`.
    static let ic_mini_cab_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mini_cab_m")
    /// Image `ic_mini_truck_m_gas`.
    static let ic_mini_truck_m_gas = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mini_truck_m_gas")
    /// Image `ic_mini_truck_m_tow`.
    static let ic_mini_truck_m_tow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mini_truck_m_tow")
    /// Image `ic_mini_truck_water_m`.
    static let ic_mini_truck_water_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mini_truck_water_m")
    /// Image `ic_minus`.
    static let ic_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus")
    /// Image `ic_my_order`.
    static let ic_my_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_order")
    /// Image `ic_nav`.
    static let ic_nav = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nav")
    /// Image `ic_nearby`.
    static let ic_nearby = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nearby")
    /// Image `ic_new_Work`.
    static let ic_new_Work = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_Work")
    /// Image `ic_new`.
    static let ic_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new")
    /// Image `ic_nodata`.
    static let ic_nodata = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nodata")
    /// Image `ic_notification`.
    static let ic_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification")
    /// Image `ic_np`.
    static let ic_np = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_np")
    /// Image `ic_office`.
    static let ic_office = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_office")
    /// Image `ic_oilchange`.
    static let ic_oilchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_oilchange")
    /// Image `ic_orders_done`.
    static let ic_orders_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_orders_done")
    /// Image `ic_packages-1`.
    static let ic_packages1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_packages-1")
    /// Image `ic_packages`.
    static let ic_packages = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_packages")
    /// Image `ic_payment_card`.
    static let ic_payment_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment_card")
    /// Image `ic_payment_cash`.
    static let ic_payment_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment_cash")
    /// Image `ic_payment_methods`.
    static let ic_payment_methods = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment_methods")
    /// Image `ic_pick_location`.
    static let ic_pick_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pick_location")
    /// Image `ic_picked@3x`.
    static let ic_picked3x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_picked@3x")
    /// Image `ic_pickup_2`.
    static let ic_pickup_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pickup_2")
    /// Image `ic_pickup_dot`.
    static let ic_pickup_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pickup_dot")
    /// Image `ic_place`.
    static let ic_place = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_place")
    /// Image `ic_placeholder`.
    static let ic_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder")
    /// Image `ic_play`.
    static let ic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_popular`.
    static let ic_popular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_popular")
    /// Image `ic_promo_code`.
    static let ic_promo_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promo_code")
    /// Image `ic_question`.
    static let ic_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_question")
    /// Image `ic_radio_checked`.
    static let ic_radio_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_checked")
    /// Image `ic_radio_icon`.
    static let ic_radio_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_icon")
    /// Image `ic_radio_off`.
    static let ic_radio_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_off")
    /// Image `ic_radio_on`.
    static let ic_radio_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_on")
    /// Image `ic_recent_locations_home`.
    static let ic_recent_locations_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recent_locations_home")
    /// Image `ic_recent_locations_loc-1`.
    static let ic_recent_locations_loc1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recent_locations_loc-1")
    /// Image `ic_recent_locations_loc`.
    static let ic_recent_locations_loc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recent_locations_loc")
    /// Image `ic_recent_locations`.
    static let ic_recent_locations = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recent_locations")
    /// Image `ic_recomendedFood`.
    static let ic_recomendedFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recomendedFood")
    /// Image `ic_recommend`.
    static let ic_recommend = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recommend")
    /// Image `ic_refer`.
    static let ic_refer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refer")
    /// Image `ic_referal_menu`.
    static let ic_referal_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_referal_menu")
    /// Image `ic_remember_me_selected`.
    static let ic_remember_me_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remember_me_selected")
    /// Image `ic_rememberme`.
    static let ic_rememberme = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rememberme")
    /// Image `ic_remove`.
    static let ic_remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove")
    /// Image `ic_req`.
    static let ic_req = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_req")
    /// Image `ic_return`.
    static let ic_return = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_return")
    /// Image `ic_ride_share`.
    static let ic_ride_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ride_share")
    /// Image `ic_road_pickup`.
    static let ic_road_pickup = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_road_pickup")
    /// Image `ic_salon_service_time`.
    static let ic_salon_service_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_salon_service_time")
    /// Image `ic_salon_visiting_charges`.
    static let ic_salon_visiting_charges = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_salon_visiting_charges")
    /// Image `ic_schedule_booking`.
    static let ic_schedule_booking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_schedule_booking")
    /// Image `ic_schedule_pickup`.
    static let ic_schedule_pickup = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_schedule_pickup")
    /// Image `ic_school_ride`.
    static let ic_school_ride = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_school_ride")
    /// Image `ic_search_grey`.
    static let ic_search_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_grey")
    /// Image `ic_search_multi`.
    static let ic_search_multi = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_multi")
    /// Image `ic_search_white-1`.
    static let ic_search_white1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_white-1")
    /// Image `ic_search_white`.
    static let ic_search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_white")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_send`.
    static let ic_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send")
    /// Image `ic_service_baby_sitter`.
    static let ic_service_baby_sitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_baby_sitter")
    /// Image `ic_service_cleaning`.
    static let ic_service_cleaning = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_cleaning")
    /// Image `ic_service_fitness`.
    static let ic_service_fitness = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_fitness")
    /// Image `ic_service_flowers`.
    static let ic_service_flowers = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_flowers")
    /// Image `ic_service_grocery`.
    static let ic_service_grocery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_grocery")
    /// Image `ic_service_household`.
    static let ic_service_household = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_household")
    /// Image `ic_service_laundry`.
    static let ic_service_laundry = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_laundry")
    /// Image `ic_service_meds`.
    static let ic_service_meds = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_meds")
    /// Image `ic_service_packages`.
    static let ic_service_packages = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_packages")
    /// Image `ic_service_party`.
    static let ic_service_party = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_party")
    /// Image `ic_service_photography`.
    static let ic_service_photography = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_photography")
    /// Image `ic_service_salon`.
    static let ic_service_salon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_salon")
    /// Image `ic_service_water`.
    static let ic_service_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_service_water")
    /// Image `ic_share_white`.
    static let ic_share_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_white")
    /// Image `ic_since`.
    static let ic_since = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_since")
    /// Image `ic_slide_arrow-back`.
    static let ic_slide_arrowBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slide_arrow-back")
    /// Image `ic_slide_arrow`.
    static let ic_slide_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slide_arrow")
    /// Image `ic_sp_cart`.
    static let ic_sp_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_cart")
    /// Image `ic_sp_favorites`.
    static let ic_sp_favorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_favorites")
    /// Image `ic_sp_home`.
    static let ic_sp_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_home")
    /// Image `ic_sp_location`.
    static let ic_sp_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_location")
    /// Image `ic_sp_loyalty`.
    static let ic_sp_loyalty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_loyalty")
    /// Image `ic_sp_notifications`.
    static let ic_sp_notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_notifications")
    /// Image `ic_sp_order_history`.
    static let ic_sp_order_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_order_history")
    /// Image `ic_sp_order_rate`.
    static let ic_sp_order_rate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_order_rate")
    /// Image `ic_sp_order_track`.
    static let ic_sp_order_track = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_order_track")
    /// Image `ic_sp_order_upcoming`.
    static let ic_sp_order_upcoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_order_upcoming")
    /// Image `ic_sp_promotions`.
    static let ic_sp_promotions = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_promotions")
    /// Image `ic_sp_settings`.
    static let ic_sp_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_settings")
    /// Image `ic_sp_share`.
    static let ic_sp_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_share")
    /// Image `ic_sp_support`.
    static let ic_sp_support = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sp_support")
    /// Image `ic_splash_brownNew`.
    static let ic_splash_brownNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_splash_brownNew")
    /// Image `ic_sponsor`.
    static let ic_sponsor = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sponsor")
    /// Image `ic_star_big_grey`.
    static let ic_star_big_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_big_grey")
    /// Image `ic_star_big_yellow`.
    static let ic_star_big_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_big_yellow")
    /// Image `ic_star_gray`.
    static let ic_star_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_gray")
    /// Image `ic_star_orange`.
    static let ic_star_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_orange")
    /// Image `ic_star_small_grey`.
    static let ic_star_small_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_small_grey")
    /// Image `ic_star_small_yellow`.
    static let ic_star_small_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_small_yellow")
    /// Image `ic_start_light_white`.
    static let ic_start_light_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_start_light_white")
    /// Image `ic_start_white`.
    static let ic_start_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_start_white")
    /// Image `ic_status_busy`.
    static let ic_status_busy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_busy")
    /// Image `ic_status_offline`.
    static let ic_status_offline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_offline")
    /// Image `ic_status_online`.
    static let ic_status_online = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_online")
    /// Image `ic_terms`.
    static let ic_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_terms")
    /// Image `ic_text_illus`.
    static let ic_text_illus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_text_illus")
    /// Image `ic_time_selector`.
    static let ic_time_selector = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time_selector")
    /// Image `ic_time`.
    static let ic_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time")
    /// Image `ic_token`.
    static let ic_token = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_token")
    /// Image `ic_truck_m_freights`.
    static let ic_truck_m_freights = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_truck_m_freights")
    /// Image `ic_truck_water_tank_m`.
    static let ic_truck_water_tank_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_truck_water_tank_m")
    /// Image `ic_tuk_tuk_active`.
    static let ic_tuk_tuk_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tuk_tuk_active")
    /// Image `ic_tuk_tuk_inactive`.
    static let ic_tuk_tuk_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tuk_tuk_inactive")
    /// Image `ic_twitter-1`.
    static let ic_twitter1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter-1")
    /// Image `ic_twitter-2`.
    static let ic_twitter2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter-2")
    /// Image `ic_twitter`.
    static let ic_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter")
    /// Image `ic_two_dotted_line`.
    static let ic_two_dotted_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_two_dotted_line")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `ic_unverify`.
    static let ic_unverify = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unverify")
    /// Image `ic_user1`.
    static let ic_user1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user1")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_verify`.
    static let ic_verify = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verify")
    /// Image `ic_visibility_off`.
    static let ic_visibility_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visibility_off")
    /// Image `ic_visibility_on`.
    static let ic_visibility_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visibility_on")
    /// Image `ic_welcome`.
    static let ic_welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_welcome")
    /// Image `ic_youtube`.
    static let ic_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube")
    /// Image `ico_cart`.
    static let ico_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_cart")
    /// Image `ico_edit`.
    static let ico_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_edit")
    /// Image `ico_filter`.
    static let ico_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_filter")
    /// Image `ico_info`.
    static let ico_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_info")
    /// Image `ico_invisible`.
    static let ico_invisible = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_invisible")
    /// Image `ico_location_dark`.
    static let ico_location_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_location_dark")
    /// Image `ico_mail`.
    static let ico_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_mail")
    /// Image `ico_map_flag`.
    static let ico_map_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_map_flag")
    /// Image `ico_minus`.
    static let ico_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_minus")
    /// Image `ico_next`.
    static let ico_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_next")
    /// Image `ico_notification`.
    static let ico_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_notification")
    /// Image `ico_order`.
    static let ico_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_order")
    /// Image `ico_plus`.
    static let ico_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_plus")
    /// Image `ico_refresh`.
    static let ico_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_refresh")
    /// Image `ico_right-arrow`.
    static let ico_rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_right-arrow")
    /// Image `ico_search`.
    static let ico_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_search")
    /// Image `ico_visibility`.
    static let ico_visibility = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_visibility")
    /// Image `icon-download`.
    static let iconDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-download")
    /// Image `icon_right_arrow`.
    static let icon_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right_arrow")
    /// Image `id`.
    static let id = Rswift.ImageResource(bundle: R.hostingBundle, name: "id")
    /// Image `ie`.
    static let ie = Rswift.ImageResource(bundle: R.hostingBundle, name: "ie")
    /// Image `il`.
    static let il = Rswift.ImageResource(bundle: R.hostingBundle, name: "il")
    /// Image `illustration_walkthrough_1`.
    static let illustration_walkthrough_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "illustration_walkthrough_1")
    /// Image `im`.
    static let im = Rswift.ImageResource(bundle: R.hostingBundle, name: "im")
    /// Image `image5`.
    static let image5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image5")
    /// Image `img_DriveryBoy`.
    static let img_DriveryBoy = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_DriveryBoy")
    /// Image `img_fade`.
    static let img_fade = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_fade")
    /// Image `img_nothing_found`.
    static let img_nothing_found = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_nothing_found")
    /// Image `img_truck`.
    static let img_truck = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_truck")
    /// Image `in`.
    static let `in` = Rswift.ImageResource(bundle: R.hostingBundle, name: "in")
    /// Image `instagram (8)`.
    static let instagram8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram (8)")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `io`.
    static let io = Rswift.ImageResource(bundle: R.hostingBundle, name: "io")
    /// Image `iq`.
    static let iq = Rswift.ImageResource(bundle: R.hostingBundle, name: "iq")
    /// Image `ir`.
    static let ir = Rswift.ImageResource(bundle: R.hostingBundle, name: "ir")
    /// Image `is`.
    static let `is` = Rswift.ImageResource(bundle: R.hostingBundle, name: "is")
    /// Image `it`.
    static let it = Rswift.ImageResource(bundle: R.hostingBundle, name: "it")
    /// Image `je`.
    static let je = Rswift.ImageResource(bundle: R.hostingBundle, name: "je")
    /// Image `jm`.
    static let jm = Rswift.ImageResource(bundle: R.hostingBundle, name: "jm")
    /// Image `jo`.
    static let jo = Rswift.ImageResource(bundle: R.hostingBundle, name: "jo")
    /// Image `jp`.
    static let jp = Rswift.ImageResource(bundle: R.hostingBundle, name: "jp")
    /// Image `ke`.
    static let ke = Rswift.ImageResource(bundle: R.hostingBundle, name: "ke")
    /// Image `keeda.gif`.
    static let keedaGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "keeda.gif")
    /// Image `kg`.
    static let kg = Rswift.ImageResource(bundle: R.hostingBundle, name: "kg")
    /// Image `kh`.
    static let kh = Rswift.ImageResource(bundle: R.hostingBundle, name: "kh")
    /// Image `ki`.
    static let ki = Rswift.ImageResource(bundle: R.hostingBundle, name: "ki")
    /// Image `km`.
    static let km = Rswift.ImageResource(bundle: R.hostingBundle, name: "km")
    /// Image `kn`.
    static let kn = Rswift.ImageResource(bundle: R.hostingBundle, name: "kn")
    /// Image `kp`.
    static let kp = Rswift.ImageResource(bundle: R.hostingBundle, name: "kp")
    /// Image `kr`.
    static let kr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kr")
    /// Image `kw`.
    static let kw = Rswift.ImageResource(bundle: R.hostingBundle, name: "kw")
    /// Image `ky`.
    static let ky = Rswift.ImageResource(bundle: R.hostingBundle, name: "ky")
    /// Image `kz`.
    static let kz = Rswift.ImageResource(bundle: R.hostingBundle, name: "kz")
    /// Image `la`.
    static let la = Rswift.ImageResource(bundle: R.hostingBundle, name: "la")
    /// Image `lb`.
    static let lb = Rswift.ImageResource(bundle: R.hostingBundle, name: "lb")
    /// Image `lc`.
    static let lc = Rswift.ImageResource(bundle: R.hostingBundle, name: "lc")
    /// Image `li`.
    static let li = Rswift.ImageResource(bundle: R.hostingBundle, name: "li")
    /// Image `linkedin (8)`.
    static let linkedin8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "linkedin (8)")
    /// Image `littleSeasorHeader`.
    static let littleSeasorHeader = Rswift.ImageResource(bundle: R.hostingBundle, name: "littleSeasorHeader")
    /// Image `lk`.
    static let lk = Rswift.ImageResource(bundle: R.hostingBundle, name: "lk")
    /// Image `loader.gif`.
    static let loaderGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "loader.gif")
    /// Image `location.gif`.
    static let locationGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "location.gif")
    /// Image `locationBlue`.
    static let locationBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationBlue")
    /// Image `locationDark`.
    static let locationDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationDark")
    /// Image `loginLogo`.
    static let loginLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginLogo")
    /// Image `logoBletani`.
    static let logoBletani = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoBletani")
    /// Image `logoElconcierge`.
    static let logoElconcierge = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoElconcierge")
    /// Image `logoFIF`.
    static let logoFIF = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoFIF")
    /// Image `logoJustCBD`.
    static let logoJustCBD = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoJustCBD")
    /// Image `logo_header`.
    static let logo_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_header")
    /// Image `logo_navbar_white-1`.
    static let logo_navbar_white1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_navbar_white-1")
    /// Image `logo_navbar_white`.
    static let logo_navbar_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_navbar_white")
    /// Image `logo_splah_white`.
    static let logo_splah_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_splah_white")
    /// Image `logo_splash`.
    static let logo_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_splash")
    /// Image `logo_tianquiz`.
    static let logo_tianquiz = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_tianquiz")
    /// Image `logoutIcon`.
    static let logoutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoutIcon")
    /// Image `loyalityPointsIcon`.
    static let loyalityPointsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "loyalityPointsIcon")
    /// Image `lr`.
    static let lr = Rswift.ImageResource(bundle: R.hostingBundle, name: "lr")
    /// Image `ls`.
    static let ls = Rswift.ImageResource(bundle: R.hostingBundle, name: "ls")
    /// Image `lt`.
    static let lt = Rswift.ImageResource(bundle: R.hostingBundle, name: "lt")
    /// Image `lu`.
    static let lu = Rswift.ImageResource(bundle: R.hostingBundle, name: "lu")
    /// Image `lv`.
    static let lv = Rswift.ImageResource(bundle: R.hostingBundle, name: "lv")
    /// Image `ly`.
    static let ly = Rswift.ImageResource(bundle: R.hostingBundle, name: "ly")
    /// Image `ma`.
    static let ma = Rswift.ImageResource(bundle: R.hostingBundle, name: "ma")
    /// Image `make the payment_ecommerce`.
    static let makeThePayment_ecommerce = Rswift.ImageResource(bundle: R.hostingBundle, name: "make the payment_ecommerce")
    /// Image `make the payment_party`.
    static let makeThePayment_party = Rswift.ImageResource(bundle: R.hostingBundle, name: "make the payment_party")
    /// Image `mapPin`.
    static let mapPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPin")
    /// Image `marketplace24`.
    static let marketplace24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "marketplace24")
    /// Image `marketplaceicon`.
    static let marketplaceicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "marketplaceicon")
    /// Image `mc`.
    static let mc = Rswift.ImageResource(bundle: R.hostingBundle, name: "mc")
    /// Image `md`.
    static let md = Rswift.ImageResource(bundle: R.hostingBundle, name: "md")
    /// Image `me`.
    static let me = Rswift.ImageResource(bundle: R.hostingBundle, name: "me")
    /// Image `menu_bg`.
    static let menu_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_bg")
    /// Image `mf`.
    static let mf = Rswift.ImageResource(bundle: R.hostingBundle, name: "mf")
    /// Image `mg`.
    static let mg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mg")
    /// Image `mh`.
    static let mh = Rswift.ImageResource(bundle: R.hostingBundle, name: "mh")
    /// Image `mk`.
    static let mk = Rswift.ImageResource(bundle: R.hostingBundle, name: "mk")
    /// Image `ml`.
    static let ml = Rswift.ImageResource(bundle: R.hostingBundle, name: "ml")
    /// Image `mm`.
    static let mm = Rswift.ImageResource(bundle: R.hostingBundle, name: "mm")
    /// Image `mn`.
    static let mn = Rswift.ImageResource(bundle: R.hostingBundle, name: "mn")
    /// Image `mo`.
    static let mo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mo")
    /// Image `moreIcon`.
    static let moreIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreIcon")
    /// Image `moreSelected`.
    static let moreSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreSelected")
    /// Image `moreUnselected`.
    static let moreUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreUnselected")
    /// Image `movifyicon`.
    static let movifyicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "movifyicon")
    /// Image `mp`.
    static let mp = Rswift.ImageResource(bundle: R.hostingBundle, name: "mp")
    /// Image `mq`.
    static let mq = Rswift.ImageResource(bundle: R.hostingBundle, name: "mq")
    /// Image `mr`.
    static let mr = Rswift.ImageResource(bundle: R.hostingBundle, name: "mr")
    /// Image `ms`.
    static let ms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms")
    /// Image `mt`.
    static let mt = Rswift.ImageResource(bundle: R.hostingBundle, name: "mt")
    /// Image `mu`.
    static let mu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mu")
    /// Image `mv`.
    static let mv = Rswift.ImageResource(bundle: R.hostingBundle, name: "mv")
    /// Image `mw`.
    static let mw = Rswift.ImageResource(bundle: R.hostingBundle, name: "mw")
    /// Image `mx`.
    static let mx = Rswift.ImageResource(bundle: R.hostingBundle, name: "mx")
    /// Image `myFavourites`.
    static let myFavourites = Rswift.ImageResource(bundle: R.hostingBundle, name: "myFavourites")
    /// Image `my`.
    static let my = Rswift.ImageResource(bundle: R.hostingBundle, name: "my")
    /// Image `mz`.
    static let mz = Rswift.ImageResource(bundle: R.hostingBundle, name: "mz")
    /// Image `na`.
    static let na = Rswift.ImageResource(bundle: R.hostingBundle, name: "na")
    /// Image `nc`.
    static let nc = Rswift.ImageResource(bundle: R.hostingBundle, name: "nc")
    /// Image `ne`.
    static let ne = Rswift.ImageResource(bundle: R.hostingBundle, name: "ne")
    /// Image `newAppIcon`.
    static let newAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "newAppIcon")
    /// Image `nf`.
    static let nf = Rswift.ImageResource(bundle: R.hostingBundle, name: "nf")
    /// Image `ng`.
    static let ng = Rswift.ImageResource(bundle: R.hostingBundle, name: "ng")
    /// Image `ni`.
    static let ni = Rswift.ImageResource(bundle: R.hostingBundle, name: "ni")
    /// Image `nl`.
    static let nl = Rswift.ImageResource(bundle: R.hostingBundle, name: "nl")
    /// Image `no`.
    static let no = Rswift.ImageResource(bundle: R.hostingBundle, name: "no")
    /// Image `nodata`.
    static let nodata = Rswift.ImageResource(bundle: R.hostingBundle, name: "nodata")
    /// Image `notificationIcon`.
    static let notificationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationIcon")
    /// Image `np`.
    static let np = Rswift.ImageResource(bundle: R.hostingBundle, name: "np")
    /// Image `nr`.
    static let nr = Rswift.ImageResource(bundle: R.hostingBundle, name: "nr")
    /// Image `nu`.
    static let nu = Rswift.ImageResource(bundle: R.hostingBundle, name: "nu")
    /// Image `nz`.
    static let nz = Rswift.ImageResource(bundle: R.hostingBundle, name: "nz")
    /// Image `om`.
    static let om = Rswift.ImageResource(bundle: R.hostingBundle, name: "om")
    /// Image `online_order_food`.
    static let online_order_food = Rswift.ImageResource(bundle: R.hostingBundle, name: "online_order_food")
    /// Image `ordersSelected`.
    static let ordersSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordersSelected")
    /// Image `ordersUnselected`.
    static let ordersUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordersUnselected")
    /// Image `pa`.
    static let pa = Rswift.ImageResource(bundle: R.hostingBundle, name: "pa")
    /// Image `package_bg_green`.
    static let package_bg_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "package_bg_green")
    /// Image `package_bg_red`.
    static let package_bg_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "package_bg_red")
    /// Image `package_delivery`.
    static let package_delivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "package_delivery")
    /// Image `pe`.
    static let pe = Rswift.ImageResource(bundle: R.hostingBundle, name: "pe")
    /// Image `pf`.
    static let pf = Rswift.ImageResource(bundle: R.hostingBundle, name: "pf")
    /// Image `pg`.
    static let pg = Rswift.ImageResource(bundle: R.hostingBundle, name: "pg")
    /// Image `ph`.
    static let ph = Rswift.ImageResource(bundle: R.hostingBundle, name: "ph")
    /// Image `pickupWhite`.
    static let pickupWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "pickupWhite")
    /// Image `pickup`.
    static let pickup = Rswift.ImageResource(bundle: R.hostingBundle, name: "pickup")
    /// Image `pin-outline`.
    static let pinOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin-outline")
    /// Image `pk`.
    static let pk = Rswift.ImageResource(bundle: R.hostingBundle, name: "pk")
    /// Image `pl`.
    static let pl = Rswift.ImageResource(bundle: R.hostingBundle, name: "pl")
    /// Image `placeholderOld`.
    static let placeholderOld = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderOld")
    /// Image `placeholder_image1`.
    static let placeholder_image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image1")
    /// Image `placeholder_image2`.
    static let placeholder_image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image2")
    /// Image `placeholder_image4`.
    static let placeholder_image4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image4")
    /// Image `placeholder_image5`.
    static let placeholder_image5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image5")
    /// Image `placeholder_image6`.
    static let placeholder_image6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image6")
    /// Image `placeholder_imageOld`.
    static let placeholder_imageOld = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_imageOld")
    /// Image `placeholder_image`.
    static let placeholder_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image")
    /// Image `plusIcon`.
    static let plusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusIcon")
    /// Image `pm`.
    static let pm = Rswift.ImageResource(bundle: R.hostingBundle, name: "pm")
    /// Image `pn`.
    static let pn = Rswift.ImageResource(bundle: R.hostingBundle, name: "pn")
    /// Image `poneeex_logo`.
    static let poneeex_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "poneeex_logo")
    /// Image `pr`.
    static let pr = Rswift.ImageResource(bundle: R.hostingBundle, name: "pr")
    /// Image `previous`.
    static let previous = Rswift.ImageResource(bundle: R.hostingBundle, name: "previous")
    /// Image `privacy_policy`.
    static let privacy_policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy_policy")
    /// Image `profile_selected`.
    static let profile_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_selected")
    /// Image `promotionIcon`.
    static let promotionIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotionIcon")
    /// Image `ps`.
    static let ps = Rswift.ImageResource(bundle: R.hostingBundle, name: "ps")
    /// Image `pt`.
    static let pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "pt")
    /// Image `pw`.
    static let pw = Rswift.ImageResource(bundle: R.hostingBundle, name: "pw")
    /// Image `py`.
    static let py = Rswift.ImageResource(bundle: R.hostingBundle, name: "py")
    /// Image `qa`.
    static let qa = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa")
    /// Image `radioActiveBlue`.
    static let radioActiveBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "radioActiveBlue")
    /// Image `radioInactiveBlue`.
    static let radioInactiveBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "radioInactiveBlue")
    /// Image `radioOffBlack`.
    static let radioOffBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "radioOffBlack")
    /// Image `radioOnBlack`.
    static let radioOnBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "radioOnBlack")
    /// Image `radio_off`.
    static let radio_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_off")
    /// Image `radio_on`.
    static let radio_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_on")
    /// Image `re`.
    static let re = Rswift.ImageResource(bundle: R.hostingBundle, name: "re")
    /// Image `redPin`.
    static let redPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "redPin")
    /// Image `rentalBg`.
    static let rentalBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "rentalBg")
    /// Image `restaurantMenu`.
    static let restaurantMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurantMenu")
    /// Image `return`.
    static let `return` = Rswift.ImageResource(bundle: R.hostingBundle, name: "return")
    /// Image `ride_logo`.
    static let ride_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ride_logo")
    /// Image `ro`.
    static let ro = Rswift.ImageResource(bundle: R.hostingBundle, name: "ro")
    /// Image `rs`.
    static let rs = Rswift.ImageResource(bundle: R.hostingBundle, name: "rs")
    /// Image `ru`.
    static let ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "ru")
    /// Image `rw`.
    static let rw = Rswift.ImageResource(bundle: R.hostingBundle, name: "rw")
    /// Image `sa`.
    static let sa = Rswift.ImageResource(bundle: R.hostingBundle, name: "sa")
    /// Image `saudi`.
    static let saudi = Rswift.ImageResource(bundle: R.hostingBundle, name: "saudi")
    /// Image `sb`.
    static let sb = Rswift.ImageResource(bundle: R.hostingBundle, name: "sb")
    /// Image `sc`.
    static let sc = Rswift.ImageResource(bundle: R.hostingBundle, name: "sc")
    /// Image `school_rides`.
    static let school_rides = Rswift.ImageResource(bundle: R.hostingBundle, name: "school_rides")
    /// Image `sd`.
    static let sd = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd")
    /// Image `se`.
    static let se = Rswift.ImageResource(bundle: R.hostingBundle, name: "se")
    /// Image `search_food`.
    static let search_food = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_food")
    /// Image `search_service_homeservices`.
    static let search_service_homeservices = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_service_homeservices")
    /// Image `search_service_mp`.
    static let search_service_mp = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_service_mp")
    /// Image `search_white`.
    static let search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_white")
    /// Image `select_agent_homeservices`.
    static let select_agent_homeservices = Rswift.ImageResource(bundle: R.hostingBundle, name: "select_agent_homeservices")
    /// Image `select_agent_mp`.
    static let select_agent_mp = Rswift.ImageResource(bundle: R.hostingBundle, name: "select_agent_mp")
    /// Image `sg`.
    static let sg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg")
    /// Image `sh`.
    static let sh = Rswift.ImageResource(bundle: R.hostingBundle, name: "sh")
    /// Image `shadowOverlay`.
    static let shadowOverlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "shadowOverlay")
    /// Image `shareAppIcon`.
    static let shareAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareAppIcon")
    /// Image `si`.
    static let si = Rswift.ImageResource(bundle: R.hostingBundle, name: "si")
    /// Image `sign-up_bg`.
    static let signUp_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sign-up_bg")
    /// Image `signupBG`.
    static let signupBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "signupBG")
    /// Image `sj`.
    static let sj = Rswift.ImageResource(bundle: R.hostingBundle, name: "sj")
    /// Image `sk`.
    static let sk = Rswift.ImageResource(bundle: R.hostingBundle, name: "sk")
    /// Image `sl`.
    static let sl = Rswift.ImageResource(bundle: R.hostingBundle, name: "sl")
    /// Image `sm`.
    static let sm = Rswift.ImageResource(bundle: R.hostingBundle, name: "sm")
    /// Image `sn`.
    static let sn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sn")
    /// Image `so`.
    static let so = Rswift.ImageResource(bundle: R.hostingBundle, name: "so")
    /// Image `splash_blank`.
    static let splash_blank = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_blank")
    /// Image `splash_logo`.
    static let splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_logo")
    /// Image `splash_tianquiz`.
    static let splash_tianquiz = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_tianquiz")
    /// Image `sr`.
    static let sr = Rswift.ImageResource(bundle: R.hostingBundle, name: "sr")
    /// Image `ss`.
    static let ss = Rswift.ImageResource(bundle: R.hostingBundle, name: "ss")
    /// Image `st`.
    static let st = Rswift.ImageResource(bundle: R.hostingBundle, name: "st")
    /// Image `starRating`.
    static let starRating = Rswift.ImageResource(bundle: R.hostingBundle, name: "starRating")
    /// Image `sv`.
    static let sv = Rswift.ImageResource(bundle: R.hostingBundle, name: "sv")
    /// Image `sx`.
    static let sx = Rswift.ImageResource(bundle: R.hostingBundle, name: "sx")
    /// Image `sy`.
    static let sy = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy")
    /// Image `sz`.
    static let sz = Rswift.ImageResource(bundle: R.hostingBundle, name: "sz")
    /// Image `tab_cart`.
    static let tab_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_cart")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_more`.
    static let tab_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_more")
    /// Image `tab_orders`.
    static let tab_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_orders")
    /// Image `tc`.
    static let tc = Rswift.ImageResource(bundle: R.hostingBundle, name: "tc")
    /// Image `td`.
    static let td = Rswift.ImageResource(bundle: R.hostingBundle, name: "td")
    /// Image `termsAndConditions`.
    static let termsAndConditions = Rswift.ImageResource(bundle: R.hostingBundle, name: "termsAndConditions")
    /// Image `termsPoliciesIcon`.
    static let termsPoliciesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "termsPoliciesIcon")
    /// Image `tf`.
    static let tf = Rswift.ImageResource(bundle: R.hostingBundle, name: "tf")
    /// Image `tg`.
    static let tg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg")
    /// Image `th`.
    static let th = Rswift.ImageResource(bundle: R.hostingBundle, name: "th")
    /// Image `thena_splash`.
    static let thena_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "thena_splash")
    /// Image `tickOrange`.
    static let tickOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "tickOrange")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `tj`.
    static let tj = Rswift.ImageResource(bundle: R.hostingBundle, name: "tj")
    /// Image `tk`.
    static let tk = Rswift.ImageResource(bundle: R.hostingBundle, name: "tk")
    /// Image `tl`.
    static let tl = Rswift.ImageResource(bundle: R.hostingBundle, name: "tl")
    /// Image `tm`.
    static let tm = Rswift.ImageResource(bundle: R.hostingBundle, name: "tm")
    /// Image `tn`.
    static let tn = Rswift.ImageResource(bundle: R.hostingBundle, name: "tn")
    /// Image `to`.
    static let to = Rswift.ImageResource(bundle: R.hostingBundle, name: "to")
    /// Image `tonImg`.
    static let tonImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tonImg")
    /// Image `tr`.
    static let tr = Rswift.ImageResource(bundle: R.hostingBundle, name: "tr")
    /// Image `tt`.
    static let tt = Rswift.ImageResource(bundle: R.hostingBundle, name: "tt")
    /// Image `tv`.
    static let tv = Rswift.ImageResource(bundle: R.hostingBundle, name: "tv")
    /// Image `tw`.
    static let tw = Rswift.ImageResource(bundle: R.hostingBundle, name: "tw")
    /// Image `twitter (7)`.
    static let twitter7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter (7)")
    /// Image `tz`.
    static let tz = Rswift.ImageResource(bundle: R.hostingBundle, name: "tz")
    /// Image `ua`.
    static let ua = Rswift.ImageResource(bundle: R.hostingBundle, name: "ua")
    /// Image `ug`.
    static let ug = Rswift.ImageResource(bundle: R.hostingBundle, name: "ug")
    /// Image `um`.
    static let um = Rswift.ImageResource(bundle: R.hostingBundle, name: "um")
    /// Image `upload`.
    static let upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload")
    /// Image `us`.
    static let us = Rswift.ImageResource(bundle: R.hostingBundle, name: "us")
    /// Image `usa`.
    static let usa = Rswift.ImageResource(bundle: R.hostingBundle, name: "usa")
    /// Image `user_placeholder`.
    static let user_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_placeholder")
    /// Image `uy`.
    static let uy = Rswift.ImageResource(bundle: R.hostingBundle, name: "uy")
    /// Image `uz`.
    static let uz = Rswift.ImageResource(bundle: R.hostingBundle, name: "uz")
    /// Image `va`.
    static let va = Rswift.ImageResource(bundle: R.hostingBundle, name: "va")
    /// Image `vc`.
    static let vc = Rswift.ImageResource(bundle: R.hostingBundle, name: "vc")
    /// Image `ve`.
    static let ve = Rswift.ImageResource(bundle: R.hostingBundle, name: "ve")
    /// Image `vg`.
    static let vg = Rswift.ImageResource(bundle: R.hostingBundle, name: "vg")
    /// Image `vi`.
    static let vi = Rswift.ImageResource(bundle: R.hostingBundle, name: "vi")
    /// Image `vn`.
    static let vn = Rswift.ImageResource(bundle: R.hostingBundle, name: "vn")
    /// Image `vu`.
    static let vu = Rswift.ImageResource(bundle: R.hostingBundle, name: "vu")
    /// Image `walk_1`.
    static let walk_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walk_1")
    /// Image `walk_2`.
    static let walk_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walk_2")
    /// Image `walk_3`.
    static let walk_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walk_3")
    /// Image `walkthrough1`.
    static let walkthrough1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough1")
    /// Image `walkthrough_!`.
    static let walkthrough_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough_!")
    /// Image `wasselSplash`.
    static let wasselSplash = Rswift.ImageResource(bundle: R.hostingBundle, name: "wasselSplash")
    /// Image `wasselicon`.
    static let wasselicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wasselicon")
    /// Image `wf`.
    static let wf = Rswift.ImageResource(bundle: R.hostingBundle, name: "wf")
    /// Image `ws`.
    static let ws = Rswift.ImageResource(bundle: R.hostingBundle, name: "ws")
    /// Image `ye`.
    static let ye = Rswift.ImageResource(bundle: R.hostingBundle, name: "ye")
    /// Image `yt`.
    static let yt = Rswift.ImageResource(bundle: R.hostingBundle, name: "yt")
    /// Image `yummy_logo`.
    static let yummy_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "yummy_logo")
    /// Image `za`.
    static let za = Rswift.ImageResource(bundle: R.hostingBundle, name: "za")
    /// Image `zm`.
    static let zm = Rswift.ImageResource(bundle: R.hostingBundle, name: "zm")
    /// Image `zw`.
    static let zw = Rswift.ImageResource(bundle: R.hostingBundle, name: "zw")
    /// Image `zz`.
    static let zz = Rswift.ImageResource(bundle: R.hostingBundle, name: "zz")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: " ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Al-ain", bundle: ..., traitCollection: ...)`
    static func alAin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alAin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Altameeza_logo", bundle: ..., traitCollection: ...)`
    static func altameeza_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.altameeza_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_Constrution", bundle: ..., traitCollection: ...)`
    static func appLoginBG_Constrution(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_Constrution, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_ECom", bundle: ..., traitCollection: ...)`
    static func appLoginBG_ECom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_ECom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_Food", bundle: ..., traitCollection: ...)`
    static func appLoginBG_Food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_Food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_Gym", bundle: ..., traitCollection: ...)`
    static func appLoginBG_Gym(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_Gym, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_Home", bundle: ..., traitCollection: ...)`
    static func appLoginBG_Home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_Home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_JNJ", bundle: ..., traitCollection: ...)`
    static func appLoginBG_JNJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_JNJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLoginBG_Party", bundle: ..., traitCollection: ...)`
    static func appLoginBG_Party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLoginBG_Party, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLogoEssentials", bundle: ..., traitCollection: ...)`
    static func appLogoEssentials(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogoEssentials, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Aquafina", bundle: ..., traitCollection: ...)`
    static func aquafina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aquafina, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back_New", bundle: ..., traitCollection: ...)`
    static func back_New(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_New, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calender", bundle: ..., traitCollection: ...)`
    static func calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CallDriver", bundle: ..., traitCollection: ...)`
    static func callDriver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callDriver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CashOnDelivery", bundle: ..., traitCollection: ...)`
    static func cashOnDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashOnDelivery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Conekta logo-1", bundle: ..., traitCollection: ...)`
    static func conektaLogo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.conektaLogo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreditCard", bundle: ..., traitCollection: ...)`
    static func creditCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CurrentLocation", bundle: ..., traitCollection: ...)`
    static func currentLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DeliveryfySplash", bundle: ..., traitCollection: ...)`
    static func deliveryfySplash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliveryfySplash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DrinkingWater", bundle: ..., traitCollection: ...)`
    static func drinkingWater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drinkingWater, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DrinkingWaterActive", bundle: ..., traitCollection: ...)`
    static func drinkingWaterActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drinkingWaterActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DropIcon", bundle: ..., traitCollection: ...)`
    static func dropIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DropMarker", bundle: ..., traitCollection: ...)`
    static func dropMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropMarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EmptyDescription", bundle: ..., traitCollection: ...)`
    static func emptyDescription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyDescription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Freight", bundle: ..., traitCollection: ...)`
    static func freight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.freight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FreightActive", bundle: ..., traitCollection: ...)`
    static func freightActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.freightActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Gas", bundle: ..., traitCollection: ...)`
    static func gas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gas, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GasActive", bundle: ..., traitCollection: ...)`
    static func gasActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gasActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeavyMachine", bundle: ..., traitCollection: ...)`
    static func heavyMachine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heavyMachine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeavyMachineActive", bundle: ..., traitCollection: ...)`
    static func heavyMachineActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heavyMachineActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeScreen_JNJ", bundle: ..., traitCollection: ...)`
    static func homeScreen_JNJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeScreen_JNJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MapChange", bundle: ..., traitCollection: ...)`
    static func mapChange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapChange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Musafi", bundle: ..., traitCollection: ...)`
    static func musafi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.musafi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NextMaterial", bundle: ..., traitCollection: ...)`
    static func nextMaterial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextMaterial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Oasis", bundle: ..., traitCollection: ...)`
    static func oasis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oasis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OrangeArrowIcon", bundle: ..., traitCollection: ...)`
    static func orangeArrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangeArrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PickUpIcon", bundle: ..., traitCollection: ...)`
    static func pickUpIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickUpIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PickUpMarker", bundle: ..., traitCollection: ...)`
    static func pickUpMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickUpMarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PromoCode", bundle: ..., traitCollection: ...)`
    static func promoCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RoyoLogo", bundle: ..., traitCollection: ...)`
    static func royoLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.royoLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashBletani", bundle: ..., traitCollection: ...)`
    static func splashBletani(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashBletani, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splashelconcierge", bundle: ..., traitCollection: ...)`
    static func splashelconcierge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashelconcierge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarEmptyLarge", bundle: ..., traitCollection: ...)`
    static func starEmptyLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starEmptyLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarEmptySmall", bundle: ..., traitCollection: ...)`
    static func starEmptySmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starEmptySmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarFullLarge", bundle: ..., traitCollection: ...)`
    static func starFullLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starFullLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarFullSmall", bundle: ..., traitCollection: ...)`
    static func starFullSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starFullSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarHalfLarge", bundle: ..., traitCollection: ...)`
    static func starHalfLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starHalfLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarHalfSmall", bundle: ..., traitCollection: ...)`
    static func starHalfSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starHalfSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_grey", bundle: ..., traitCollection: ...)`
    static func star_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_yellow", bundle: ..., traitCollection: ...)`
    static func star_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Support", bundle: ..., traitCollection: ...)`
    static func support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TowTruck", bundle: ..., traitCollection: ...)`
    static func towTruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.towTruck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TowTruckActive", bundle: ..., traitCollection: ...)`
    static func towTruckActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.towTruckActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UAE", bundle: ..., traitCollection: ...)`
    static func uaE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uaE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WT1", bundle: ..., traitCollection: ...)`
    static func wt1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wt1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WaterTanker", bundle: ..., traitCollection: ...)`
    static func waterTanker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waterTanker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WaterTankerActive", bundle: ..., traitCollection: ...)`
    static func waterTankerActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waterTankerActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutUs", bundle: ..., traitCollection: ...)`
    static func aboutUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad", bundle: ..., traitCollection: ...)`
    static func ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_location", bundle: ..., traitCollection: ...)`
    static func add_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "advertisment_1", bundle: ..., traitCollection: ...)`
    static func advertisment_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.advertisment_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "advertisment_2", bundle: ..., traitCollection: ...)`
    static func advertisment_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.advertisment_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ae", bundle: ..., traitCollection: ...)`
    static func ae(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ae, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "af", bundle: ..., traitCollection: ...)`
    static func af(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.af, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ag", bundle: ..., traitCollection: ...)`
    static func ag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ai", bundle: ..., traitCollection: ...)`
    static func ai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "al", bundle: ..., traitCollection: ...)`
    static func al(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.al, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "am", bundle: ..., traitCollection: ...)`
    static func am(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.am, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ambu_marker", bundle: ..., traitCollection: ...)`
    static func ambu_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ambu_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ambulance", bundle: ..., traitCollection: ...)`
    static func ambulance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ambulance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ambulanceNormal", bundle: ..., traitCollection: ...)`
    static func ambulanceNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ambulanceNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ambulanceOutline", bundle: ..., traitCollection: ...)`
    static func ambulanceOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ambulanceOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ambulance_v2", bundle: ..., traitCollection: ...)`
    static func ambulance_v2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ambulance_v2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ao", bundle: ..., traitCollection: ...)`
    static func ao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aq", bundle: ..., traitCollection: ...)`
    static func aq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ar", bundle: ..., traitCollection: ...)`
    static func ar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
    static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_left", bundle: ..., traitCollection: ...)`
    static func arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right", bundle: ..., traitCollection: ...)`
    static func arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "as", bundle: ..., traitCollection: ...)`
    static func `as`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`as`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "at", bundle: ..., traitCollection: ...)`
    static func at(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.at, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "au", bundle: ..., traitCollection: ...)`
    static func au(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.au, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "automaticIcon", bundle: ..., traitCollection: ...)`
    static func automaticIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.automaticIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aw", bundle: ..., traitCollection: ...)`
    static func aw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ax", bundle: ..., traitCollection: ...)`
    static func ax(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ax, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "az", bundle: ..., traitCollection: ...)`
    static func az(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.az, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ba", bundle: ..., traitCollection: ...)`
    static func ba(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ba, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backNew", bundle: ..., traitCollection: ...)`
    static func backNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backNew_white", bundle: ..., traitCollection: ...)`
    static func backNew_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNew_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_home", bundle: ..., traitCollection: ...)`
    static func back_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badge_sponsor", bundle: ..., traitCollection: ...)`
    static func badge_sponsor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badge_sponsor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bagdeliveryicon", bundle: ..., traitCollection: ...)`
    static func bagdeliveryicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bagdeliveryicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner1", bundle: ..., traitCollection: ...)`
    static func banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner2", bundle: ..., traitCollection: ...)`
    static func banner2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner3", bundle: ..., traitCollection: ...)`
    static func banner3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_bg", bundle: ..., traitCollection: ...)`
    static func banner_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bb", bundle: ..., traitCollection: ...)`
    static func bb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bd", bundle: ..., traitCollection: ...)`
    static func bd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "be", bundle: ..., traitCollection: ...)`
    static func be(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.be, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bf", bundle: ..., traitCollection: ...)`
    static func bf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg", bundle: ..., traitCollection: ...)`
    static func bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_1", bundle: ..., traitCollection: ...)`
    static func bg_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_2", bundle: ..., traitCollection: ...)`
    static func bg_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_services", bundle: ..., traitCollection: ...)`
    static func bg_services(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_services, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_splash", bundle: ..., traitCollection: ...)`
    static func bg_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_splash_ii", bundle: ..., traitCollection: ...)`
    static func bg_splash_ii(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_splash_ii, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bh", bundle: ..., traitCollection: ...)`
    static func bh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bi", bundle: ..., traitCollection: ...)`
    static func bi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "biplifelogo", bundle: ..., traitCollection: ...)`
    static func biplifelogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.biplifelogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bj", bundle: ..., traitCollection: ...)`
    static func bj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bl", bundle: ..., traitCollection: ...)`
    static func bl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bluePin", bundle: ..., traitCollection: ...)`
    static func bluePin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluePin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bm", bundle: ..., traitCollection: ...)`
    static func bm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bn", bundle: ..., traitCollection: ...)`
    static func bn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bo", bundle: ..., traitCollection: ...)`
    static func bo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "book_a_taxi", bundle: ..., traitCollection: ...)`
    static func book_a_taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book_a_taxi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bq", bundle: ..., traitCollection: ...)`
    static func bq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "br", bundle: ..., traitCollection: ...)`
    static func br(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.br, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brownstonelogo", bundle: ..., traitCollection: ...)`
    static func brownstonelogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brownstonelogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bs", bundle: ..., traitCollection: ...)`
    static func bs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bt", bundle: ..., traitCollection: ...)`
    static func bt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bv", bundle: ..., traitCollection: ...)`
    static func bv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bw", bundle: ..., traitCollection: ...)`
    static func bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "by", bundle: ..., traitCollection: ...)`
    static func by(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.by, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bz", bundle: ..., traitCollection: ...)`
    static func bz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "c_institutional", bundle: ..., traitCollection: ...)`
    static func c_institutional(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c_institutional, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ca", bundle: ..., traitCollection: ...)`
    static func ca(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ca, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cab", bundle: ..., traitCollection: ...)`
    static func cab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cab_v2", bundle: ..., traitCollection: ...)`
    static func cab_v2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cab_v2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cab_v3", bundle: ..., traitCollection: ...)`
    static func cab_v3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cab_v3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calenderIcon", bundle: ..., traitCollection: ...)`
    static func calenderIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calenderIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartSelected", bundle: ..., traitCollection: ...)`
    static func cartSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartUnselected", bundle: ..., traitCollection: ...)`
    static func cartUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_selected", bundle: ..., traitCollection: ...)`
    static func cart_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "categories", bundle: ..., traitCollection: ...)`
    static func categories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categories, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "categries_selected", bundle: ..., traitCollection: ...)`
    static func categries_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categries_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc", bundle: ..., traitCollection: ...)`
    static func cc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cd", bundle: ..., traitCollection: ...)`
    static func cd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf", bundle: ..., traitCollection: ...)`
    static func cf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cg", bundle: ..., traitCollection: ...)`
    static func cg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ch", bundle: ..., traitCollection: ...)`
    static func ch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ci", bundle: ..., traitCollection: ...)`
    static func ci(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ci, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ck", bundle: ..., traitCollection: ...)`
    static func ck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cl", bundle: ..., traitCollection: ...)`
    static func cl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clockBlue", bundle: ..., traitCollection: ...)`
    static func clockBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cm", bundle: ..., traitCollection: ...)`
    static func cm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cn", bundle: ..., traitCollection: ...)`
    static func cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "co", bundle: ..., traitCollection: ...)`
    static func co(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.co, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "count_cart", bundle: ..., traitCollection: ...)`
    static func count_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.count_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cr", bundle: ..., traitCollection: ...)`
    static func cr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cu", bundle: ..., traitCollection: ...)`
    static func cu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "currentLocationIcon", bundle: ..., traitCollection: ...)`
    static func currentLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocationIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cv", bundle: ..., traitCollection: ...)`
    static func cv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cw", bundle: ..., traitCollection: ...)`
    static func cw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cx", bundle: ..., traitCollection: ...)`
    static func cx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cy", bundle: ..., traitCollection: ...)`
    static func cy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cz", bundle: ..., traitCollection: ...)`
    static func cz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "de", bundle: ..., traitCollection: ...)`
    static func de(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.de, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deliveryWhite", bundle: ..., traitCollection: ...)`
    static func deliveryWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliveryWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery_food", bundle: ..., traitCollection: ...)`
    static func delivery_food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delivery_food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery_v2", bundle: ..., traitCollection: ...)`
    static func delivery_v2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delivery_v2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery_v3", bundle: ..., traitCollection: ...)`
    static func delivery_v3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delivery_v3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount", bundle: ..., traitCollection: ...)`
    static func discount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discover_ecommerce", bundle: ..., traitCollection: ...)`
    static func discover_ecommerce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discover_ecommerce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discover_party", bundle: ..., traitCollection: ...)`
    static func discover_party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discover_party, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dj", bundle: ..., traitCollection: ...)`
    static func dj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dk", bundle: ..., traitCollection: ...)`
    static func dk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dm", bundle: ..., traitCollection: ...)`
    static func dm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "do", bundle: ..., traitCollection: ...)`
    static func `do`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`do`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doorIcon", bundle: ..., traitCollection: ...)`
    static func doorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dotPurple", bundle: ..., traitCollection: ...)`
    static func dotPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downArrowIcon", bundle: ..., traitCollection: ...)`
    static func downArrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dz", bundle: ..., traitCollection: ...)`
    static func dz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ec", bundle: ..., traitCollection: ...)`
    static func ec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ee", bundle: ..., traitCollection: ...)`
    static func ee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eg", bundle: ..., traitCollection: ...)`
    static func eg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eh", bundle: ..., traitCollection: ...)`
    static func eh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "engineIcon", bundle: ..., traitCollection: ...)`
    static func engineIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.engineIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "enjoy_service_homeservices", bundle: ..., traitCollection: ...)`
    static func enjoy_service_homeservices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enjoy_service_homeservices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "enjoy_service_mp", bundle: ..., traitCollection: ...)`
    static func enjoy_service_mp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enjoy_service_mp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "enjoy_shopping_ecommerce", bundle: ..., traitCollection: ...)`
    static func enjoy_shopping_ecommerce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enjoy_shopping_ecommerce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "enjoy_shopping_party", bundle: ..., traitCollection: ...)`
    static func enjoy_shopping_party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enjoy_shopping_party, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "er", bundle: ..., traitCollection: ...)`
    static func er(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.er, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "es", bundle: ..., traitCollection: ...)`
    static func es(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.es, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "et", bundle: ..., traitCollection: ...)`
    static func et(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.et, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fab", bundle: ..., traitCollection: ...)`
    static func fab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-logo (7)", bundle: ..., traitCollection: ...)`
    static func facebookLogo7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogo7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "failure", bundle: ..., traitCollection: ...)`
    static func failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favActive", bundle: ..., traitCollection: ...)`
    static func favActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favInactive", bundle: ..., traitCollection: ...)`
    static func favInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favInactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favouriteSelected", bundle: ..., traitCollection: ...)`
    static func favouriteSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favouriteSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favouriteUnselected", bundle: ..., traitCollection: ...)`
    static func favouriteUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favouriteUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favouritesIcon", bundle: ..., traitCollection: ...)`
    static func favouritesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favouritesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fi", bundle: ..., traitCollection: ...)`
    static func fi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filterDark", bundle: ..., traitCollection: ...)`
    static func filterDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fj", bundle: ..., traitCollection: ...)`
    static func fj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fk", bundle: ..., traitCollection: ...)`
    static func fk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_ead", bundle: ..., traitCollection: ...)`
    static func flag_ead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_ead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_us", bundle: ..., traitCollection: ...)`
    static func flag_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fm", bundle: ..., traitCollection: ...)`
    static func fm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fo", bundle: ..., traitCollection: ...)`
    static func fo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodPickUpB1", bundle: ..., traitCollection: ...)`
    static func foodPickUpB1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodPickUpB1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodPickUpB2", bundle: ..., traitCollection: ...)`
    static func foodPickUpB2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodPickUpB2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodPickUpB3", bundle: ..., traitCollection: ...)`
    static func foodPickUpB3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodPickUpB3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr", bundle: ..., traitCollection: ...)`
    static func fr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ga", bundle: ..., traitCollection: ...)`
    static func ga(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ga, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gb", bundle: ..., traitCollection: ...)`
    static func gb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gd", bundle: ..., traitCollection: ...)`
    static func gd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ge", bundle: ..., traitCollection: ...)`
    static func ge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gf", bundle: ..., traitCollection: ...)`
    static func gf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gg", bundle: ..., traitCollection: ...)`
    static func gg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gh", bundle: ..., traitCollection: ...)`
    static func gh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gi", bundle: ..., traitCollection: ...)`
    static func gi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gl", bundle: ..., traitCollection: ...)`
    static func gl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "globe", bundle: ..., traitCollection: ...)`
    static func globe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.globe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gm", bundle: ..., traitCollection: ...)`
    static func gm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gn", bundle: ..., traitCollection: ...)`
    static func gn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gp", bundle: ..., traitCollection: ...)`
    static func gp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gq", bundle: ..., traitCollection: ...)`
    static func gq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gr", bundle: ..., traitCollection: ...)`
    static func gr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gs", bundle: ..., traitCollection: ...)`
    static func gs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gt", bundle: ..., traitCollection: ...)`
    static func gt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gu", bundle: ..., traitCollection: ...)`
    static func gu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gw", bundle: ..., traitCollection: ...)`
    static func gw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gy", bundle: ..., traitCollection: ...)`
    static func gy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartSelected", bundle: ..., traitCollection: ...)`
    static func heartSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartUnselected", bundle: ..., traitCollection: ...)`
    static func heartUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpIcon", bundle: ..., traitCollection: ...)`
    static func helpIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hk", bundle: ..., traitCollection: ...)`
    static func hk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hm", bundle: ..., traitCollection: ...)`
    static func hm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hn", bundle: ..., traitCollection: ...)`
    static func hn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeSelected", bundle: ..., traitCollection: ...)`
    static func homeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeUnselected", bundle: ..., traitCollection: ...)`
    static func homeUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_selected", bundle: ..., traitCollection: ...)`
    static func home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homerservices_bg", bundle: ..., traitCollection: ...)`
    static func homerservices_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homerservices_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hr", bundle: ..., traitCollection: ...)`
    static func hr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ht", bundle: ..., traitCollection: ...)`
    static func ht(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ht, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hu", bundle: ..., traitCollection: ...)`
    static func hu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_1", bundle: ..., traitCollection: ...)`
    static func ic_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_1off", bundle: ..., traitCollection: ...)`
    static func ic_1off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_1off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_1s", bundle: ..., traitCollection: ...)`
    static func ic_1s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_1s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_2", bundle: ..., traitCollection: ...)`
    static func ic_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_2off", bundle: ..., traitCollection: ...)`
    static func ic_2off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_2s", bundle: ..., traitCollection: ...)`
    static func ic_2s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_3", bundle: ..., traitCollection: ...)`
    static func ic_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_3off", bundle: ..., traitCollection: ...)`
    static func ic_3off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_3s", bundle: ..., traitCollection: ...)`
    static func ic_3s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_4", bundle: ..., traitCollection: ...)`
    static func ic_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_4off", bundle: ..., traitCollection: ...)`
    static func ic_4off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_4off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_4s", bundle: ..., traitCollection: ...)`
    static func ic_4s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_4s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_5", bundle: ..., traitCollection: ...)`
    static func ic_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_5off", bundle: ..., traitCollection: ...)`
    static func ic_5off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_5off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_5s", bundle: ..., traitCollection: ...)`
    static func ic_5s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_5s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ChatBot", bundle: ..., traitCollection: ...)`
    static func ic_ChatBot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ChatBot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_UK_flag", bundle: ..., traitCollection: ...)`
    static func ic_UK_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_UK_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_about_Us", bundle: ..., traitCollection: ...)`
    static func ic_about_Us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_about_Us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_active_dot", bundle: ..., traitCollection: ...)`
    static func ic_active_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_active_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_Icon", bundle: ..., traitCollection: ...)`
    static func ic_add_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_bg", bundle: ..., traitCollection: ...)`
    static func ic_add_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_bg-g", bundle: ..., traitCollection: ...)`
    static func ic_add_bgG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_bgG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_dp", bundle: ..., traitCollection: ...)`
    static func ic_add_dp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_dp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_new_Icon", bundle: ..., traitCollection: ...)`
    static func ic_add_new_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_new_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_address", bundle: ..., traitCollection: ...)`
    static func ic_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_apple", bundle: ..., traitCollection: ...)`
    static func ic_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_forward", bundle: ..., traitCollection: ...)`
    static func ic_arrow_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_round", bundle: ..., traitCollection: ...)`
    static func ic_arrow_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_round, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_arrow_black", bundle: ..., traitCollection: ...)`
    static func ic_back_arrow_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_arrow_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_arrow_white", bundle: ..., traitCollection: ...)`
    static func ic_back_arrow_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_arrow_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_map", bundle: ..., traitCollection: ...)`
    static func ic_back_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_white", bundle: ..., traitCollection: ...)`
    static func ic_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_white-1", bundle: ..., traitCollection: ...)`
    static func ic_back_white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_big", bundle: ..., traitCollection: ...)`
    static func ic_badge_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_bronze_big", bundle: ..., traitCollection: ...)`
    static func ic_badge_bronze_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_bronze_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_bronze_small", bundle: ..., traitCollection: ...)`
    static func ic_badge_bronze_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_bronze_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_gold_big", bundle: ..., traitCollection: ...)`
    static func ic_badge_gold_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_gold_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_gold_small", bundle: ..., traitCollection: ...)`
    static func ic_badge_gold_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_gold_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_mini_bronze", bundle: ..., traitCollection: ...)`
    static func ic_badge_mini_bronze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_mini_bronze, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_mini_gold", bundle: ..., traitCollection: ...)`
    static func ic_badge_mini_gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_mini_gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_mini_plat", bundle: ..., traitCollection: ...)`
    static func ic_badge_mini_plat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_mini_plat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_mini_silver", bundle: ..., traitCollection: ...)`
    static func ic_badge_mini_silver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_mini_silver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_silver_big", bundle: ..., traitCollection: ...)`
    static func ic_badge_silver_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_silver_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_silver_small", bundle: ..., traitCollection: ...)`
    static func ic_badge_silver_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_silver_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_badge_small", bundle: ..., traitCollection: ...)`
    static func ic_badge_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_badge_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_barcode_scan", bundle: ..., traitCollection: ...)`
    static func ic_barcode_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_barcode_scan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_barcode_white", bundle: ..., traitCollection: ...)`
    static func ic_barcode_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_barcode_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bg", bundle: ..., traitCollection: ...)`
    static func ic_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bike_active", bundle: ..., traitCollection: ...)`
    static func ic_bike_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bike_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bike_inactive", bundle: ..., traitCollection: ...)`
    static func ic_bike_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bike_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_book_by_call", bundle: ..., traitCollection: ...)`
    static func ic_book_by_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_book_by_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_book_taxi", bundle: ..., traitCollection: ...)`
    static func ic_book_taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_book_taxi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bot_send", bundle: ..., traitCollection: ...)`
    static func ic_bot_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bot_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_breackdown", bundle: ..., traitCollection: ...)`
    static func ic_breackdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_breackdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calender_circle", bundle: ..., traitCollection: ...)`
    static func ic_calender_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_call", bundle: ..., traitCollection: ...)`
    static func ic_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_call-1", bundle: ..., traitCollection: ...)`
    static func ic_call1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_call_admin", bundle: ..., traitCollection: ...)`
    static func ic_call_admin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call_admin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_call_driver", bundle: ..., traitCollection: ...)`
    static func ic_call_driver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call_driver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cancel_red", bundle: ..., traitCollection: ...)`
    static func ic_cancel_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cancel_ride_big", bundle: ..., traitCollection: ...)`
    static func ic_cancel_ride_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel_ride_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_0", bundle: ..., traitCollection: ...)`
    static func ic_car_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_1", bundle: ..., traitCollection: ...)`
    static func ic_car_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_active", bundle: ..., traitCollection: ...)`
    static func ic_car_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_inactive", bundle: ..., traitCollection: ...)`
    static func ic_car_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_white", bundle: ..., traitCollection: ...)`
    static func ic_car_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card", bundle: ..., traitCollection: ...)`
    static func ic_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_active", bundle: ..., traitCollection: ...)`
    static func ic_card_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_inactive", bundle: ..., traitCollection: ...)`
    static func ic_card_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart", bundle: ..., traitCollection: ...)`
    static func ic_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_minus_normal", bundle: ..., traitCollection: ...)`
    static func ic_cart_minus_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_minus_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_minus_pressed", bundle: ..., traitCollection: ...)`
    static func ic_cart_minus_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_minus_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_plus_normal", bundle: ..., traitCollection: ...)`
    static func ic_cart_plus_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_plus_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_plus_pressed", bundle: ..., traitCollection: ...)`
    static func ic_cart_plus_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_plus_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_red", bundle: ..., traitCollection: ...)`
    static func ic_cart_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_white", bundle: ..., traitCollection: ...)`
    static func ic_cart_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_white-1", bundle: ..., traitCollection: ...)`
    static func ic_cart_white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_white-2", bundle: ..., traitCollection: ...)`
    static func ic_cart_white2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_white2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash", bundle: ..., traitCollection: ...)`
    static func ic_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash_active", bundle: ..., traitCollection: ...)`
    static func ic_cash_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash_inactive", bundle: ..., traitCollection: ...)`
    static func ic_cash_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_categories", bundle: ..., traitCollection: ...)`
    static func ic_categories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_categories, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_categories_unactive", bundle: ..., traitCollection: ...)`
    static func ic_categories_unactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_categories_unactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat", bundle: ..., traitCollection: ...)`
    static func ic_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_normal", bundle: ..., traitCollection: ...)`
    static func ic_check_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_off", bundle: ..., traitCollection: ...)`
    static func ic_check_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_on", bundle: ..., traitCollection: ...)`
    static func ic_check_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_pressed", bundle: ..., traitCollection: ...)`
    static func ic_check_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox", bundle: ..., traitCollection: ...)`
    static func ic_checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_active", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_checked", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_checked-1", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_checked1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_checked1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_inactive", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_compare", bundle: ..., traitCollection: ...)`
    static func ic_compare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_compare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coupon", bundle: ..., traitCollection: ...)`
    static func ic_coupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coupon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cross-g", bundle: ..., traitCollection: ...)`
    static func ic_crossG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_crossG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cross_s", bundle: ..., traitCollection: ...)`
    static func ic_cross_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cross_white", bundle: ..., traitCollection: ...)`
    static func ic_cross_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dd_black", bundle: ..., traitCollection: ...)`
    static func ic_dd_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dd_down", bundle: ..., traitCollection: ...)`
    static func ic_dd_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dd_green", bundle: ..., traitCollection: ...)`
    static func ic_dd_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dd_up", bundle: ..., traitCollection: ...)`
    static func ic_dd_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_default_address", bundle: ..., traitCollection: ...)`
    static func ic_default_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_default_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delivery@3x", bundle: ..., traitCollection: ...)`
    static func ic_delivery3x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delivery3x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_discount", bundle: ..., traitCollection: ...)`
    static func ic_discount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_discountFood", bundle: ..., traitCollection: ...)`
    static func ic_discountFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discountFood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_down", bundle: ..., traitCollection: ...)`
    static func ic_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drawr", bundle: ..., traitCollection: ...)`
    static func ic_drawr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drawr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_down_black", bundle: ..., traitCollection: ...)`
    static func ic_drop_down_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_down_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_location", bundle: ..., traitCollection: ...)`
    static func ic_drop_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_text_area", bundle: ..., traitCollection: ...)`
    static func ic_drop_text_area(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_text_area, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dropdown_arrow", bundle: ..., traitCollection: ...)`
    static func ic_dropdown_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropdown_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dropoff_dot", bundle: ..., traitCollection: ...)`
    static func ic_dropoff_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropoff_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dummy_user", bundle: ..., traitCollection: ...)`
    static func ic_dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_us", bundle: ..., traitCollection: ...)`
    static func ic_email_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_enter_otp", bundle: ..., traitCollection: ...)`
    static func ic_enter_otp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_enter_otp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_enter_phone", bundle: ..., traitCollection: ...)`
    static func ic_enter_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_enter_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_facebbok", bundle: ..., traitCollection: ...)`
    static func ic_facebbok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebbok, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_facebook", bundle: ..., traitCollection: ...)`
    static func ic_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_white_normal", bundle: ..., traitCollection: ...)`
    static func ic_favorite_white_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_white_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_white_normal-1", bundle: ..., traitCollection: ...)`
    static func ic_favorite_white_normal1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_white_normal1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_white_pressed", bundle: ..., traitCollection: ...)`
    static func ic_favorite_white_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_white_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fb", bundle: ..., traitCollection: ...)`
    static func ic_fb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_filter", bundle: ..., traitCollection: ...)`
    static func ic_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_flag", bundle: ..., traitCollection: ...)`
    static func ic_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_gps", bundle: ..., traitCollection: ...)`
    static func ic_gps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_grid_view", bundle: ..., traitCollection: ...)`
    static func ic_grid_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grid_view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_grocery_delivery_charges", bundle: ..., traitCollection: ...)`
    static func ic_grocery_delivery_charges(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grocery_delivery_charges, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_grocery_delivery_charges-1", bundle: ..., traitCollection: ...)`
    static func ic_grocery_delivery_charges1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grocery_delivery_charges1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_grocery_deliverytime", bundle: ..., traitCollection: ...)`
    static func ic_grocery_deliverytime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grocery_deliverytime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_half_way_stop", bundle: ..., traitCollection: ...)`
    static func ic_half_way_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_half_way_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heavy_machinery_m", bundle: ..., traitCollection: ...)`
    static func ic_heavy_machinery_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heavy_machinery_m, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_hm_service_charges", bundle: ..., traitCollection: ...)`
    static func ic_hm_service_charges(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hm_service_charges, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_hm_service_time", bundle: ..., traitCollection: ...)`
    static func ic_hm_service_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hm_service_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_illus_1", bundle: ..., traitCollection: ...)`
    static func ic_illus_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_illus_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_illus_2", bundle: ..., traitCollection: ...)`
    static func ic_illus_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_illus_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_illus_3", bundle: ..., traitCollection: ...)`
    static func ic_illus_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_illus_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_inactive_dot", bundle: ..., traitCollection: ...)`
    static func ic_inactive_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_inactive_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_info", bundle: ..., traitCollection: ...)`
    static func ic_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_instagram", bundle: ..., traitCollection: ...)`
    static func ic_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_instagram-1", bundle: ..., traitCollection: ...)`
    static func ic_instagram1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_instagram-2", bundle: ..., traitCollection: ...)`
    static func ic_instagram2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_language", bundle: ..., traitCollection: ...)`
    static func ic_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_list_view", bundle: ..., traitCollection: ...)`
    static func ic_list_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_liveTracking", bundle: ..., traitCollection: ...)`
    static func ic_liveTracking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_liveTracking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_loc", bundle: ..., traitCollection: ...)`
    static func ic_loc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_loc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location", bundle: ..., traitCollection: ...)`
    static func ic_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_blue", bundle: ..., traitCollection: ...)`
    static func ic_location_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_done", bundle: ..., traitCollection: ...)`
    static func ic_location_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_grey", bundle: ..., traitCollection: ...)`
    static func ic_location_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_pin", bundle: ..., traitCollection: ...)`
    static func ic_location_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login", bundle: ..., traitCollection: ...)`
    static func ic_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lp", bundle: ..., traitCollection: ...)`
    static func ic_lp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lp_medal", bundle: ..., traitCollection: ...)`
    static func ic_lp_medal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lp_medal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mail_us", bundle: ..., traitCollection: ...)`
    static func ic_mail_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mail_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_map_car", bundle: ..., traitCollection: ...)`
    static func ic_map_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_map_pin", bundle: ..., traitCollection: ...)`
    static func ic_map_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_master_card", bundle: ..., traitCollection: ...)`
    static func ic_master_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_master_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu-1", bundle: ..., traitCollection: ...)`
    static func ic_menu1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu_white", bundle: ..., traitCollection: ...)`
    static func ic_menu_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu_white-1", bundle: ..., traitCollection: ...)`
    static func ic_menu_white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu_white-2", bundle: ..., traitCollection: ...)`
    static func ic_menu_white2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_white2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_micro_active", bundle: ..., traitCollection: ...)`
    static func ic_micro_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_micro_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_micro_inactive", bundle: ..., traitCollection: ...)`
    static func ic_micro_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_micro_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_min_amount", bundle: ..., traitCollection: ...)`
    static func ic_min_amount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_min_amount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mini_cab_m", bundle: ..., traitCollection: ...)`
    static func ic_mini_cab_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mini_cab_m, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mini_truck_m_gas", bundle: ..., traitCollection: ...)`
    static func ic_mini_truck_m_gas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mini_truck_m_gas, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mini_truck_m_tow", bundle: ..., traitCollection: ...)`
    static func ic_mini_truck_m_tow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mini_truck_m_tow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mini_truck_water_m", bundle: ..., traitCollection: ...)`
    static func ic_mini_truck_water_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mini_truck_water_m, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_minus", bundle: ..., traitCollection: ...)`
    static func ic_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_my_order", bundle: ..., traitCollection: ...)`
    static func ic_my_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_nav", bundle: ..., traitCollection: ...)`
    static func ic_nav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_nearby", bundle: ..., traitCollection: ...)`
    static func ic_nearby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nearby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_new", bundle: ..., traitCollection: ...)`
    static func ic_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_new_Work", bundle: ..., traitCollection: ...)`
    static func ic_new_Work(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new_Work, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_nodata", bundle: ..., traitCollection: ...)`
    static func ic_nodata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nodata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification", bundle: ..., traitCollection: ...)`
    static func ic_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_np", bundle: ..., traitCollection: ...)`
    static func ic_np(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_np, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_office", bundle: ..., traitCollection: ...)`
    static func ic_office(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_office, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_oilchange", bundle: ..., traitCollection: ...)`
    static func ic_oilchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_oilchange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_orders_done", bundle: ..., traitCollection: ...)`
    static func ic_orders_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_orders_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_packages", bundle: ..., traitCollection: ...)`
    static func ic_packages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_packages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_packages-1", bundle: ..., traitCollection: ...)`
    static func ic_packages1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_packages1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_payment_card", bundle: ..., traitCollection: ...)`
    static func ic_payment_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_payment_cash", bundle: ..., traitCollection: ...)`
    static func ic_payment_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment_cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_payment_methods", bundle: ..., traitCollection: ...)`
    static func ic_payment_methods(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment_methods, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pick_location", bundle: ..., traitCollection: ...)`
    static func ic_pick_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pick_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_picked@3x", bundle: ..., traitCollection: ...)`
    static func ic_picked3x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_picked3x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pickup_2", bundle: ..., traitCollection: ...)`
    static func ic_pickup_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pickup_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pickup_dot", bundle: ..., traitCollection: ...)`
    static func ic_pickup_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pickup_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_place", bundle: ..., traitCollection: ...)`
    static func ic_place(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_place, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_popular", bundle: ..., traitCollection: ...)`
    static func ic_popular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_popular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_promo_code", bundle: ..., traitCollection: ...)`
    static func ic_promo_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promo_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_question", bundle: ..., traitCollection: ...)`
    static func ic_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_question, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_checked", bundle: ..., traitCollection: ...)`
    static func ic_radio_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_icon", bundle: ..., traitCollection: ...)`
    static func ic_radio_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_off", bundle: ..., traitCollection: ...)`
    static func ic_radio_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_on", bundle: ..., traitCollection: ...)`
    static func ic_radio_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recent_locations", bundle: ..., traitCollection: ...)`
    static func ic_recent_locations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recent_locations, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recent_locations_home", bundle: ..., traitCollection: ...)`
    static func ic_recent_locations_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recent_locations_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recent_locations_loc", bundle: ..., traitCollection: ...)`
    static func ic_recent_locations_loc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recent_locations_loc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recent_locations_loc-1", bundle: ..., traitCollection: ...)`
    static func ic_recent_locations_loc1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recent_locations_loc1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recomendedFood", bundle: ..., traitCollection: ...)`
    static func ic_recomendedFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recomendedFood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recommend", bundle: ..., traitCollection: ...)`
    static func ic_recommend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recommend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refer", bundle: ..., traitCollection: ...)`
    static func ic_refer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_referal_menu", bundle: ..., traitCollection: ...)`
    static func ic_referal_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_referal_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remember_me_selected", bundle: ..., traitCollection: ...)`
    static func ic_remember_me_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remember_me_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rememberme", bundle: ..., traitCollection: ...)`
    static func ic_rememberme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rememberme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remove", bundle: ..., traitCollection: ...)`
    static func ic_remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_req", bundle: ..., traitCollection: ...)`
    static func ic_req(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_req, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_return", bundle: ..., traitCollection: ...)`
    static func ic_return(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_return, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ride_share", bundle: ..., traitCollection: ...)`
    static func ic_ride_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ride_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_road_pickup", bundle: ..., traitCollection: ...)`
    static func ic_road_pickup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_road_pickup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_salon_service_time", bundle: ..., traitCollection: ...)`
    static func ic_salon_service_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_salon_service_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_salon_visiting_charges", bundle: ..., traitCollection: ...)`
    static func ic_salon_visiting_charges(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_salon_visiting_charges, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_schedule_booking", bundle: ..., traitCollection: ...)`
    static func ic_schedule_booking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_schedule_booking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_schedule_pickup", bundle: ..., traitCollection: ...)`
    static func ic_schedule_pickup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_schedule_pickup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_school_ride", bundle: ..., traitCollection: ...)`
    static func ic_school_ride(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_school_ride, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_grey", bundle: ..., traitCollection: ...)`
    static func ic_search_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_multi", bundle: ..., traitCollection: ...)`
    static func ic_search_multi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_multi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_white", bundle: ..., traitCollection: ...)`
    static func ic_search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_white-1", bundle: ..., traitCollection: ...)`
    static func ic_search_white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_send", bundle: ..., traitCollection: ...)`
    static func ic_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_baby_sitter", bundle: ..., traitCollection: ...)`
    static func ic_service_baby_sitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_baby_sitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_cleaning", bundle: ..., traitCollection: ...)`
    static func ic_service_cleaning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_cleaning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_fitness", bundle: ..., traitCollection: ...)`
    static func ic_service_fitness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_fitness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_flowers", bundle: ..., traitCollection: ...)`
    static func ic_service_flowers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_flowers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_grocery", bundle: ..., traitCollection: ...)`
    static func ic_service_grocery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_grocery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_household", bundle: ..., traitCollection: ...)`
    static func ic_service_household(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_household, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_laundry", bundle: ..., traitCollection: ...)`
    static func ic_service_laundry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_laundry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_meds", bundle: ..., traitCollection: ...)`
    static func ic_service_meds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_meds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_packages", bundle: ..., traitCollection: ...)`
    static func ic_service_packages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_packages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_party", bundle: ..., traitCollection: ...)`
    static func ic_service_party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_party, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_photography", bundle: ..., traitCollection: ...)`
    static func ic_service_photography(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_photography, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_salon", bundle: ..., traitCollection: ...)`
    static func ic_service_salon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_salon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_service_water", bundle: ..., traitCollection: ...)`
    static func ic_service_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_service_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share_white", bundle: ..., traitCollection: ...)`
    static func ic_share_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_since", bundle: ..., traitCollection: ...)`
    static func ic_since(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_since, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_slide_arrow", bundle: ..., traitCollection: ...)`
    static func ic_slide_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slide_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_slide_arrow-back", bundle: ..., traitCollection: ...)`
    static func ic_slide_arrowBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slide_arrowBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_cart", bundle: ..., traitCollection: ...)`
    static func ic_sp_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_favorites", bundle: ..., traitCollection: ...)`
    static func ic_sp_favorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_favorites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_home", bundle: ..., traitCollection: ...)`
    static func ic_sp_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_location", bundle: ..., traitCollection: ...)`
    static func ic_sp_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_loyalty", bundle: ..., traitCollection: ...)`
    static func ic_sp_loyalty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_loyalty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_notifications", bundle: ..., traitCollection: ...)`
    static func ic_sp_notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_order_history", bundle: ..., traitCollection: ...)`
    static func ic_sp_order_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_order_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_order_rate", bundle: ..., traitCollection: ...)`
    static func ic_sp_order_rate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_order_rate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_order_track", bundle: ..., traitCollection: ...)`
    static func ic_sp_order_track(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_order_track, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_order_upcoming", bundle: ..., traitCollection: ...)`
    static func ic_sp_order_upcoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_order_upcoming, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_promotions", bundle: ..., traitCollection: ...)`
    static func ic_sp_promotions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_promotions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_settings", bundle: ..., traitCollection: ...)`
    static func ic_sp_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_share", bundle: ..., traitCollection: ...)`
    static func ic_sp_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sp_support", bundle: ..., traitCollection: ...)`
    static func ic_sp_support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sp_support, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_splash_brownNew", bundle: ..., traitCollection: ...)`
    static func ic_splash_brownNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_splash_brownNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sponsor", bundle: ..., traitCollection: ...)`
    static func ic_sponsor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sponsor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_big_grey", bundle: ..., traitCollection: ...)`
    static func ic_star_big_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_big_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_big_yellow", bundle: ..., traitCollection: ...)`
    static func ic_star_big_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_big_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_gray", bundle: ..., traitCollection: ...)`
    static func ic_star_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_orange", bundle: ..., traitCollection: ...)`
    static func ic_star_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_small_grey", bundle: ..., traitCollection: ...)`
    static func ic_star_small_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_small_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_small_yellow", bundle: ..., traitCollection: ...)`
    static func ic_star_small_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_small_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_start_light_white", bundle: ..., traitCollection: ...)`
    static func ic_start_light_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_start_light_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_start_white", bundle: ..., traitCollection: ...)`
    static func ic_start_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_start_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_busy", bundle: ..., traitCollection: ...)`
    static func ic_status_busy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_busy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_offline", bundle: ..., traitCollection: ...)`
    static func ic_status_offline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_offline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_online", bundle: ..., traitCollection: ...)`
    static func ic_status_online(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_online, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_terms", bundle: ..., traitCollection: ...)`
    static func ic_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_terms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_text_illus", bundle: ..., traitCollection: ...)`
    static func ic_text_illus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_text_illus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_time", bundle: ..., traitCollection: ...)`
    static func ic_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_time_selector", bundle: ..., traitCollection: ...)`
    static func ic_time_selector(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time_selector, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_token", bundle: ..., traitCollection: ...)`
    static func ic_token(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_token, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_truck_m_freights", bundle: ..., traitCollection: ...)`
    static func ic_truck_m_freights(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_truck_m_freights, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_truck_water_tank_m", bundle: ..., traitCollection: ...)`
    static func ic_truck_water_tank_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_truck_water_tank_m, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tuk_tuk_active", bundle: ..., traitCollection: ...)`
    static func ic_tuk_tuk_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tuk_tuk_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tuk_tuk_inactive", bundle: ..., traitCollection: ...)`
    static func ic_tuk_tuk_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tuk_tuk_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_twitter", bundle: ..., traitCollection: ...)`
    static func ic_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_twitter-1", bundle: ..., traitCollection: ...)`
    static func ic_twitter1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_twitter-2", bundle: ..., traitCollection: ...)`
    static func ic_twitter2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_two_dotted_line", bundle: ..., traitCollection: ...)`
    static func ic_two_dotted_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_two_dotted_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unverify", bundle: ..., traitCollection: ...)`
    static func ic_unverify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unverify, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user1", bundle: ..., traitCollection: ...)`
    static func ic_user1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_verify", bundle: ..., traitCollection: ...)`
    static func ic_verify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verify, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visibility_off", bundle: ..., traitCollection: ...)`
    static func ic_visibility_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visibility_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visibility_on", bundle: ..., traitCollection: ...)`
    static func ic_visibility_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visibility_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_welcome", bundle: ..., traitCollection: ...)`
    static func ic_welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_welcome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_youtube", bundle: ..., traitCollection: ...)`
    static func ic_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_cart", bundle: ..., traitCollection: ...)`
    static func ico_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_edit", bundle: ..., traitCollection: ...)`
    static func ico_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_filter", bundle: ..., traitCollection: ...)`
    static func ico_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_info", bundle: ..., traitCollection: ...)`
    static func ico_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_invisible", bundle: ..., traitCollection: ...)`
    static func ico_invisible(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_invisible, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_location_dark", bundle: ..., traitCollection: ...)`
    static func ico_location_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_location_dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_mail", bundle: ..., traitCollection: ...)`
    static func ico_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_map_flag", bundle: ..., traitCollection: ...)`
    static func ico_map_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_map_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_minus", bundle: ..., traitCollection: ...)`
    static func ico_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_next", bundle: ..., traitCollection: ...)`
    static func ico_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_notification", bundle: ..., traitCollection: ...)`
    static func ico_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_order", bundle: ..., traitCollection: ...)`
    static func ico_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_plus", bundle: ..., traitCollection: ...)`
    static func ico_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_refresh", bundle: ..., traitCollection: ...)`
    static func ico_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_right-arrow", bundle: ..., traitCollection: ...)`
    static func ico_rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_search", bundle: ..., traitCollection: ...)`
    static func ico_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_visibility", bundle: ..., traitCollection: ...)`
    static func ico_visibility(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_visibility, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-download", bundle: ..., traitCollection: ...)`
    static func iconDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_right_arrow", bundle: ..., traitCollection: ...)`
    static func icon_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "id", bundle: ..., traitCollection: ...)`
    static func id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ie", bundle: ..., traitCollection: ...)`
    static func ie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "il", bundle: ..., traitCollection: ...)`
    static func il(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.il, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "illustration_walkthrough_1", bundle: ..., traitCollection: ...)`
    static func illustration_walkthrough_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration_walkthrough_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "im", bundle: ..., traitCollection: ...)`
    static func im(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.im, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image5", bundle: ..., traitCollection: ...)`
    static func image5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_DriveryBoy", bundle: ..., traitCollection: ...)`
    static func img_DriveryBoy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_DriveryBoy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_fade", bundle: ..., traitCollection: ...)`
    static func img_fade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_fade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_nothing_found", bundle: ..., traitCollection: ...)`
    static func img_nothing_found(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_nothing_found, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_truck", bundle: ..., traitCollection: ...)`
    static func img_truck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_truck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "in", bundle: ..., traitCollection: ...)`
    static func `in`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`in`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram (8)", bundle: ..., traitCollection: ...)`
    static func instagram8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "io", bundle: ..., traitCollection: ...)`
    static func io(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.io, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iq", bundle: ..., traitCollection: ...)`
    static func iq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ir", bundle: ..., traitCollection: ...)`
    static func ir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ir, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "is", bundle: ..., traitCollection: ...)`
    static func `is`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`is`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "it", bundle: ..., traitCollection: ...)`
    static func it(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.it, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "je", bundle: ..., traitCollection: ...)`
    static func je(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.je, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jm", bundle: ..., traitCollection: ...)`
    static func jm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jo", bundle: ..., traitCollection: ...)`
    static func jo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jp", bundle: ..., traitCollection: ...)`
    static func jp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ke", bundle: ..., traitCollection: ...)`
    static func ke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keeda.gif", bundle: ..., traitCollection: ...)`
    static func keedaGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keedaGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kg", bundle: ..., traitCollection: ...)`
    static func kg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kh", bundle: ..., traitCollection: ...)`
    static func kh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ki", bundle: ..., traitCollection: ...)`
    static func ki(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ki, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "km", bundle: ..., traitCollection: ...)`
    static func km(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.km, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kn", bundle: ..., traitCollection: ...)`
    static func kn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kp", bundle: ..., traitCollection: ...)`
    static func kp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kr", bundle: ..., traitCollection: ...)`
    static func kr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kw", bundle: ..., traitCollection: ...)`
    static func kw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ky", bundle: ..., traitCollection: ...)`
    static func ky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kz", bundle: ..., traitCollection: ...)`
    static func kz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "la", bundle: ..., traitCollection: ...)`
    static func la(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.la, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lb", bundle: ..., traitCollection: ...)`
    static func lb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lc", bundle: ..., traitCollection: ...)`
    static func lc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "li", bundle: ..., traitCollection: ...)`
    static func li(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.li, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "linkedin (8)", bundle: ..., traitCollection: ...)`
    static func linkedin8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linkedin8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "littleSeasorHeader", bundle: ..., traitCollection: ...)`
    static func littleSeasorHeader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.littleSeasorHeader, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lk", bundle: ..., traitCollection: ...)`
    static func lk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loader.gif", bundle: ..., traitCollection: ...)`
    static func loaderGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loaderGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location.gif", bundle: ..., traitCollection: ...)`
    static func locationGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationBlue", bundle: ..., traitCollection: ...)`
    static func locationBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationDark", bundle: ..., traitCollection: ...)`
    static func locationDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginLogo", bundle: ..., traitCollection: ...)`
    static func loginLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoBletani", bundle: ..., traitCollection: ...)`
    static func logoBletani(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoBletani, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoElconcierge", bundle: ..., traitCollection: ...)`
    static func logoElconcierge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoElconcierge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoFIF", bundle: ..., traitCollection: ...)`
    static func logoFIF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoFIF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoJustCBD", bundle: ..., traitCollection: ...)`
    static func logoJustCBD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoJustCBD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_header", bundle: ..., traitCollection: ...)`
    static func logo_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_navbar_white", bundle: ..., traitCollection: ...)`
    static func logo_navbar_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_navbar_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_navbar_white-1", bundle: ..., traitCollection: ...)`
    static func logo_navbar_white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_navbar_white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_splah_white", bundle: ..., traitCollection: ...)`
    static func logo_splah_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_splah_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_splash", bundle: ..., traitCollection: ...)`
    static func logo_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_tianquiz", bundle: ..., traitCollection: ...)`
    static func logo_tianquiz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_tianquiz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoutIcon", bundle: ..., traitCollection: ...)`
    static func logoutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loyalityPointsIcon", bundle: ..., traitCollection: ...)`
    static func loyalityPointsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loyalityPointsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lr", bundle: ..., traitCollection: ...)`
    static func lr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ls", bundle: ..., traitCollection: ...)`
    static func ls(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ls, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lt", bundle: ..., traitCollection: ...)`
    static func lt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lu", bundle: ..., traitCollection: ...)`
    static func lu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lv", bundle: ..., traitCollection: ...)`
    static func lv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ly", bundle: ..., traitCollection: ...)`
    static func ly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ma", bundle: ..., traitCollection: ...)`
    static func ma(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ma, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "make the payment_ecommerce", bundle: ..., traitCollection: ...)`
    static func makeThePayment_ecommerce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.makeThePayment_ecommerce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "make the payment_party", bundle: ..., traitCollection: ...)`
    static func makeThePayment_party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.makeThePayment_party, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPin", bundle: ..., traitCollection: ...)`
    static func mapPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marketplace24", bundle: ..., traitCollection: ...)`
    static func marketplace24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marketplace24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marketplaceicon", bundle: ..., traitCollection: ...)`
    static func marketplaceicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marketplaceicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mc", bundle: ..., traitCollection: ...)`
    static func mc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "md", bundle: ..., traitCollection: ...)`
    static func md(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_bg", bundle: ..., traitCollection: ...)`
    static func menu_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mf", bundle: ..., traitCollection: ...)`
    static func mf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mg", bundle: ..., traitCollection: ...)`
    static func mg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mh", bundle: ..., traitCollection: ...)`
    static func mh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mk", bundle: ..., traitCollection: ...)`
    static func mk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ml", bundle: ..., traitCollection: ...)`
    static func ml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mm", bundle: ..., traitCollection: ...)`
    static func mm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mn", bundle: ..., traitCollection: ...)`
    static func mn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mo", bundle: ..., traitCollection: ...)`
    static func mo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moreIcon", bundle: ..., traitCollection: ...)`
    static func moreIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moreSelected", bundle: ..., traitCollection: ...)`
    static func moreSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moreUnselected", bundle: ..., traitCollection: ...)`
    static func moreUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "movifyicon", bundle: ..., traitCollection: ...)`
    static func movifyicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.movifyicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mp", bundle: ..., traitCollection: ...)`
    static func mp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mq", bundle: ..., traitCollection: ...)`
    static func mq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mr", bundle: ..., traitCollection: ...)`
    static func mr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ms", bundle: ..., traitCollection: ...)`
    static func ms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mt", bundle: ..., traitCollection: ...)`
    static func mt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mu", bundle: ..., traitCollection: ...)`
    static func mu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mv", bundle: ..., traitCollection: ...)`
    static func mv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mw", bundle: ..., traitCollection: ...)`
    static func mw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mx", bundle: ..., traitCollection: ...)`
    static func mx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my", bundle: ..., traitCollection: ...)`
    static func my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myFavourites", bundle: ..., traitCollection: ...)`
    static func myFavourites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myFavourites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mz", bundle: ..., traitCollection: ...)`
    static func mz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "na", bundle: ..., traitCollection: ...)`
    static func na(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.na, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nc", bundle: ..., traitCollection: ...)`
    static func nc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ne", bundle: ..., traitCollection: ...)`
    static func ne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newAppIcon", bundle: ..., traitCollection: ...)`
    static func newAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nf", bundle: ..., traitCollection: ...)`
    static func nf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ng", bundle: ..., traitCollection: ...)`
    static func ng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ni", bundle: ..., traitCollection: ...)`
    static func ni(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ni, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nl", bundle: ..., traitCollection: ...)`
    static func nl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no", bundle: ..., traitCollection: ...)`
    static func no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nodata", bundle: ..., traitCollection: ...)`
    static func nodata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nodata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationIcon", bundle: ..., traitCollection: ...)`
    static func notificationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "np", bundle: ..., traitCollection: ...)`
    static func np(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.np, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nr", bundle: ..., traitCollection: ...)`
    static func nr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nu", bundle: ..., traitCollection: ...)`
    static func nu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nz", bundle: ..., traitCollection: ...)`
    static func nz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "om", bundle: ..., traitCollection: ...)`
    static func om(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.om, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "online_order_food", bundle: ..., traitCollection: ...)`
    static func online_order_food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.online_order_food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordersSelected", bundle: ..., traitCollection: ...)`
    static func ordersSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordersSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordersUnselected", bundle: ..., traitCollection: ...)`
    static func ordersUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordersUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pa", bundle: ..., traitCollection: ...)`
    static func pa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_bg_green", bundle: ..., traitCollection: ...)`
    static func package_bg_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_bg_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_bg_red", bundle: ..., traitCollection: ...)`
    static func package_bg_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_bg_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_delivery", bundle: ..., traitCollection: ...)`
    static func package_delivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_delivery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pe", bundle: ..., traitCollection: ...)`
    static func pe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pf", bundle: ..., traitCollection: ...)`
    static func pf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pg", bundle: ..., traitCollection: ...)`
    static func pg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ph", bundle: ..., traitCollection: ...)`
    static func ph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pickup", bundle: ..., traitCollection: ...)`
    static func pickup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pickupWhite", bundle: ..., traitCollection: ...)`
    static func pickupWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickupWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin-outline", bundle: ..., traitCollection: ...)`
    static func pinOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pk", bundle: ..., traitCollection: ...)`
    static func pk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pl", bundle: ..., traitCollection: ...)`
    static func pl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholderOld", bundle: ..., traitCollection: ...)`
    static func placeholderOld(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderOld, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image", bundle: ..., traitCollection: ...)`
    static func placeholder_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image1", bundle: ..., traitCollection: ...)`
    static func placeholder_image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image2", bundle: ..., traitCollection: ...)`
    static func placeholder_image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image4", bundle: ..., traitCollection: ...)`
    static func placeholder_image4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image5", bundle: ..., traitCollection: ...)`
    static func placeholder_image5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_image6", bundle: ..., traitCollection: ...)`
    static func placeholder_image6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_imageOld", bundle: ..., traitCollection: ...)`
    static func placeholder_imageOld(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_imageOld, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusIcon", bundle: ..., traitCollection: ...)`
    static func plusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pm", bundle: ..., traitCollection: ...)`
    static func pm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pn", bundle: ..., traitCollection: ...)`
    static func pn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "poneeex_logo", bundle: ..., traitCollection: ...)`
    static func poneeex_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poneeex_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pr", bundle: ..., traitCollection: ...)`
    static func pr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "previous", bundle: ..., traitCollection: ...)`
    static func previous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previous, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy_policy", bundle: ..., traitCollection: ...)`
    static func privacy_policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy_policy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_selected", bundle: ..., traitCollection: ...)`
    static func profile_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotionIcon", bundle: ..., traitCollection: ...)`
    static func promotionIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotionIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ps", bundle: ..., traitCollection: ...)`
    static func ps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pt", bundle: ..., traitCollection: ...)`
    static func pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pw", bundle: ..., traitCollection: ...)`
    static func pw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "py", bundle: ..., traitCollection: ...)`
    static func py(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.py, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qa", bundle: ..., traitCollection: ...)`
    static func qa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radioActiveBlue", bundle: ..., traitCollection: ...)`
    static func radioActiveBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioActiveBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radioInactiveBlue", bundle: ..., traitCollection: ...)`
    static func radioInactiveBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioInactiveBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radioOffBlack", bundle: ..., traitCollection: ...)`
    static func radioOffBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioOffBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radioOnBlack", bundle: ..., traitCollection: ...)`
    static func radioOnBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioOnBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_off", bundle: ..., traitCollection: ...)`
    static func radio_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_on", bundle: ..., traitCollection: ...)`
    static func radio_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "re", bundle: ..., traitCollection: ...)`
    static func re(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.re, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redPin", bundle: ..., traitCollection: ...)`
    static func redPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rentalBg", bundle: ..., traitCollection: ...)`
    static func rentalBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rentalBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restaurantMenu", bundle: ..., traitCollection: ...)`
    static func restaurantMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurantMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "return", bundle: ..., traitCollection: ...)`
    static func `return`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`return`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ride_logo", bundle: ..., traitCollection: ...)`
    static func ride_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ride_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ro", bundle: ..., traitCollection: ...)`
    static func ro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rs", bundle: ..., traitCollection: ...)`
    static func rs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ru", bundle: ..., traitCollection: ...)`
    static func ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ru, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rw", bundle: ..., traitCollection: ...)`
    static func rw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sa", bundle: ..., traitCollection: ...)`
    static func sa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saudi", bundle: ..., traitCollection: ...)`
    static func saudi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saudi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sb", bundle: ..., traitCollection: ...)`
    static func sb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sc", bundle: ..., traitCollection: ...)`
    static func sc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "school_rides", bundle: ..., traitCollection: ...)`
    static func school_rides(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.school_rides, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd", bundle: ..., traitCollection: ...)`
    static func sd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "se", bundle: ..., traitCollection: ...)`
    static func se(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.se, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_food", bundle: ..., traitCollection: ...)`
    static func search_food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_service_homeservices", bundle: ..., traitCollection: ...)`
    static func search_service_homeservices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_service_homeservices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_service_mp", bundle: ..., traitCollection: ...)`
    static func search_service_mp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_service_mp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_white", bundle: ..., traitCollection: ...)`
    static func search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "select_agent_homeservices", bundle: ..., traitCollection: ...)`
    static func select_agent_homeservices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_agent_homeservices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "select_agent_mp", bundle: ..., traitCollection: ...)`
    static func select_agent_mp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_agent_mp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sg", bundle: ..., traitCollection: ...)`
    static func sg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sh", bundle: ..., traitCollection: ...)`
    static func sh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shadowOverlay", bundle: ..., traitCollection: ...)`
    static func shadowOverlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadowOverlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareAppIcon", bundle: ..., traitCollection: ...)`
    static func shareAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "si", bundle: ..., traitCollection: ...)`
    static func si(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.si, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sign-up_bg", bundle: ..., traitCollection: ...)`
    static func signUp_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUp_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signupBG", bundle: ..., traitCollection: ...)`
    static func signupBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signupBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sj", bundle: ..., traitCollection: ...)`
    static func sj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sk", bundle: ..., traitCollection: ...)`
    static func sk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sl", bundle: ..., traitCollection: ...)`
    static func sl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sm", bundle: ..., traitCollection: ...)`
    static func sm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sn", bundle: ..., traitCollection: ...)`
    static func sn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "so", bundle: ..., traitCollection: ...)`
    static func so(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.so, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_blank", bundle: ..., traitCollection: ...)`
    static func splash_blank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_blank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_logo", bundle: ..., traitCollection: ...)`
    static func splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_tianquiz", bundle: ..., traitCollection: ...)`
    static func splash_tianquiz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_tianquiz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sr", bundle: ..., traitCollection: ...)`
    static func sr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ss", bundle: ..., traitCollection: ...)`
    static func ss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "st", bundle: ..., traitCollection: ...)`
    static func st(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.st, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starRating", bundle: ..., traitCollection: ...)`
    static func starRating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starRating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sv", bundle: ..., traitCollection: ...)`
    static func sv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sx", bundle: ..., traitCollection: ...)`
    static func sx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy", bundle: ..., traitCollection: ...)`
    static func sy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sz", bundle: ..., traitCollection: ...)`
    static func sz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_cart", bundle: ..., traitCollection: ...)`
    static func tab_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_more", bundle: ..., traitCollection: ...)`
    static func tab_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_orders", bundle: ..., traitCollection: ...)`
    static func tab_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tc", bundle: ..., traitCollection: ...)`
    static func tc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "td", bundle: ..., traitCollection: ...)`
    static func td(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.td, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termsAndConditions", bundle: ..., traitCollection: ...)`
    static func termsAndConditions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsAndConditions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termsPoliciesIcon", bundle: ..., traitCollection: ...)`
    static func termsPoliciesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsPoliciesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tf", bundle: ..., traitCollection: ...)`
    static func tf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tg", bundle: ..., traitCollection: ...)`
    static func tg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "th", bundle: ..., traitCollection: ...)`
    static func th(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.th, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thena_splash", bundle: ..., traitCollection: ...)`
    static func thena_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thena_splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tickOrange", bundle: ..., traitCollection: ...)`
    static func tickOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tj", bundle: ..., traitCollection: ...)`
    static func tj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tk", bundle: ..., traitCollection: ...)`
    static func tk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tl", bundle: ..., traitCollection: ...)`
    static func tl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tm", bundle: ..., traitCollection: ...)`
    static func tm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tn", bundle: ..., traitCollection: ...)`
    static func tn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "to", bundle: ..., traitCollection: ...)`
    static func to(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.to, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tonImg", bundle: ..., traitCollection: ...)`
    static func tonImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tonImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tr", bundle: ..., traitCollection: ...)`
    static func tr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tt", bundle: ..., traitCollection: ...)`
    static func tt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tv", bundle: ..., traitCollection: ...)`
    static func tv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tw", bundle: ..., traitCollection: ...)`
    static func tw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter (7)", bundle: ..., traitCollection: ...)`
    static func twitter7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tz", bundle: ..., traitCollection: ...)`
    static func tz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ua", bundle: ..., traitCollection: ...)`
    static func ua(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ua, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ug", bundle: ..., traitCollection: ...)`
    static func ug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "um", bundle: ..., traitCollection: ...)`
    static func um(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.um, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload", bundle: ..., traitCollection: ...)`
    static func upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "us", bundle: ..., traitCollection: ...)`
    static func us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "usa", bundle: ..., traitCollection: ...)`
    static func usa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_placeholder", bundle: ..., traitCollection: ...)`
    static func user_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uy", bundle: ..., traitCollection: ...)`
    static func uy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uz", bundle: ..., traitCollection: ...)`
    static func uz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "va", bundle: ..., traitCollection: ...)`
    static func va(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.va, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vc", bundle: ..., traitCollection: ...)`
    static func vc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ve", bundle: ..., traitCollection: ...)`
    static func ve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vg", bundle: ..., traitCollection: ...)`
    static func vg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vi", bundle: ..., traitCollection: ...)`
    static func vi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vn", bundle: ..., traitCollection: ...)`
    static func vn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vu", bundle: ..., traitCollection: ...)`
    static func vu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walk_1", bundle: ..., traitCollection: ...)`
    static func walk_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walk_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walk_2", bundle: ..., traitCollection: ...)`
    static func walk_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walk_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walk_3", bundle: ..., traitCollection: ...)`
    static func walk_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walk_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthrough1", bundle: ..., traitCollection: ...)`
    static func walkthrough1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walkthrough_!", bundle: ..., traitCollection: ...)`
    static func walkthrough_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wasselSplash", bundle: ..., traitCollection: ...)`
    static func wasselSplash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wasselSplash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wasselicon", bundle: ..., traitCollection: ...)`
    static func wasselicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wasselicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wf", bundle: ..., traitCollection: ...)`
    static func wf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ws", bundle: ..., traitCollection: ...)`
    static func ws(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ws, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ye", bundle: ..., traitCollection: ...)`
    static func ye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yt", bundle: ..., traitCollection: ...)`
    static func yt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yummy_logo", bundle: ..., traitCollection: ...)`
    static func yummy_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yummy_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "za", bundle: ..., traitCollection: ...)`
    static func za(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.za, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zm", bundle: ..., traitCollection: ...)`
    static func zm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zw", bundle: ..., traitCollection: ...)`
    static func zw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zz", bundle: ..., traitCollection: ...)`
    static func zz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zz, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 97 nibs.
  struct nib {
    /// Nib `AddAddressTableViewCell`.
    static let addAddressTableViewCell = _R.nib._AddAddressTableViewCell()
    /// Nib `BookingLocationCell`.
    static let bookingLocationCell = _R.nib._BookingLocationCell()
    /// Nib `BookingPricingCell`.
    static let bookingPricingCell = _R.nib._BookingPricingCell()
    /// Nib `ButtonCell`.
    static let buttonCell = _R.nib._ButtonCell()
    /// Nib `CalenderDateCell`.
    static let calenderDateCell = _R.nib._CalenderDateCell()
    /// Nib `CartAnswerView`.
    static let cartAnswerView = _R.nib._CartAnswerView()
    /// Nib `CartListingCell`.
    static let cartListingCell = _R.nib._CartListingCell()
    /// Nib `CartQuestionCell`.
    static let cartQuestionCell = _R.nib._CartQuestionCell()
    /// Nib `CartQuestionHeader`.
    static let cartQuestionHeader = _R.nib._CartQuestionHeader()
    /// Nib `CartQuestionView`.
    static let cartQuestionView = _R.nib._CartQuestionView()
    /// Nib `ChatAccessory`.
    static let chatAccessory = _R.nib._ChatAccessory()
    /// Nib `ChatBotMessageTableCell`.
    static let chatBotMessageTableCell = _R.nib._ChatBotMessageTableCell()
    /// Nib `ChatBotProductTableCell`.
    static let chatBotProductTableCell = _R.nib._ChatBotProductTableCell()
    /// Nib `ChatBotProductsHeaderTableCell`.
    static let chatBotProductsHeaderTableCell = _R.nib._ChatBotProductsHeaderTableCell()
    /// Nib `CheckCustomizationTableViewCell`.
    static let checkCustomizationTableViewCell = _R.nib._CheckCustomizationTableViewCell()
    /// Nib `CountryListViewController`.
    static let countryListViewController = _R.nib._CountryListViewController()
    /// Nib `CouponToBuyCell`.
    static let couponToBuyCell = _R.nib._CouponToBuyCell()
    /// Nib `CustomizationTableViewCell`.
    static let customizationTableViewCell = _R.nib._CustomizationTableViewCell()
    /// Nib `CutomizationTableHeaderView`.
    static let cutomizationTableHeaderView = _R.nib._CutomizationTableHeaderView()
    /// Nib `DeliveryAddressCollectionCell`.
    static let deliveryAddressCollectionCell = _R.nib._DeliveryAddressCollectionCell()
    /// Nib `DonatePopupVC`.
    static let donatePopupVC = _R.nib._DonatePopupVC()
    /// Nib `DriverAcceptedCell`.
    static let driverAcceptedCell = _R.nib._DriverAcceptedCell()
    /// Nib `ETokenHeaderView`.
    static let eTokenHeaderView = _R.nib._ETokenHeaderView()
    /// Nib `ETokenOfferCell`.
    static let eTokenOfferCell = _R.nib._ETokenOfferCell()
    /// Nib `ETokenPurchasedCell`.
    static let eTokenPurchasedCell = _R.nib._ETokenPurchasedCell()
    /// Nib `ETokenPurchasedTableCell`.
    static let eTokenPurchasedTableCell = _R.nib._ETokenPurchasedTableCell()
    /// Nib `ETokenTableCell`.
    static let eTokenTableCell = _R.nib._ETokenTableCell()
    /// Nib `ETokenToBuyCell`.
    static let eTokenToBuyCell = _R.nib._ETokenToBuyCell()
    /// Nib `FlickeringHomeTableViewCell`.
    static let flickeringHomeTableViewCell = _R.nib._FlickeringHomeTableViewCell()
    /// Nib `FlickeringRestMenuCell`.
    static let flickeringRestMenuCell = _R.nib._FlickeringRestMenuCell()
    /// Nib `FlickeringRestraDetailTableViewCell`.
    static let flickeringRestraDetailTableViewCell = _R.nib._FlickeringRestraDetailTableViewCell()
    /// Nib `FloatingSupplierView`.
    static let floatingSupplierView = _R.nib._FloatingSupplierView()
    /// Nib `HomeBrandCollectionCell`.
    static let homeBrandCollectionCell = _R.nib._HomeBrandCollectionCell()
    /// Nib `HomeBrandsCollectionCollectionCell`.
    static let homeBrandsCollectionCollectionCell = _R.nib._HomeBrandsCollectionCollectionCell()
    /// Nib `HomeBrandsCollectionTableCell`.
    static let homeBrandsCollectionTableCell = _R.nib._HomeBrandsCollectionTableCell()
    /// Nib `HomeCurrentOrderCollectionCell`.
    static let homeCurrentOrderCollectionCell = _R.nib._HomeCurrentOrderCollectionCell()
    /// Nib `HomeFoodItemCollectionCell`.
    static let homeFoodItemCollectionCell = _R.nib._HomeFoodItemCollectionCell()
    /// Nib `HomeFoodRestaurantTableCell`.
    static let homeFoodRestaurantTableCell = _R.nib._HomeFoodRestaurantTableCell()
    /// Nib `HomeMenuCollectionCell`.
    static let homeMenuCollectionCell = _R.nib._HomeMenuCollectionCell()
    /// Nib `HomeMenuCollectionTableCell`.
    static let homeMenuCollectionTableCell = _R.nib._HomeMenuCollectionTableCell()
    /// Nib `HomeOffersHListTableCell`.
    static let homeOffersHListTableCell = _R.nib._HomeOffersHListTableCell()
    /// Nib `HomeProductCell`.
    static let homeProductCell = _R.nib._HomeProductCell()
    /// Nib `HomeSearchCell`.
    static let homeSearchCell = _R.nib._HomeSearchCell()
    /// Nib `HomeSectionHeader`.
    static let homeSectionHeader = _R.nib._HomeSectionHeader()
    /// Nib `HomeServiceCategoriesTableCell`.
    static let homeServiceCategoriesTableCell = _R.nib._HomeServiceCategoriesTableCell()
    /// Nib `HomeServiceCategoryCollectionCell`.
    static let homeServiceCategoryCollectionCell = _R.nib._HomeServiceCategoryCollectionCell()
    /// Nib `HomeSkeletonCell`.
    static let homeSkeletonCell = _R.nib._HomeSkeletonCell()
    /// Nib `HomeSupplierTableCell`.
    static let homeSupplierTableCell = _R.nib._HomeSupplierTableCell()
    /// Nib `JNJHomeHeaderTableCell`.
    static let jnjHomeHeaderTableCell = _R.nib._JNJHomeHeaderTableCell()
    /// Nib `LaundrySectionHeader`.
    static let laundrySectionHeader = _R.nib._LaundrySectionHeader()
    /// Nib `LaundryServiceHeaderView`.
    static let laundryServiceHeaderView = _R.nib._LaundryServiceHeaderView()
    /// Nib `LoadMorePTableCell`.
    static let loadMorePTableCell = _R.nib._LoadMorePTableCell()
    /// Nib `MixedHomeLabelCell`.
    static let mixedHomeLabelCell = _R.nib._MixedHomeLabelCell()
    /// Nib `MixedHomeV2CategoryCell`.
    static let mixedHomeV2CategoryCell = _R.nib._MixedHomeV2CategoryCell()
    /// Nib `MixedHomeV2DealCell`.
    static let mixedHomeV2DealCell = _R.nib._MixedHomeV2DealCell()
    /// Nib `MixedHomeV2LabelCell`.
    static let mixedHomeV2LabelCell = _R.nib._MixedHomeV2LabelCell()
    /// Nib `MoreTableViewCell`.
    static let moreTableViewCell = _R.nib._MoreTableViewCell()
    /// Nib `MyCouponCell`.
    static let myCouponCell = _R.nib._MyCouponCell()
    /// Nib `MyETokenCell`.
    static let myETokenCell = _R.nib._MyETokenCell()
    /// Nib `OrderDeliveryDetailView`.
    static let orderDeliveryDetailView = _R.nib._OrderDeliveryDetailView()
    /// Nib `OrderImageCell`.
    static let orderImageCell = _R.nib._OrderImageCell()
    /// Nib `OrderParentCell`.
    static let orderParentCell = _R.nib._OrderParentCell()
    /// Nib `ProductCategoryCell`.
    static let productCategoryCell = _R.nib._ProductCategoryCell()
    /// Nib `ProductCollectionCell`.
    static let productCollectionCell = _R.nib._ProductCollectionCell()
    /// Nib `ProductInfoHeaderView`.
    static let productInfoHeaderView = _R.nib._ProductInfoHeaderView()
    /// Nib `ProductListCell`.
    static let productListCell = _R.nib._ProductListCell()
    /// Nib `ProductListingCell`.
    static let productListingCell = _R.nib._ProductListingCell()
    /// Nib `ProductView`.
    static let productView = _R.nib._ProductView()
    /// Nib `PurchasedCouponTableCell`.
    static let purchasedCouponTableCell = _R.nib._PurchasedCouponTableCell()
    /// Nib `ReceiverAtchCell`.
    static let receiverAtchCell = _R.nib._ReceiverAtchCell()
    /// Nib `ReceiverImgCell`.
    static let receiverImgCell = _R.nib._ReceiverImgCell()
    /// Nib `ReceiverTxtCell`.
    static let receiverTxtCell = _R.nib._ReceiverTxtCell()
    /// Nib `RefreshControlView`.
    static let refreshControlView = _R.nib._RefreshControlView()
    /// Nib `RentalHomeCollectionViewCell`.
    static let rentalHomeCollectionViewCell = _R.nib._RentalHomeCollectionViewCell()
    /// Nib `RentalProductImagesCollectionViewCell`.
    static let rentalProductImagesCollectionViewCell = _R.nib._RentalProductImagesCollectionViewCell()
    /// Nib `RentalProductSpecificationCollectionViewCell`.
    static let rentalProductSpecificationCollectionViewCell = _R.nib._RentalProductSpecificationCollectionViewCell()
    /// Nib `RentalSupplierListingTableViewCell`.
    static let rentalSupplierListingTableViewCell = _R.nib._RentalSupplierListingTableViewCell()
    /// Nib `RestaurantTableHeader`.
    static let restaurantTableHeader = _R.nib._RestaurantTableHeader()
    /// Nib `SavedAddressTableViewCell`.
    static let savedAddressTableViewCell = _R.nib._SavedAddressTableViewCell()
    /// Nib `SenderAtchCell`.
    static let senderAtchCell = _R.nib._SenderAtchCell()
    /// Nib `SenderImgCell`.
    static let senderImgCell = _R.nib._SenderImgCell()
    /// Nib `SenderTxtCell`.
    static let senderTxtCell = _R.nib._SenderTxtCell()
    /// Nib `SideMenuCell`.
    static let sideMenuCell = _R.nib._SideMenuCell()
    /// Nib `SponsorView`.
    static let sponsorView = _R.nib._SponsorView()
    /// Nib `SubCategoryListingCell`.
    static let subCategoryListingCell = _R.nib._SubCategoryListingCell()
    /// Nib `SupplierCollectionCell`.
    static let supplierCollectionCell = _R.nib._SupplierCollectionCell()
    /// Nib `SupplierInfoHeaderCollectionCell`.
    static let supplierInfoHeaderCollectionCell = _R.nib._SupplierInfoHeaderCollectionCell()
    /// Nib `SupplierInfoHeaderView`.
    static let supplierInfoHeaderView = _R.nib._SupplierInfoHeaderView()
    /// Nib `SupplierListingCell`.
    static let supplierListingCell = _R.nib._SupplierListingCell()
    /// Nib `SupplierRatingPopUp`.
    static let supplierRatingPopUp = _R.nib._SupplierRatingPopUp()
    /// Nib `TempCollectionViewCell`.
    static let tempCollectionViewCell = _R.nib._TempCollectionViewCell()
    /// Nib `TravelPackagesCell`.
    static let travelPackagesCell = _R.nib._TravelPackagesCell()
    /// Nib `UploadImageCollectionCell`.
    static let uploadImageCollectionCell = _R.nib._UploadImageCollectionCell()
    /// Nib `UploadedDocCell`.
    static let uploadedDocCell = _R.nib._UploadedDocCell()
    /// Nib `VPAutoCompleteViewCell`.
    static let vpAutoCompleteViewCell = _R.nib._VPAutoCompleteViewCell()
    /// Nib `VariantView`.
    static let variantView = _R.nib._VariantView()
    /// Nib `VehicleImageCollectionCell`.
    static let vehicleImageCollectionCell = _R.nib._VehicleImageCollectionCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddAddressTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAddressTableViewCell) instead")
    static func addAddressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAddressTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingLocationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingLocationCell) instead")
    static func bookingLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingLocationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingPricingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingPricingCell) instead")
    static func bookingPricingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingPricingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.buttonCell) instead")
    static func buttonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buttonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalenderDateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calenderDateCell) instead")
    static func calenderDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calenderDateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartAnswerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartAnswerView) instead")
    static func cartAnswerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartAnswerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartListingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartListingCell) instead")
    static func cartListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartListingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartQuestionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartQuestionCell) instead")
    static func cartQuestionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartQuestionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartQuestionHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartQuestionHeader) instead")
    static func cartQuestionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartQuestionHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartQuestionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartQuestionView) instead")
    static func cartQuestionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartQuestionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatAccessory", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatAccessory) instead")
    static func chatAccessory(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatAccessory)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatBotMessageTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatBotMessageTableCell) instead")
    static func chatBotMessageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatBotMessageTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatBotProductTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatBotProductTableCell) instead")
    static func chatBotProductTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatBotProductTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatBotProductsHeaderTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatBotProductsHeaderTableCell) instead")
    static func chatBotProductsHeaderTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatBotProductsHeaderTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CheckCustomizationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkCustomizationTableViewCell) instead")
    static func checkCustomizationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkCustomizationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CountryListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.countryListViewController) instead")
    static func countryListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.countryListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponToBuyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponToBuyCell) instead")
    static func couponToBuyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponToBuyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomizationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customizationTableViewCell) instead")
    static func customizationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customizationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CutomizationTableHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cutomizationTableHeaderView) instead")
    static func cutomizationTableHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cutomizationTableHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeliveryAddressCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deliveryAddressCollectionCell) instead")
    static func deliveryAddressCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deliveryAddressCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DonatePopupVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.donatePopupVC) instead")
    static func donatePopupVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.donatePopupVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DriverAcceptedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.driverAcceptedCell) instead")
    static func driverAcceptedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.driverAcceptedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenHeaderView) instead")
    static func eTokenHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenOfferCell) instead")
    static func eTokenOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenOfferCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenPurchasedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenPurchasedCell) instead")
    static func eTokenPurchasedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenPurchasedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenPurchasedTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenPurchasedTableCell) instead")
    static func eTokenPurchasedTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenPurchasedTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenTableCell) instead")
    static func eTokenTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ETokenToBuyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eTokenToBuyCell) instead")
    static func eTokenToBuyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eTokenToBuyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FlickeringHomeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.flickeringHomeTableViewCell) instead")
    static func flickeringHomeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.flickeringHomeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FlickeringRestMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.flickeringRestMenuCell) instead")
    static func flickeringRestMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.flickeringRestMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FlickeringRestraDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.flickeringRestraDetailTableViewCell) instead")
    static func flickeringRestraDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.flickeringRestraDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FloatingSupplierView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.floatingSupplierView) instead")
    static func floatingSupplierView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.floatingSupplierView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBrandCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBrandCollectionCell) instead")
    static func homeBrandCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBrandCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBrandsCollectionCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBrandsCollectionCollectionCell) instead")
    static func homeBrandsCollectionCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBrandsCollectionCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBrandsCollectionTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBrandsCollectionTableCell) instead")
    static func homeBrandsCollectionTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBrandsCollectionTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCurrentOrderCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCurrentOrderCollectionCell) instead")
    static func homeCurrentOrderCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCurrentOrderCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeFoodItemCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeFoodItemCollectionCell) instead")
    static func homeFoodItemCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFoodItemCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeFoodRestaurantTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeFoodRestaurantTableCell) instead")
    static func homeFoodRestaurantTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFoodRestaurantTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeMenuCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeMenuCollectionCell) instead")
    static func homeMenuCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeMenuCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeMenuCollectionTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeMenuCollectionTableCell) instead")
    static func homeMenuCollectionTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeMenuCollectionTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeOffersHListTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeOffersHListTableCell) instead")
    static func homeOffersHListTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeOffersHListTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeProductCell) instead")
    static func homeProductCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeProductCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSearchCell) instead")
    static func homeSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSearchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSectionHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSectionHeader) instead")
    static func homeSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSectionHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeServiceCategoriesTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeServiceCategoriesTableCell) instead")
    static func homeServiceCategoriesTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeServiceCategoriesTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeServiceCategoryCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeServiceCategoryCollectionCell) instead")
    static func homeServiceCategoryCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeServiceCategoryCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSkeletonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSkeletonCell) instead")
    static func homeSkeletonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSkeletonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSupplierTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSupplierTableCell) instead")
    static func homeSupplierTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSupplierTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JNJHomeHeaderTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jnjHomeHeaderTableCell) instead")
    static func jnjHomeHeaderTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jnjHomeHeaderTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LaundrySectionHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.laundrySectionHeader) instead")
    static func laundrySectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.laundrySectionHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LaundryServiceHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.laundryServiceHeaderView) instead")
    static func laundryServiceHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.laundryServiceHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadMorePTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadMorePTableCell) instead")
    static func loadMorePTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadMorePTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MixedHomeLabelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mixedHomeLabelCell) instead")
    static func mixedHomeLabelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mixedHomeLabelCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MixedHomeV2CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mixedHomeV2CategoryCell) instead")
    static func mixedHomeV2CategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mixedHomeV2CategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MixedHomeV2DealCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mixedHomeV2DealCell) instead")
    static func mixedHomeV2DealCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mixedHomeV2DealCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MixedHomeV2LabelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mixedHomeV2LabelCell) instead")
    static func mixedHomeV2LabelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mixedHomeV2LabelCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoreTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moreTableViewCell) instead")
    static func moreTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCouponCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCouponCell) instead")
    static func myCouponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCouponCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyETokenCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myETokenCell) instead")
    static func myETokenCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myETokenCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderDeliveryDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDeliveryDetailView) instead")
    static func orderDeliveryDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDeliveryDetailView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderImageCell) instead")
    static func orderImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderParentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderParentCell) instead")
    static func orderParentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderParentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCategoryCell) instead")
    static func productCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCollectionCell) instead")
    static func productCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductInfoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productInfoHeaderView) instead")
    static func productInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productInfoHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productListCell) instead")
    static func productListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductListingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productListingCell) instead")
    static func productListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productListingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productView) instead")
    static func productView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PurchasedCouponTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.purchasedCouponTableCell) instead")
    static func purchasedCouponTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.purchasedCouponTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReceiverAtchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receiverAtchCell) instead")
    static func receiverAtchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receiverAtchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReceiverImgCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receiverImgCell) instead")
    static func receiverImgCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receiverImgCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReceiverTxtCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receiverTxtCell) instead")
    static func receiverTxtCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receiverTxtCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RefreshControlView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.refreshControlView) instead")
    static func refreshControlView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.refreshControlView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RentalHomeCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rentalHomeCollectionViewCell) instead")
    static func rentalHomeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rentalHomeCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RentalProductImagesCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rentalProductImagesCollectionViewCell) instead")
    static func rentalProductImagesCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rentalProductImagesCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RentalProductSpecificationCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rentalProductSpecificationCollectionViewCell) instead")
    static func rentalProductSpecificationCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rentalProductSpecificationCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RentalSupplierListingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rentalSupplierListingTableViewCell) instead")
    static func rentalSupplierListingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rentalSupplierListingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestaurantTableHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restaurantTableHeader) instead")
    static func restaurantTableHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantTableHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SavedAddressTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.savedAddressTableViewCell) instead")
    static func savedAddressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.savedAddressTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SenderAtchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.senderAtchCell) instead")
    static func senderAtchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.senderAtchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SenderImgCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.senderImgCell) instead")
    static func senderImgCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.senderImgCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SenderTxtCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.senderTxtCell) instead")
    static func senderTxtCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.senderTxtCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuCell) instead")
    static func sideMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SponsorView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sponsorView) instead")
    static func sponsorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sponsorView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubCategoryListingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subCategoryListingCell) instead")
    static func subCategoryListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subCategoryListingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierCollectionCell) instead")
    static func supplierCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierInfoHeaderCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierInfoHeaderCollectionCell) instead")
    static func supplierInfoHeaderCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierInfoHeaderCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierInfoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierInfoHeaderView) instead")
    static func supplierInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierInfoHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierListingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierListingCell) instead")
    static func supplierListingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierListingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierRatingPopUp", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierRatingPopUp) instead")
    static func supplierRatingPopUp(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierRatingPopUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TempCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tempCollectionViewCell) instead")
    static func tempCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tempCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TravelPackagesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.travelPackagesCell) instead")
    static func travelPackagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.travelPackagesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UploadImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.uploadImageCollectionCell) instead")
    static func uploadImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uploadImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UploadedDocCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.uploadedDocCell) instead")
    static func uploadedDocCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uploadedDocCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VPAutoCompleteViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vpAutoCompleteViewCell) instead")
    static func vpAutoCompleteViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vpAutoCompleteViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VariantView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.variantView) instead")
    static func variantView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.variantView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VehicleImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vehicleImageCollectionCell) instead")
    static func vehicleImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vehicleImageCollectionCell)
    }
    #endif

    static func addAddressTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAddressTableViewCell? {
      return R.nib.addAddressTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAddressTableViewCell
    }

    static func bookingLocationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingLocationCell? {
      return R.nib.bookingLocationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingLocationCell
    }

    static func bookingPricingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingPricingCell? {
      return R.nib.bookingPricingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingPricingCell
    }

    static func buttonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ButtonBarViewCell? {
      return R.nib.buttonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ButtonBarViewCell
    }

    static func calenderDateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalenderDateCell? {
      return R.nib.calenderDateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalenderDateCell
    }

    static func cartAnswerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cartAnswerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cartListingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartListingCell? {
      return R.nib.cartListingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartListingCell
    }

    static func cartQuestionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartQuestionCell? {
      return R.nib.cartQuestionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartQuestionCell
    }

    static func cartQuestionHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cartQuestionHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cartQuestionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cartQuestionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func chatAccessory(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chatAccessory.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func chatBotMessageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotMessageTableCell? {
      return R.nib.chatBotMessageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotMessageTableCell
    }

    static func chatBotProductTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotProductTableCell? {
      return R.nib.chatBotProductTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotProductTableCell
    }

    static func chatBotProductsHeaderTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotProductsHeaderTableCell? {
      return R.nib.chatBotProductsHeaderTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotProductsHeaderTableCell
    }

    static func checkCustomizationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckCustomizationTableViewCell? {
      return R.nib.checkCustomizationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckCustomizationTableViewCell
    }

    static func countryListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.countryListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func couponToBuyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponToBuyCell? {
      return R.nib.couponToBuyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponToBuyCell
    }

    static func customizationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomizationTableViewCell? {
      return R.nib.customizationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomizationTableViewCell
    }

    static func cutomizationTableHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cutomizationTableHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func deliveryAddressCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeliveryAddressCollectionCell? {
      return R.nib.deliveryAddressCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeliveryAddressCollectionCell
    }

    static func donatePopupVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.donatePopupVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func driverAcceptedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DriverAcceptedCell? {
      return R.nib.driverAcceptedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DriverAcceptedCell
    }

    static func eTokenHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenHeaderView? {
      return R.nib.eTokenHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenHeaderView
    }

    static func eTokenOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenOfferCell? {
      return R.nib.eTokenOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenOfferCell
    }

    static func eTokenPurchasedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenPurchasedCell? {
      return R.nib.eTokenPurchasedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenPurchasedCell
    }

    static func eTokenPurchasedTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenPurchasedTableCell? {
      return R.nib.eTokenPurchasedTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenPurchasedTableCell
    }

    static func eTokenTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenTableCell? {
      return R.nib.eTokenTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenTableCell
    }

    static func eTokenToBuyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenToBuyCell? {
      return R.nib.eTokenToBuyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenToBuyCell
    }

    static func flickeringHomeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringHomeTableViewCell? {
      return R.nib.flickeringHomeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringHomeTableViewCell
    }

    static func flickeringRestMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringRestMenuCell? {
      return R.nib.flickeringRestMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringRestMenuCell
    }

    static func flickeringRestraDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringRestraDetailTableViewCell? {
      return R.nib.flickeringRestraDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringRestraDetailTableViewCell
    }

    static func floatingSupplierView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.floatingSupplierView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeBrandCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandCollectionCell? {
      return R.nib.homeBrandCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandCollectionCell
    }

    static func homeBrandsCollectionCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandsCollectionCollectionCell? {
      return R.nib.homeBrandsCollectionCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandsCollectionCollectionCell
    }

    static func homeBrandsCollectionTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandsCollectionTableCell? {
      return R.nib.homeBrandsCollectionTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandsCollectionTableCell
    }

    static func homeCurrentOrderCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCurrentOrderCollectionCell? {
      return R.nib.homeCurrentOrderCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCurrentOrderCollectionCell
    }

    static func homeFoodItemCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFoodItemCollectionCell? {
      return R.nib.homeFoodItemCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFoodItemCollectionCell
    }

    static func homeFoodRestaurantTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFoodRestaurantTableCell? {
      return R.nib.homeFoodRestaurantTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFoodRestaurantTableCell
    }

    static func homeMenuCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMenuCollectionCell? {
      return R.nib.homeMenuCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMenuCollectionCell
    }

    static func homeMenuCollectionTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMenuCollectionTableCell? {
      return R.nib.homeMenuCollectionTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMenuCollectionTableCell
    }

    static func homeOffersHListTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOffersHListTableCell? {
      return R.nib.homeOffersHListTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOffersHListTableCell
    }

    static func homeProductCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeProductCell? {
      return R.nib.homeProductCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeProductCell
    }

    static func homeSearchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSearchCell? {
      return R.nib.homeSearchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSearchCell
    }

    static func homeSectionHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeSectionHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeServiceCategoriesTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceCategoriesTableCell? {
      return R.nib.homeServiceCategoriesTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceCategoriesTableCell
    }

    static func homeServiceCategoryCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceCategoryCollectionCell? {
      return R.nib.homeServiceCategoryCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceCategoryCollectionCell
    }

    static func homeSkeletonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSkeletonCell? {
      return R.nib.homeSkeletonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSkeletonCell
    }

    static func homeSupplierTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSupplierTableCell? {
      return R.nib.homeSupplierTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSupplierTableCell
    }

    static func jnjHomeHeaderTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JNJHomeHeaderTableCell? {
      return R.nib.jnjHomeHeaderTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JNJHomeHeaderTableCell
    }

    static func laundrySectionHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.laundrySectionHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func laundryServiceHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.laundryServiceHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loadMorePTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadMorePTableCell? {
      return R.nib.loadMorePTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMorePTableCell
    }

    static func mixedHomeLabelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeLabelCell? {
      return R.nib.mixedHomeLabelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeLabelCell
    }

    static func mixedHomeV2CategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2CategoryCell? {
      return R.nib.mixedHomeV2CategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2CategoryCell
    }

    static func mixedHomeV2DealCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2DealCell? {
      return R.nib.mixedHomeV2DealCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2DealCell
    }

    static func mixedHomeV2LabelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2LabelCell? {
      return R.nib.mixedHomeV2LabelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2LabelCell
    }

    static func moreTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreTableViewCell? {
      return R.nib.moreTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreTableViewCell
    }

    static func myCouponCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCouponCell? {
      return R.nib.myCouponCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCouponCell
    }

    static func myETokenCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyETokenCell? {
      return R.nib.myETokenCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyETokenCell
    }

    static func orderDeliveryDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDeliveryDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderImageCell? {
      return R.nib.orderImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderImageCell
    }

    static func orderParentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderParentCell? {
      return R.nib.orderParentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderParentCell
    }

    static func productCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCategoryCell? {
      return R.nib.productCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCategoryCell
    }

    static func productCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionCell? {
      return R.nib.productCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionCell
    }

    static func productInfoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.productInfoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func productListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductListCell? {
      return R.nib.productListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductListCell
    }

    static func productListingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductListingCell? {
      return R.nib.productListingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductListingCell
    }

    static func productView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.productView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func purchasedCouponTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PurchasedCouponTableCell? {
      return R.nib.purchasedCouponTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PurchasedCouponTableCell
    }

    static func receiverAtchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverAtchCell? {
      return R.nib.receiverAtchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverAtchCell
    }

    static func receiverImgCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverImgCell? {
      return R.nib.receiverImgCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverImgCell
    }

    static func receiverTxtCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverTxtCell? {
      return R.nib.receiverTxtCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverTxtCell
    }

    static func refreshControlView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.refreshControlView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func rentalHomeCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalHomeCollectionViewCell? {
      return R.nib.rentalHomeCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalHomeCollectionViewCell
    }

    static func rentalProductImagesCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalProductImagesCollectionViewCell? {
      return R.nib.rentalProductImagesCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalProductImagesCollectionViewCell
    }

    static func rentalProductSpecificationCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalProductSpecificationCollectionViewCell? {
      return R.nib.rentalProductSpecificationCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalProductSpecificationCollectionViewCell
    }

    static func rentalSupplierListingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalSupplierListingTableViewCell? {
      return R.nib.rentalSupplierListingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalSupplierListingTableViewCell
    }

    static func restaurantTableHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.restaurantTableHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func savedAddressTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavedAddressTableViewCell? {
      return R.nib.savedAddressTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavedAddressTableViewCell
    }

    static func senderAtchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderAtchCell? {
      return R.nib.senderAtchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderAtchCell
    }

    static func senderImgCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderImgCell? {
      return R.nib.senderImgCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderImgCell
    }

    static func senderTxtCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderTxtCell? {
      return R.nib.senderTxtCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderTxtCell
    }

    static func sideMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuCell? {
      return R.nib.sideMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuCell
    }

    static func sponsorView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sponsorView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func subCategoryListingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryListingCell? {
      return R.nib.subCategoryListingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryListingCell
    }

    static func supplierCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierCollectionCell? {
      return R.nib.supplierCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierCollectionCell
    }

    static func supplierInfoHeaderCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierInfoHeaderCollectionCell? {
      return R.nib.supplierInfoHeaderCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierInfoHeaderCollectionCell
    }

    static func supplierInfoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierInfoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierListingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierListingCell? {
      return R.nib.supplierListingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierListingCell
    }

    static func supplierRatingPopUp(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierRatingPopUp.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tempCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TempCollectionViewCell? {
      return R.nib.tempCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TempCollectionViewCell
    }

    static func travelPackagesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TravelPackagesTableViewCell? {
      return R.nib.travelPackagesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TravelPackagesTableViewCell
    }

    static func uploadImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UploadImageCollectionCell? {
      return R.nib.uploadImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UploadImageCollectionCell
    }

    static func uploadedDocCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UploadedDocTableViewCell? {
      return R.nib.uploadedDocCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UploadedDocTableViewCell
    }

    static func variantView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.variantView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func vehicleImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
      return R.nib.vehicleImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
    }

    static func vpAutoCompleteViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VPAutoCompleteViewCell? {
      return R.nib.vpAutoCompleteViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VPAutoCompleteViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 155 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddImageCell`.
    static let addImageCell: Rswift.ReuseIdentifier<AddImageCell> = Rswift.ReuseIdentifier(identifier: "AddImageCell")
    /// Reuse identifier `AgentListingTblCell`.
    static let agentListingTblCell: Rswift.ReuseIdentifier<AgentListingTblCell> = Rswift.ReuseIdentifier(identifier: "AgentListingTblCell")
    /// Reuse identifier `BannerParentCell`.
    static let bannerParentCell: Rswift.ReuseIdentifier<BannerParentCell> = Rswift.ReuseIdentifier(identifier: "BannerParentCell")
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `BrandETokenCell`.
    static let brandETokenCell: Rswift.ReuseIdentifier<BrandETokenCell> = Rswift.ReuseIdentifier(identifier: "BrandETokenCell")
    /// Reuse identifier `CalenderDateCell`.
    static let calenderDateCell: Rswift.ReuseIdentifier<CalenderDateCell> = Rswift.ReuseIdentifier(identifier: "CalenderDateCell")
    /// Reuse identifier `CardTVC`.
    static let cardTVC: Rswift.ReuseIdentifier<CardTVC> = Rswift.ReuseIdentifier(identifier: "CardTVC")
    /// Reuse identifier `CardTableViewCell`.
    static let cardTableViewCell: Rswift.ReuseIdentifier<CardTableViewCell> = Rswift.ReuseIdentifier(identifier: "CardTableViewCell")
    /// Reuse identifier `CardUICell`.
    static let cardUICell: Rswift.ReuseIdentifier<CardUICell> = Rswift.ReuseIdentifier(identifier: "CardUICell")
    /// Reuse identifier `CartBillCell`.
    static let cartBillCell: Rswift.ReuseIdentifier<CartBillCell> = Rswift.ReuseIdentifier(identifier: "CartBillCell")
    /// Reuse identifier `CartQuestionCell`.
    static let cartQuestionCell: Rswift.ReuseIdentifier<CartQuestionCell> = Rswift.ReuseIdentifier(identifier: "CartQuestionCell")
    /// Reuse identifier `CategorySelectionCell`.
    static let categorySelectionCell: Rswift.ReuseIdentifier<CategorySelectionCell> = Rswift.ReuseIdentifier(identifier: "CategorySelectionCell")
    /// Reuse identifier `CategoryTableViewCell`.
    static let categoryTableViewCell: Rswift.ReuseIdentifier<CategoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "CategoryTableViewCell")
    /// Reuse identifier `CellIdentifier`.
    static let cellIdentifier: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "CellIdentifier")
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "Cell")
    /// Reuse identifier `CheckListCell`.
    static let checkListCell: Rswift.ReuseIdentifier<CheckListCell> = Rswift.ReuseIdentifier(identifier: "CheckListCell")
    /// Reuse identifier `CheckListOrderCell`.
    static let checkListOrderCell: Rswift.ReuseIdentifier<CheckListOrderCell> = Rswift.ReuseIdentifier(identifier: "CheckListOrderCell")
    /// Reuse identifier `CompareProductsCell`.
    static let compareProductsCell: Rswift.ReuseIdentifier<CompareProductsCell> = Rswift.ReuseIdentifier(identifier: "CompareProductsCell")
    /// Reuse identifier `ContactCell`.
    static let contactCell: Rswift.ReuseIdentifier<ContactCell> = Rswift.ReuseIdentifier(identifier: "ContactCell")
    /// Reuse identifier `CustomHeaderCell`.
    static let customHeaderCell: Rswift.ReuseIdentifier<CustomHeaderCell> = Rswift.ReuseIdentifier(identifier: "CustomHeaderCell")
    /// Reuse identifier `DeliveryAddressCell`.
    static let deliveryAddressCell: Rswift.ReuseIdentifier<DeliveryAddressCell> = Rswift.ReuseIdentifier(identifier: "DeliveryAddressCell")
    /// Reuse identifier `DeliveryAddressCollectionCell`.
    static let deliveryAddressCollectionCell: Rswift.ReuseIdentifier<DeliveryAddressCollectionCell> = Rswift.ReuseIdentifier(identifier: "DeliveryAddressCollectionCell")
    /// Reuse identifier `DeliveryLocationTblCell`.
    static let deliveryLocationTblCell: Rswift.ReuseIdentifier<DeliveryLocationTblCell> = Rswift.ReuseIdentifier(identifier: "DeliveryLocationTblCell")
    /// Reuse identifier `DeliverySpeedCell`.
    static let deliverySpeedCell: Rswift.ReuseIdentifier<DeliverySpeedCell> = Rswift.ReuseIdentifier(identifier: "DeliverySpeedCell")
    /// Reuse identifier `DoctorCategoryCollectionCell`.
    static let doctorCategoryCollectionCell: Rswift.ReuseIdentifier<DoctorCategoryCollectionCell> = Rswift.ReuseIdentifier(identifier: "DoctorCategoryCollectionCell")
    /// Reuse identifier `DoctorCategoryParentCell`.
    static let doctorCategoryParentCell: Rswift.ReuseIdentifier<DoctorCategoryParentCell> = Rswift.ReuseIdentifier(identifier: "DoctorCategoryParentCell")
    /// Reuse identifier `DoctorHomeParentCell`.
    static let doctorHomeParentCell: Rswift.ReuseIdentifier<DoctorHomeParentCell> = Rswift.ReuseIdentifier(identifier: "DoctorHomeParentCell")
    /// Reuse identifier `DoctorHomeProductCell`.
    static let doctorHomeProductCell: Rswift.ReuseIdentifier<DoctorHomeProductCell> = Rswift.ReuseIdentifier(identifier: "DoctorHomeProductCell")
    /// Reuse identifier `DrinkingWaterCell`.
    static let drinkingWaterCell: Rswift.ReuseIdentifier<DrinkingWaterCell> = Rswift.ReuseIdentifier(identifier: "DrinkingWaterCell")
    /// Reuse identifier `ETokenOfferCell`.
    static let eTokenOfferCell: Rswift.ReuseIdentifier<ETokenOfferCell> = Rswift.ReuseIdentifier(identifier: "ETokenOfferCell")
    /// Reuse identifier `ETokenPurchasedCell`.
    static let eTokenPurchasedCell: Rswift.ReuseIdentifier<ETokenPurchasedCell> = Rswift.ReuseIdentifier(identifier: "ETokenPurchasedCell")
    /// Reuse identifier `ETokenPurchasedTableCell`.
    static let eTokenPurchasedTableCell: Rswift.ReuseIdentifier<ETokenPurchasedTableCell> = Rswift.ReuseIdentifier(identifier: "ETokenPurchasedTableCell")
    /// Reuse identifier `ETokenTableCell`.
    static let eTokenTableCell: Rswift.ReuseIdentifier<ETokenTableCell> = Rswift.ReuseIdentifier(identifier: "ETokenTableCell")
    /// Reuse identifier `ETokenToBuyCell`.
    static let eTokenToBuyCell: Rswift.ReuseIdentifier<ETokenToBuyCell> = Rswift.ReuseIdentifier(identifier: "ETokenToBuyCell")
    /// Reuse identifier `FavoritesCell`.
    static let favoritesCell: Rswift.ReuseIdentifier<FavoritesCell> = Rswift.ReuseIdentifier(identifier: "FavoritesCell")
    /// Reuse identifier `FilterCell`.
    static let filterCell: Rswift.ReuseIdentifier<FilterCell> = Rswift.ReuseIdentifier(identifier: "FilterCell")
    /// Reuse identifier `FilterOptionCell`.
    static let filterOptionCell: Rswift.ReuseIdentifier<FilterOptionCell> = Rswift.ReuseIdentifier(identifier: "FilterOptionCell")
    /// Reuse identifier `FilterSearchCell`.
    static let filterSearchCell: Rswift.ReuseIdentifier<FilterSearchCell> = Rswift.ReuseIdentifier(identifier: "FilterSearchCell")
    /// Reuse identifier `FilterSliderCell`.
    static let filterSliderCell: Rswift.ReuseIdentifier<FilterSliderCell> = Rswift.ReuseIdentifier(identifier: "FilterSliderCell")
    /// Reuse identifier `FilterSubSubCategeoryTblVwCell`.
    static let filterSubSubCategeoryTblVwCell: Rswift.ReuseIdentifier<FilterSubSubCategeoryTblVwCell> = Rswift.ReuseIdentifier(identifier: "FilterSubSubCategeoryTblVwCell")
    /// Reuse identifier `FilterSubcategoryTableViewCell`.
    static let filterSubcategoryTableViewCell: Rswift.ReuseIdentifier<FilterSubcategoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterSubcategoryTableViewCell")
    /// Reuse identifier `FilterTableViewSortedCell`.
    static let filterTableViewSortedCell: Rswift.ReuseIdentifier<FilterTableViewSortedCell> = Rswift.ReuseIdentifier(identifier: "FilterTableViewSortedCell")
    /// Reuse identifier `FilterTableViewYesNoCell`.
    static let filterTableViewYesNoCell: Rswift.ReuseIdentifier<FilterTableViewSortedCell> = Rswift.ReuseIdentifier(identifier: "FilterTableViewYesNoCell")
    /// Reuse identifier `FlickeringRestMenuCell`.
    static let flickeringRestMenuCell: Rswift.ReuseIdentifier<FlickeringRestMenuCell> = Rswift.ReuseIdentifier(identifier: "FlickeringRestMenuCell")
    /// Reuse identifier `HomeBrandCollectionCell`.
    static let homeBrandCollectionCell: Rswift.ReuseIdentifier<HomeBrandCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeBrandCollectionCell")
    /// Reuse identifier `HomeBrandsCollectionTableCell`.
    static let homeBrandsCollectionTableCell: Rswift.ReuseIdentifier<HomeBrandsCollectionTableCell> = Rswift.ReuseIdentifier(identifier: "HomeBrandsCollectionTableCell")
    /// Reuse identifier `HomeFoodItemCollectionCell`.
    static let homeFoodItemCollectionCell: Rswift.ReuseIdentifier<HomeFoodItemCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeFoodItemCollectionCell")
    /// Reuse identifier `HomeMenuCollectionCell`.
    static let homeMenuCollectionCell: Rswift.ReuseIdentifier<HomeMenuCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeMenuCollectionCell")
    /// Reuse identifier `HomeMenuCollectionTableCell`.
    static let homeMenuCollectionTableCell: Rswift.ReuseIdentifier<HomeMenuCollectionTableCell> = Rswift.ReuseIdentifier(identifier: "HomeMenuCollectionTableCell")
    /// Reuse identifier `HomeOffersHListTableCell`.
    static let homeOffersHListTableCell: Rswift.ReuseIdentifier<HomeOffersHListTableCell> = Rswift.ReuseIdentifier(identifier: "HomeOffersHListTableCell")
    /// Reuse identifier `HomeProductCell`.
    static let homeProductCell: Rswift.ReuseIdentifier<HomeProductCell> = Rswift.ReuseIdentifier(identifier: "HomeProductCell")
    /// Reuse identifier `HomeProductParentCell`.
    static let homeProductParentCell: Rswift.ReuseIdentifier<HomeProductParentCell> = Rswift.ReuseIdentifier(identifier: "HomeProductParentCell")
    /// Reuse identifier `HomeSearchCell`.
    static let homeSearchCell: Rswift.ReuseIdentifier<HomeSearchCell> = Rswift.ReuseIdentifier(identifier: "HomeSearchCell")
    /// Reuse identifier `HomeServiceCategoriesTableCell`.
    static let homeServiceCategoriesTableCell: Rswift.ReuseIdentifier<HomeServiceCategoriesTableCell> = Rswift.ReuseIdentifier(identifier: "HomeServiceCategoriesTableCell")
    /// Reuse identifier `HomeSkeletonCell`.
    static let homeSkeletonCell: Rswift.ReuseIdentifier<HomeSkeletonCell> = Rswift.ReuseIdentifier(identifier: "HomeSkeletonCell")
    /// Reuse identifier `HomeSupplierTableCell`.
    static let homeSupplierTableCell: Rswift.ReuseIdentifier<HomeSupplierTableCell> = Rswift.ReuseIdentifier(identifier: "HomeSupplierTableCell")
    /// Reuse identifier `LaundryProductCell`.
    static let laundryProductCell: Rswift.ReuseIdentifier<LaundryProductCell> = Rswift.ReuseIdentifier(identifier: "LaundryProductCell")
    /// Reuse identifier `LiveSupportMyCell`.
    static let liveSupportMyCell: Rswift.ReuseIdentifier<LiveSupportChatCell> = Rswift.ReuseIdentifier(identifier: "LiveSupportMyCell")
    /// Reuse identifier `LiveSupportOtherCell`.
    static let liveSupportOtherCell: Rswift.ReuseIdentifier<LiveSupportChatCell> = Rswift.ReuseIdentifier(identifier: "LiveSupportOtherCell")
    /// Reuse identifier `LocationResultCell`.
    static let locationResultCell: Rswift.ReuseIdentifier<LocationResultCell> = Rswift.ReuseIdentifier(identifier: "LocationResultCell")
    /// Reuse identifier `LocationTableCell`.
    static let locationTableCell: Rswift.ReuseIdentifier<LocationTableCell> = Rswift.ReuseIdentifier(identifier: "LocationTableCell")
    /// Reuse identifier `LocationTableViewCell`.
    static let locationTableViewCell: Rswift.ReuseIdentifier<LocationTableViewCell> = Rswift.ReuseIdentifier(identifier: "LocationTableViewCell")
    /// Reuse identifier `LoyalityPointsCell`.
    static let loyalityPointsCell: Rswift.ReuseIdentifier<LoyalityPointsCell> = Rswift.ReuseIdentifier(identifier: "LoyalityPointsCell")
    /// Reuse identifier `LoyalityPointsHeader`.
    static let loyalityPointsHeader: Rswift.ReuseIdentifier<LoyalityPointsHeader> = Rswift.ReuseIdentifier(identifier: "LoyalityPointsHeader")
    /// Reuse identifier `MixedHomeBannerCell`.
    static let mixedHomeBannerCell: Rswift.ReuseIdentifier<MixedHomeBannerCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeBannerCell")
    /// Reuse identifier `MixedHomeCollectionCell`.
    static let mixedHomeCollectionCell: Rswift.ReuseIdentifier<MixedHomeCollectionCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeCollectionCell")
    /// Reuse identifier `MixedHomeLabelCell`.
    static let mixedHomeLabelCell: Rswift.ReuseIdentifier<MixedHomeLabelCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeLabelCell")
    /// Reuse identifier `MixedHomeV2CategoryCell`.
    static let mixedHomeV2CategoryCell: Rswift.ReuseIdentifier<MixedHomeV2CategoryCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeV2CategoryCell")
    /// Reuse identifier `MixedHomeV2DealCell`.
    static let mixedHomeV2DealCell: Rswift.ReuseIdentifier<MixedHomeV2DealCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeV2DealCell")
    /// Reuse identifier `MixedHomeV2LabelCell`.
    static let mixedHomeV2LabelCell: Rswift.ReuseIdentifier<MixedHomeV2LabelCell> = Rswift.ReuseIdentifier(identifier: "MixedHomeV2LabelCell")
    /// Reuse identifier `MyETokenCell`.
    static let myETokenCell: Rswift.ReuseIdentifier<MyETokenCell> = Rswift.ReuseIdentifier(identifier: "MyETokenCell")
    /// Reuse identifier `MyReviewCell`.
    static let myReviewCell: Rswift.ReuseIdentifier<MyReviewCell> = Rswift.ReuseIdentifier(identifier: "MyReviewCell")
    /// Reuse identifier `NoticeboardTableCell`.
    static let noticeboardTableCell: Rswift.ReuseIdentifier<NoticeboardTableCell> = Rswift.ReuseIdentifier(identifier: "NoticeboardTableCell")
    /// Reuse identifier `NotificationsCell`.
    static let notificationsCell: Rswift.ReuseIdentifier<NotificationsCell> = Rswift.ReuseIdentifier(identifier: "NotificationsCell")
    /// Reuse identifier `OnboardingCollectionViewCell`.
    static let onboardingCollectionViewCell: Rswift.ReuseIdentifier<OnboardingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "OnboardingCollectionViewCell")
    /// Reuse identifier `OrderBillCell`.
    static let orderBillCell: Rswift.ReuseIdentifier<OrderBillCell> = Rswift.ReuseIdentifier(identifier: "OrderBillCell")
    /// Reuse identifier `OrderDetailCell`.
    static let orderDetailCell: Rswift.ReuseIdentifier<OrderDetailCell> = Rswift.ReuseIdentifier(identifier: "OrderDetailCell")
    /// Reuse identifier `OrderImageCell`.
    static let orderImageCell: Rswift.ReuseIdentifier<OrderImageCell> = Rswift.ReuseIdentifier(identifier: "OrderImageCell")
    /// Reuse identifier `OrderParentCell`.
    static let orderParentCell: Rswift.ReuseIdentifier<OrderParentCell> = Rswift.ReuseIdentifier(identifier: "OrderParentCell")
    /// Reuse identifier `OrderStatusCell`.
    static let orderStatusCell: Rswift.ReuseIdentifier<OrderStatusCell> = Rswift.ReuseIdentifier(identifier: "OrderStatusCell")
    /// Reuse identifier `OrderSummaryCell`.
    static let orderSummaryCell: Rswift.ReuseIdentifier<OrderSummaryCell> = Rswift.ReuseIdentifier(identifier: "OrderSummaryCell")
    /// Reuse identifier `OtherReviewCell`.
    static let otherReviewCell: Rswift.ReuseIdentifier<OtherReviewCell> = Rswift.ReuseIdentifier(identifier: "OtherReviewCell")
    /// Reuse identifier `PhoneNumberTableViewCell`.
    static let phoneNumberTableViewCell: Rswift.ReuseIdentifier<PhoneNumberTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhoneNumberTableViewCell")
    /// Reuse identifier `PickupDateCell`.
    static let pickupDateCell: Rswift.ReuseIdentifier<PickupDateCell> = Rswift.ReuseIdentifier(identifier: "PickupDateCell")
    /// Reuse identifier `PlacesSavedCell`.
    static let placesSavedCell: Rswift.ReuseIdentifier<PlacesSavedCell> = Rswift.ReuseIdentifier(identifier: "PlacesSavedCell")
    /// Reuse identifier `PrescriptionRequestCell`.
    static let prescriptionRequestCell: Rswift.ReuseIdentifier<PrescriptionRequestCell> = Rswift.ReuseIdentifier(identifier: "PrescriptionRequestCell")
    /// Reuse identifier `PriceRangeTableViewCell`.
    static let priceRangeTableViewCell: Rswift.ReuseIdentifier<PriceRangeTableViewCell> = Rswift.ReuseIdentifier(identifier: "PriceRangeTableViewCell")
    /// Reuse identifier `ProductCategoryCell`.
    static let productCategoryCell: Rswift.ReuseIdentifier<ProductCategoryCell> = Rswift.ReuseIdentifier(identifier: "ProductCategoryCell")
    /// Reuse identifier `ProductCollectionCell`.
    static let productCollectionCell: Rswift.ReuseIdentifier<ProductCollectionCell> = Rswift.ReuseIdentifier(identifier: "ProductCollectionCell")
    /// Reuse identifier `ProductDetailFirstCell`.
    static let productDetailFirstCell: Rswift.ReuseIdentifier<ProductDetailFirstCell> = Rswift.ReuseIdentifier(identifier: "ProductDetailFirstCell")
    /// Reuse identifier `ProductHeaderView`.
    static let productHeaderView: Rswift.ReuseIdentifier<ProductHeaderView> = Rswift.ReuseIdentifier(identifier: "ProductHeaderView")
    /// Reuse identifier `ProductListCell`.
    static let productListCell: Rswift.ReuseIdentifier<ProductListCell> = Rswift.ReuseIdentifier(identifier: "ProductListCell")
    /// Reuse identifier `ProductListingCell`.
    static let productListingCell: Rswift.ReuseIdentifier<ProductListingCell> = Rswift.ReuseIdentifier(identifier: "ProductListingCell")
    /// Reuse identifier `ProfileViewCell`.
    static let profileViewCell: Rswift.ReuseIdentifier<ProfileViewCell> = Rswift.ReuseIdentifier(identifier: "ProfileViewCell")
    /// Reuse identifier `PromoCodeTableViewCell`.
    static let promoCodeTableViewCell: Rswift.ReuseIdentifier<PromoCodeTableViewCell> = Rswift.ReuseIdentifier(identifier: "PromoCodeTableViewCell")
    /// Reuse identifier `PromotionsCell`.
    static let promotionsCell: Rswift.ReuseIdentifier<PromotionsCell> = Rswift.ReuseIdentifier(identifier: "PromotionsCell")
    /// Reuse identifier `PurchasedCouponTableCell`.
    static let purchasedCouponTableCell: Rswift.ReuseIdentifier<PurchasedCouponTableCell> = Rswift.ReuseIdentifier(identifier: "PurchasedCouponTableCell")
    /// Reuse identifier `QuestionCell`.
    static let questionCell: Rswift.ReuseIdentifier<QuestionCell> = Rswift.ReuseIdentifier(identifier: "QuestionCell")
    /// Reuse identifier `RateReviewCell`.
    static let rateReviewCell: Rswift.ReuseIdentifier<RateReviewCell> = Rswift.ReuseIdentifier(identifier: "RateReviewCell")
    /// Reuse identifier `RatingHeaderCell`.
    static let ratingHeaderCell: Rswift.ReuseIdentifier<RatingHeaderCell> = Rswift.ReuseIdentifier(identifier: "RatingHeaderCell")
    /// Reuse identifier `RatingReviewTblCell`.
    static let ratingReviewTblCell: Rswift.ReuseIdentifier<RatingReviewTblCell> = Rswift.ReuseIdentifier(identifier: "RatingReviewTblCell")
    /// Reuse identifier `ReceiverAtchCell`.
    static let receiverAtchCell: Rswift.ReuseIdentifier<ReceiverAtchCell> = Rswift.ReuseIdentifier(identifier: "ReceiverAtchCell")
    /// Reuse identifier `ReceiverImgCell`.
    static let receiverImgCell: Rswift.ReuseIdentifier<ReceiverImgCell> = Rswift.ReuseIdentifier(identifier: "ReceiverImgCell")
    /// Reuse identifier `ReceiverTxtCell`.
    static let receiverTxtCell: Rswift.ReuseIdentifier<ReceiverTxtCell> = Rswift.ReuseIdentifier(identifier: "ReceiverTxtCell")
    /// Reuse identifier `ReferredUserTableViewCell`.
    static let referredUserTableViewCell: Rswift.ReuseIdentifier<ReferredUserTableViewCell> = Rswift.ReuseIdentifier(identifier: "ReferredUserTableViewCell")
    /// Reuse identifier `SearchTableCell`.
    static let searchTableCell: Rswift.ReuseIdentifier<SearchTableCell> = Rswift.ReuseIdentifier(identifier: "SearchTableCell")
    /// Reuse identifier `SectionHeader`.
    static let sectionHeader: Rswift.ReuseIdentifier<SectionHeader> = Rswift.ReuseIdentifier(identifier: "SectionHeader")
    /// Reuse identifier `SelectBrandCell`.
    static let selectBrandCell: Rswift.ReuseIdentifier<SelectBrandCell> = Rswift.ReuseIdentifier(identifier: "SelectBrandCell")
    /// Reuse identifier `SelectionCell`.
    static let selectionCell: Rswift.ReuseIdentifier<SelectionCell> = Rswift.ReuseIdentifier(identifier: "SelectionCell")
    /// Reuse identifier `SenderAtchCell`.
    static let senderAtchCell: Rswift.ReuseIdentifier<SenderAtchCell> = Rswift.ReuseIdentifier(identifier: "SenderAtchCell")
    /// Reuse identifier `SenderImgCell`.
    static let senderImgCell: Rswift.ReuseIdentifier<SenderImgCell> = Rswift.ReuseIdentifier(identifier: "SenderImgCell")
    /// Reuse identifier `SenderTxtCell`.
    static let senderTxtCell: Rswift.ReuseIdentifier<SenderTxtCell> = Rswift.ReuseIdentifier(identifier: "SenderTxtCell")
    /// Reuse identifier `ServiceCell`.
    static let serviceCell: Rswift.ReuseIdentifier<ServiceCell> = Rswift.ReuseIdentifier(identifier: "ServiceCell")
    /// Reuse identifier `ServiceTypeCellCat`.
    static let serviceTypeCellCat: Rswift.ReuseIdentifier<ServiceTypeCell> = Rswift.ReuseIdentifier(identifier: "ServiceTypeCellCat")
    /// Reuse identifier `ServiceTypeCellFood`.
    static let serviceTypeCellFood: Rswift.ReuseIdentifier<ServiceTypeCell> = Rswift.ReuseIdentifier(identifier: "ServiceTypeCellFood")
    /// Reuse identifier `ServiceTypeCell`.
    static let serviceTypeCell: Rswift.ReuseIdentifier<ServiceTypeCell> = Rswift.ReuseIdentifier(identifier: "ServiceTypeCell")
    /// Reuse identifier `ServiceTypeParentCell`.
    static let serviceTypeParentCell: Rswift.ReuseIdentifier<ServiceTypeParentCell> = Rswift.ReuseIdentifier(identifier: "ServiceTypeParentCell")
    /// Reuse identifier `SettingsCell`.
    static let settingsCell: Rswift.ReuseIdentifier<SettingsCell> = Rswift.ReuseIdentifier(identifier: "SettingsCell")
    /// Reuse identifier `ShowTipCollectionViewCell`.
    static let showTipCollectionViewCell: Rswift.ReuseIdentifier<ShowTipCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ShowTipCollectionViewCell")
    /// Reuse identifier `SideMenuCell`.
    static let sideMenuCell: Rswift.ReuseIdentifier<SideMenuCell> = Rswift.ReuseIdentifier(identifier: "SideMenuCell")
    /// Reuse identifier `StoryClcCell`.
    static let storyClcCell: Rswift.ReuseIdentifier<StoryClcCell> = Rswift.ReuseIdentifier(identifier: "StoryClcCell")
    /// Reuse identifier `SubCategoryListingCell`.
    static let subCategoryListingCell: Rswift.ReuseIdentifier<SubCategoryListingCell> = Rswift.ReuseIdentifier(identifier: "SubCategoryListingCell")
    /// Reuse identifier `SupplierCollectionCell`.
    static let supplierCollectionCell: Rswift.ReuseIdentifier<SupplierCollectionCell> = Rswift.ReuseIdentifier(identifier: "SupplierCollectionCell")
    /// Reuse identifier `SupplierDescriptionCell`.
    static let supplierDescriptionCell: Rswift.ReuseIdentifier<SupplierDescriptionCell> = Rswift.ReuseIdentifier(identifier: "SupplierDescriptionCell")
    /// Reuse identifier `SupplierInfoCell`.
    static let supplierInfoCell: Rswift.ReuseIdentifier<SupplierInfoCell> = Rswift.ReuseIdentifier(identifier: "SupplierInfoCell")
    /// Reuse identifier `SupplierInfoHeaderCollectionCell`.
    static let supplierInfoHeaderCollectionCell: Rswift.ReuseIdentifier<SupplierInfoHeaderCollectionCell> = Rswift.ReuseIdentifier(identifier: "SupplierInfoHeaderCollectionCell")
    /// Reuse identifier `SupplierInfoTabCell`.
    static let supplierInfoTabCell: Rswift.ReuseIdentifier<SupplierInfoTabCell> = Rswift.ReuseIdentifier(identifier: "SupplierInfoTabCell")
    /// Reuse identifier `SupplierListingCell`.
    static let supplierListingCell: Rswift.ReuseIdentifier<SupplierListingCell> = Rswift.ReuseIdentifier(identifier: "SupplierListingCell")
    /// Reuse identifier `SupportOption`.
    static let supportOption: Rswift.ReuseIdentifier<SupportOption> = Rswift.ReuseIdentifier(identifier: "SupportOption")
    /// Reuse identifier `TableListingTVC`.
    static let tableListingTVC: Rswift.ReuseIdentifier<TableListingTVC> = Rswift.ReuseIdentifier(identifier: "TableListingTVC")
    /// Reuse identifier `TableSectionHeader`.
    static let tableSectionHeader: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "TableSectionHeader")
    /// Reuse identifier `TempCollectionViewCell`.
    static let tempCollectionViewCell: Rswift.ReuseIdentifier<TempCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TempCollectionViewCell")
    /// Reuse identifier `TimeAndDateCell`.
    static let timeAndDateCell: Rswift.ReuseIdentifier<TimeAndDateCell> = Rswift.ReuseIdentifier(identifier: "TimeAndDateCell")
    /// Reuse identifier `TimeSlotCell`.
    static let timeSlotCell: Rswift.ReuseIdentifier<TimeSlotCell> = Rswift.ReuseIdentifier(identifier: "TimeSlotCell")
    /// Reuse identifier `TravelPackagesCell`.
    static let travelPackagesCell: Rswift.ReuseIdentifier<TravelPackagesTableViewCell> = Rswift.ReuseIdentifier(identifier: "TravelPackagesCell")
    /// Reuse identifier `UploadImageCollectionCell`.
    static let uploadImageCollectionCell: Rswift.ReuseIdentifier<UploadImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "UploadImageCollectionCell")
    /// Reuse identifier `UploadedDocCell`.
    static let uploadedDocCell: Rswift.ReuseIdentifier<UploadedDocTableViewCell> = Rswift.ReuseIdentifier(identifier: "UploadedDocCell")
    /// Reuse identifier `VPAutoCompleteViewCell`.
    static let vpAutoCompleteViewCell: Rswift.ReuseIdentifier<VPAutoCompleteViewCell> = Rswift.ReuseIdentifier(identifier: "VPAutoCompleteViewCell")
    /// Reuse identifier `VairantTableViewCell`.
    static let vairantTableViewCell: Rswift.ReuseIdentifier<VairantTableViewCell> = Rswift.ReuseIdentifier(identifier: "VairantTableViewCell")
    /// Reuse identifier `VariantCollectionViewCell`.
    static let variantCollectionViewCell: Rswift.ReuseIdentifier<VariantCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VariantCollectionViewCell")
    /// Reuse identifier `VehicleImageCollectionCell`.
    static let vehicleImageCollectionCell: Rswift.ReuseIdentifier<UIKit.UICollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VehicleImageCollectionCell")
    /// Reuse identifier `VehicleTypeTableViewCell`.
    static let vehicleTypeTableViewCell: Rswift.ReuseIdentifier<VehicleTypeTableViewCell> = Rswift.ReuseIdentifier(identifier: "VehicleTypeTableViewCell")
    /// Reuse identifier `WalkThroughCell`.
    static let walkThroughCell: Rswift.ReuseIdentifier<WalkThroughCell> = Rswift.ReuseIdentifier(identifier: "WalkThroughCell")
    /// Reuse identifier `WalkthroughCollectionViewCell`.
    static let walkthroughCollectionViewCell: Rswift.ReuseIdentifier<WalkthroughCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "WalkthroughCollectionViewCell")
    /// Reuse identifier `WalletTableCell`.
    static let walletTableCell: Rswift.ReuseIdentifier<WalletTableCell> = Rswift.ReuseIdentifier(identifier: "WalletTableCell")
    /// Reuse identifier `chatImageLeftCell`.
    static let chatImageLeftCell: Rswift.ReuseIdentifier<chatImageLeftCell> = Rswift.ReuseIdentifier(identifier: "chatImageLeftCell")
    /// Reuse identifier `chatImgeRightTVC`.
    static let chatImgeRightTVC: Rswift.ReuseIdentifier<chatImgeRightTVC> = Rswift.ReuseIdentifier(identifier: "chatImgeRightTVC")
    /// Reuse identifier `chatLeftTVC`.
    static let chatLeftTVC: Rswift.ReuseIdentifier<chatLeftTVC> = Rswift.ReuseIdentifier(identifier: "chatLeftTVC")
    /// Reuse identifier `chatRightTVC`.
    static let chatRightTVC: Rswift.ReuseIdentifier<chatRightTVC> = Rswift.ReuseIdentifier(identifier: "chatRightTVC")
    /// Reuse identifier `chatTimeHeaderTVC`.
    static let chatTimeHeaderTVC: Rswift.ReuseIdentifier<chatTimeHeaderTVC> = Rswift.ReuseIdentifier(identifier: "chatTimeHeaderTVC")
    /// Reuse identifier `countryCodeCell`.
    static let countryCodeCell: Rswift.ReuseIdentifier<TableViewCellCountryCode> = Rswift.ReuseIdentifier(identifier: "countryCodeCell")
    /// Reuse identifier `eTokenCellPurchased`.
    static let eTokenCellPurchased: Rswift.ReuseIdentifier<eTokenCellPurchased> = Rswift.ReuseIdentifier(identifier: "eTokenCellPurchased")
    /// Reuse identifier `eTokenCellToBuy`.
    static let eTokenCellToBuy: Rswift.ReuseIdentifier<eTokenCellToBuy> = Rswift.ReuseIdentifier(identifier: "eTokenCellToBuy")
    /// Reuse identifier `footer`.
    static let footer: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "footer")
    /// Reuse identifier `my`.
    static let my: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "my")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 19 localization tables.
  struct string {
    /// This `R.string.bookService` struct is generated, and contains static references to 281 localization keys.
    struct bookService {
      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static let eSHWuIduText = Rswift.StringResource(key: "eSH-wu-Idu.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static let vSxYFIfDText = Rswift.StringResource(key: "vSx-YF-IfD.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static let vywXEFBoText = Rswift.StringResource(key: "vyw-xE-fBo.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static let xjKPXP31Text = Rswift.StringResource(key: "XjK-pX-P31.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation:     
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let yLhXFZvWText = Rswift.StringResource(key: "yLh-xF-ZvW.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation:  km
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let f3FT1BvwText = Rswift.StringResource(key: "F3F-t1-bvw.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: $ 0.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bjYLeVSHText = Rswift.StringResource(key: "bjY-Le-vSH.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: $ 0.02
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let hLDF3OopText = Rswift.StringResource(key: "hLD-F3-Oop.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: $ 0.1
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let mz0A0Xd7Text = Rswift.StringResource(key: "Mz0-A0-xd7.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: $ 0.6
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let ni2LWBrvText = Rswift.StringResource(key: "ni2-LW-Brv.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: $ 0.8
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let hBbKwFbQText = Rswift.StringResource(key: "HBb-Kw-FbQ.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static let dlkjzq7rText = Rswift.StringResource(key: "DLK-JZ-q7r.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static let w6PFMGeText = Rswift.StringResource(key: "5w6-pF-MGe.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static let yEjKp93nText = Rswift.StringResource(key: "YEj-kp-93n.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let soqBzPRvText = Rswift.StringResource(key: "Soq-Bz-pRv.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ylLKXJeyText = Rswift.StringResource(key: "YlL-KX-Jey.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let pk25BJqRText = Rswift.StringResource(key: "pk2-5B-JqR.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: (Sector 29, chandigarh)
      ///
      /// Locales: en, ta-LK, si-LK
      static let zrHFhTmeText = Rswift.StringResource(key: "ZrH-fh-Tme.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: + Per km
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bkYUJFPbText = Rswift.StringResource(key: "bkY-UJ-FPb.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: + Per minute
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let p3YXcVkQText = Rswift.StringResource(key: "P3Y-xc-VkQ.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let b8kWIKjhText = Rswift.StringResource(key: "b8k-wI-Kjh.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let edsXcPbGText = Rswift.StringResource(key: "Eds-xc-pbG.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let zv07wYcAText = Rswift.StringResource(key: "Zv0-7w-ycA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let h4JYhKRUText = Rswift.StringResource(key: "h4J-Yh-kRU.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let mpLKD2ttText = Rswift.StringResource(key: "mpL-KD-2tt.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 0 Mins
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kq1TcYb2Text = Rswift.StringResource(key: "kq1-tc-Yb2.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 0 OMR
      ///
      /// Locales: en, ta-LK, si-LK
      static let mMgP9EWlText = Rswift.StringResource(key: "mMg-P9-EWl.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: 0.0 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let wxV6aQENText = Rswift.StringResource(key: "wxV-6a-qEN.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 0.00
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let kjsobcoText = Rswift.StringResource(key: "1KJ-sO-bCO.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 0.00 OMR
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let jeoWNNSsText = Rswift.StringResource(key: "jeo-WN-NSs.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 0.00 OMR
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let lAw5dGVMText = Rswift.StringResource(key: "lAw-5d-gVM.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 140 - 160
      ///
      /// Locales: en, ta-LK, si-LK
      static let eQmKsSk4Text = Rswift.StringResource(key: "eQm-Ks-sk4.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: 140 - 160
      ///
      /// Locales: en, ta-LK, si-LK
      static let t6J71GYuText = Rswift.StringResource(key: "T6J-71-gYu.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: 140 - 160
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dtIOHK28Text = Rswift.StringResource(key: "DtI-oH-k28.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 140 - 160
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let sQyLHUjAText = Rswift.StringResource(key: "SQy-lH-UjA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 4 gallon of water  qunatity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let waNhHosText = Rswift.StringResource(key: "3Wa-nh-Hos.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 4.9
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, ja, nl, ja, sq
      static let iizsFj1Text = Rswift.StringResource(key: "6II-ZS-fj1.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 4.9
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, ja, nl, ja, sq
      static let sXHYAZjzText = Rswift.StringResource(key: "sXH-YA-zjz.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: 8888855555
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let b1TOfVuBText = Rswift.StringResource(key: "B1T-Of-vuB.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: AED 300
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let wg3PILhfText = Rswift.StringResource(key: "Wg3-pI-Lhf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: APPLY
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let mJQ1l84qNormalTitle = Rswift.StringResource(key: "mJQ-1l-84q.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: APPLY
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let pIuTeAFENormalTitle = Rswift.StringResource(key: "pIu-te-aFE.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: APPLY PROMO CODE
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dkzbtnGrNormalTitle = Rswift.StringResource(key: "DKZ-bT-NGr.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ASAP
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let soWr2NsText = Rswift.StringResource(key: "8SO-wr-2Ns.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Add More Details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let iaX9M7z0NormalTitle = Rswift.StringResource(key: "IaX-9M-7z0.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Add phone number or direct add from your list
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let iobHFH4LText = Rswift.StringResource(key: "Iob-hF-h4L.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Additional waiting time charges may apply to your trip if the driver has waited 5 minutes: $0.05 per minute.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let enPWgDX6Text = Rswift.StringResource(key: "EnP-wg-dX6.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bhvYQ0wcText = Rswift.StringResource(key: "Bhv-yQ-0wc.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let fGBfIhOText = Rswift.StringResource(key: "5fG-bf-IhO.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Amount to be paid
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let umcRFWePText = Rswift.StringResource(key: "Umc-RF-weP.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Ankush
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xv1AKBf6Text = Rswift.StringResource(key: "XV1-aK-bf6.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Apply Promo Code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let goYItYHzText = Rswift.StringResource(key: "goY-it-YHz.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Aquafina
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let oXjFbBW8Text = Rswift.StringResource(key: "OXj-fb-BW8.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Available Promo codes
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let nleio9o9Text = Rswift.StringResource(key: "NLE-iO-9o9.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ta-LK, si-LK
      static let la4NgCINNormalTitle = Rswift.StringResource(key: "LA4-Ng-CIN.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let aD8iJMeNormalTitle = Rswift.StringResource(key: "5aD-8i-JMe.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bfEJ7BkNormalTitle = Rswift.StringResource(key: "6bf-EJ-7Bk.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let cdmFzZUoNormalTitle = Rswift.StringResource(key: "cdm-fz-zUo.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let qghX7GnhNormalTitle = Rswift.StringResource(key: "Qgh-x7-gnh.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let uawnyofzNormalTitle = Rswift.StringResource(key: "UAW-NY-OFZ.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Base fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let nvWXx3PDText = Rswift.StringResource(key: "NvW-xx-3PD.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Base fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let yK1OYUWKText = Rswift.StringResource(key: "yK1-oY-uWK.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Book
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let sI46cUDdNormalTitle = Rswift.StringResource(key: "sI4-6c-UDd.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Book Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dwNSV9hrNormalTitle = Rswift.StringResource(key: "DwN-SV-9hr.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let lcQXJQAwNormalTitle = Rswift.StringResource(key: "LcQ-XJ-qAw.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book a service
      ///
      /// Locales: en, ta-LK, si-LK
      static let nkaCyXysText = Rswift.StringResource(key: "Nka-Cy-xys.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Book a service 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let rvj5dYQMText = Rswift.StringResource(key: "Rvj-5d-yQM.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book by call
      ///
      /// Locales: en, ta-LK, si-LK
      static let b2jKjHQqNormalTitle = Rswift.StringResource(key: "b2j-Kj-hQq.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Book by call
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let oqwQEOULNormalTitle = Rswift.StringResource(key: "Oqw-qE-OUL.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book for a friend
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let jcE5dY77Text = Rswift.StringResource(key: "JcE-5d-Y77.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book for a friend
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kuU1YVkXNormalTitle = Rswift.StringResource(key: "kuU-1Y-VkX.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Book now
      ///
      /// Locales: en, ta-LK, si-LK
      static let m8d2eDVANormalTitle = Rswift.StringResource(key: "M8d-2e-dVA.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Book now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let aX010I7JNormalTitle = Rswift.StringResource(key: "aX0-10-i7J.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let msMQP1h9NormalTitle = Rswift.StringResource(key: "MsM-qP-1h9.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: BreakDown
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ga908DfText = Rswift.StringResource(key: "8GA-90-8Df.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Buy eTokens
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let n3DCZ0FdText = Rswift.StringResource(key: "n3D-cZ-0Fd.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Call Driver
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dVcWRBOmNormalTitle = Rswift.StringResource(key: "DVc-WR-bOm.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let drufuEnoNormalTitle = Rswift.StringResource(key: "DRU-FU-eno.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let pkQQmZjuNormalTitle = Rswift.StringResource(key: "PkQ-qm-zju.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let rl1RIXzNormalTitle = Rswift.StringResource(key: "5Rl-1R-iXz.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let yccOjQcTNormalTitle = Rswift.StringResource(key: "Ycc-Oj-qcT.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let zx0BwLrjText = Rswift.StringResource(key: "zx0-bw-lrj.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Card
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let m3xSaFQwText = Rswift.StringResource(key: "M3x-Sa-fQw.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let stgbnSipText = Rswift.StringResource(key: "STG-bN-Sip.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cash Payment
      ///
      /// Locales: en, ta-LK, si-LK
      static let gcjCrEaWNormalTitle = Rswift.StringResource(key: "GCJ-cr-eaW.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Cash Payment
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let i70bToFNormalTitle = Rswift.StringResource(key: "7I7-0b-toF.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cash on delivery 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let qtXMVAEpText = Rswift.StringResource(key: "QtX-mV-aEp.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Choose a ride or swipe up for more
      ///
      /// Locales: en, ta-LK, si-LK
      static let qmZ3OSPHText = Rswift.StringResource(key: "QmZ-3O-SPH.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Choose a service or swipe up for more
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let vzNBiJK2Text = Rswift.StringResource(key: "VzN-Bi-JK2.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Confirm Booking
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let b5m8eHtXNormalTitle = Rswift.StringResource(key: "b5m-8e-htX.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Confirm Pickup
      ///
      /// Locales: en, ta-LK, si-LK
      static let l4C10JLbNormalTitle = Rswift.StringResource(key: "l4C-10-jLb.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let clkGfFjiNormalTitle = Rswift.StringResource(key: "CLK-gf-fji.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let sItEi87qNormalTitle = Rswift.StringResource(key: "sIt-ei-87q.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en, ta-LK, si-LK
      static let raZsAdFNormalTitle = Rswift.StringResource(key: "5ra-zs-adF.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let sOaDIESwNormalTitle = Rswift.StringResource(key: "sOa-DI-eSw.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let fkOCZXWbNormalTitle = Rswift.StringResource(key: "FkO-cZ-xWb.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let vqPKHVNNormalTitle = Rswift.StringResource(key: "1Vq-PK-hVN.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Drinking water
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xpOTUGb9Text = Rswift.StringResource(key: "XpO-tU-gb9.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Driver Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ylJ7YgXText = Rswift.StringResource(key: "7Yl-J7-YgX.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Driver name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let w3QTmBPRText = Rswift.StringResource(key: "W3Q-Tm-bPR.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Drop at :
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ye6QOWejText = Rswift.StringResource(key: "Ye6-QO-wej.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let aekSSANYText = Rswift.StringResource(key: "Aek-sS-aNY.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: EDIT OR CHANGE
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let gABWhZj2NormalTitle = Rswift.StringResource(key: "gAB-wh-Zj2.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Eg. Jane
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let taF0yWr2Placeholder = Rswift.StringResource(key: "taF-0y-Wr2.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enjoy your ride
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let crMZDKojText = Rswift.StringResource(key: "crM-zD-koj.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter  approx weight in Kg's
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ebcNVWe1Placeholder = Rswift.StringResource(key: "Ebc-nV-We1.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let hmb5yWdyText = Rswift.StringResource(key: "Hmb-5y-Wdy.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let lsEF843jText = Rswift.StringResource(key: "LsE-F8-43j.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let ssY01QETText = Rswift.StringResource(key: "ssY-01-qET.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter drop off location
      ///
      /// Locales: en, ta-LK, si-LK
      static let rpL4y10iPlaceholder = Rswift.StringResource(key: "rpL-4y-10i.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Enter drop off location
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let q0qNeFText = Rswift.StringResource(key: "16Q-0q-neF.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter location to be saved
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let cilfu30FPlaceholder = Rswift.StringResource(key: "CIL-fU-30F.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter name to save place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let a47HOQbdPlaceholder = Rswift.StringResource(key: "A47-HO-qbd.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let m8zWQKmrPlaceholder = Rswift.StringResource(key: "m8z-WQ-Kmr.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let s65L7XFOPlaceholder = Rswift.StringResource(key: "s65-L7-xFO.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter pickup location
      ///
      /// Locales: en, ta-LK, si-LK
      static let jtuq6Ve9Placeholder = Rswift.StringResource(key: "JTU-q6-ve9.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Enter promo code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let j8yWcOnnPlaceholder = Rswift.StringResource(key: "j8y-wc-Onn.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter type of material
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let iyhQUMB4Placeholder = Rswift.StringResource(key: "iyh-qU-mB4.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Enter your friend details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let wxOMX60Text = Rswift.StringResource(key: "4Wx-oM-x60.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Excellent
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xfsRNA4iText = Rswift.StringResource(key: "Xfs-rN-a4i.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Expires Dec 01, 2020
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let fmZG6MrText = Rswift.StringResource(key: "8Fm-zG-6Mr.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: FULL NAME
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let jHQUPLwnText = Rswift.StringResource(key: "jHQ-UP-Lwn.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Fare breakdown
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ietVhZocText = Rswift.StringResource(key: "IET-Vh-zoc.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let n7YVZYaLNormalTitle = Rswift.StringResource(key: "n7Y-vZ-YaL.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: For me
      ///
      /// Locales: en, ta-LK, si-LK
      static let ccW9gBXXNormalTitle = Rswift.StringResource(key: "ccW-9g-BXX.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: For me
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ayjRNV7hNormalTitle = Rswift.StringResource(key: "ayj-rN-V7h.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: For me
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bxdjh1AhNormalTitle = Rswift.StringResource(key: "BXD-jH-1Ah.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Get 50% Off on first 3 rides
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let tuOK5H83Text = Rswift.StringResource(key: "TuO-k5-H83.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let jtktd58EText = Rswift.StringResource(key: "JTK-TD-58E.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Half way stop
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let lDBhWUhText = Rswift.StringResource(key: "9lD-bh-WUh.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Happy
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let xDUFa1GkText = Rswift.StringResource(key: "xDU-Fa-1Gk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Hi Avinash Koundal
      ///
      /// Locales: en, ta-LK, si-LK
      static let xoy8d35HText = Rswift.StringResource(key: "xoy-8d-35H.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Hi Avinash Koundal
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let y4CCKh6Text = Rswift.StringResource(key: "5Y4-cC-Kh6.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Hide More Details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let iaX9M7z0SelectedTitle = Rswift.StringResource(key: "IaX-9M-7z0.selectedTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static let asAfHa5Text = Rswift.StringResource(key: "3As-Af-Ha5.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static let jXx3eSW1Text = Rswift.StringResource(key: "jXx-3e-SW1.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static let n5fAQVFfText = Rswift.StringResource(key: "N5f-aQ-VFf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static let u1E7FhDText = Rswift.StringResource(key: "3U1-E7-FhD.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let oFdUpM2uText = Rswift.StringResource(key: "OFd-Up-M2u.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let ll9PCDoSText = Rswift.StringResource(key: "ll9-PC-DoS.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Hope you’re having a great day!
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let s9GRBafText = Rswift.StringResource(key: "5s9-GR-Baf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ynFc8iwText = Rswift.StringResource(key: "5YN-Fc-8iw.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Impôt
      ///
      /// Locales: en, ta-LK, si-LK
      static let ezq4USlRText = Rswift.StringResource(key: "EZQ-4U-slR.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let he2J2sBText = Rswift.StringResource(key: "9he-2J-2sB.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Invoice No.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bMd6sYK5Placeholder = Rswift.StringResource(key: "BMd-6s-yK5.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: July 28 . 1:52 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let abHyBnaText = Rswift.StringResource(key: "3ab-Hy-bna.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: en, ta-LK, si-LK
      static let spAnJurText = Rswift.StringResource(key: "3Sp-an-jur.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ta-LK, si-LK
      static let dsoNuBjxText = Rswift.StringResource(key: "Dso-nu-bjx.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let fo1QXXBkText = Rswift.StringResource(key: "Fo1-qX-xBk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let dstSNIBGText = Rswift.StringResource(key: "dst-SN-iBG.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Label rger gre gre ger g
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let pgmke6oText = Rswift.StringResource(key: "6PG-MK-e6o.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label rger gre gre ger g
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let i05JvGKAText = Rswift.StringResource(key: "i05-Jv-GKA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ak3FVO6Text = Rswift.StringResource(key: "0AK-3F-vO6.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: MH O1 C 3254M
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let auJQT0RTText = Rswift.StringResource(key: "auJ-qT-0RT.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: MH O1 C 3254M
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let h1BVQ6h0Text = Rswift.StringResource(key: "h1B-vQ-6h0.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, ta-LK, si-LK
      static let cELYi0mRText = Rswift.StringResource(key: "cEL-yi-0mR.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, ta-LK, si-LK
      static let eBIAmL0bText = Rswift.StringResource(key: "eBI-Am-L0b.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let jEaV8MQeText = Rswift.StringResource(key: "JEa-V8-MQe.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let mhDs4SfText = Rswift.StringResource(key: "7mh-ds-4Sf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let rMVP0HFgText = Rswift.StringResource(key: "rMV-p0-HFg.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let yTs0pWCoText = Rswift.StringResource(key: "yTs-0p-WCo.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Minimum fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let nx9F3KhaText = Rswift.StringResource(key: "NX9-f3-Kha.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let cjPV6K4aPlaceholder = Rswift.StringResource(key: "cjP-V6-k4a.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let mSn9qDR5Text = Rswift.StringResource(key: "MSn-9q-DR5.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let u2ZN39LTText = Rswift.StringResource(key: "U2Z-N3-9LT.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ztBFtN8KPlaceholder = Rswift.StringResource(key: "ZtB-Ft-n8K.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let azrNxVCJNormalTitle = Rswift.StringResource(key: "azr-nx-VCJ.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let gVIvE83NormalTitle = Rswift.StringResource(key: "3gV-Iv-e83.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let ed5JK3i2NormalTitle = Rswift.StringResource(key: "ed5-jK-3i2.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Normal
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let nya07ThiSegmentTitles0 = Rswift.StringResource(key: "nya-07-Thi.segmentTitles[0]", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: OMR 48.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let rg6LTYLqText = Rswift.StringResource(key: "rg6-lT-YLq.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Ofiice
      ///
      /// Locales: en, ta-LK, si-LK
      static let ymAHvJ7mText = Rswift.StringResource(key: "YmA-Hv-j7m.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Ofiice
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let yn7VefText = Rswift.StringResource(key: "13Y-N7-vef.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Oil Change
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let htVVQeGText = Rswift.StringResource(key: "7ht-VV-QeG.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Ongoing
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let vqFSEDapText = Rswift.StringResource(key: "vqF-sE-dap.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Online Payment
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let tt2K3P85Text = Rswift.StringResource(key: "TT2-K3-P85.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Other Services
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bTWdCVYText = Rswift.StringResource(key: "4bT-Wd-cVY.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Other Services
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let gwhsquLvText = Rswift.StringResource(key: "GWH-SQ-ULv.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: PACKAGE BOOKING
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let i23FQ6nfText = Rswift.StringResource(key: "i23-fQ-6nf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: PANIC
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let uJmSnYtZNormalTitle = Rswift.StringResource(key: "UJm-sn-YtZ.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Payments
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let d0hFOKKnText = Rswift.StringResource(key: "d0h-FO-KKn.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let muzSh6LgPlaceholder = Rswift.StringResource(key: "muz-sh-6Lg.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kl1Vf1NuText = Rswift.StringResource(key: "kl1-Vf-1Nu.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let qM4CMVCcText = Rswift.StringResource(key: "qM4-CM-VCc.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Pickup at :
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let uclPuTqUText = Rswift.StringResource(key: "Ucl-Pu-tqU.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Pickup date & time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let m8WExJO5Text = Rswift.StringResource(key: "M8W-Ex-jO5.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Place code inside the box
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let fPtK7BOxText = Rswift.StringResource(key: "fPt-k7-bOx.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Promo code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let mzdMzNEOPlaceholder = Rswift.StringResource(key: "mzd-Mz-nEO.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: RECENT LOCATIONS
      ///
      /// Locales: en, ta-LK, si-LK
      static let yfo08TDeText = Rswift.StringResource(key: "Yfo-08-TDe.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Rate Driver
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let pomf0Text = Rswift.StringResource(key: "952-PO-mF0.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Ride Share
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let dAw41LPgText = Rswift.StringResource(key: "dAw-41-lPg.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Road Pickup
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let cjuQfNpEText = Rswift.StringResource(key: "Cju-qf-npE.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Road pickup
      ///
      /// Locales: en, ta-LK, si-LK
      static let lC0HLHD3NormalTitle = Rswift.StringResource(key: "lC0-HL-HD3.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Road pickup
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let lfxkeWiNormalTitle = Rswift.StringResource(key: "6LF-xK-EWi.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Rs 30
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let fqHYCTqmText = Rswift.StringResource(key: "fqH-yC-tqm.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: SDWL
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let gbKqBM4Text = Rswift.StringResource(key: "0Gb-kq-bM4.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: SEARCH
      ///
      /// Locales: en, ta-LK, si-LK
      static let zGTZQXxKNormalTitle = Rswift.StringResource(key: "zGT-ZQ-xxK.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: SKIP NOW
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let mt8RVhqNormalTitle = Rswift.StringResource(key: "6Mt-8R-vhq.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Sad
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let zMz0WOukText = Rswift.StringResource(key: "zMz-0W-ouk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Satellite
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let nya07ThiSegmentTitles1 = Rswift.StringResource(key: "nya-07-Thi.segmentTitles[1]", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let bBZMSCOvNormalTitle = Rswift.StringResource(key: "bBZ-mS-cOv.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Save Place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let djZBtVb3Text = Rswift.StringResource(key: "DjZ-Bt-Vb3.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Save Place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let wKbBIGXdNormalTitle = Rswift.StringResource(key: "wKb-bI-gXd.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let gvVMOJeNormalTitle = Rswift.StringResource(key: "9Gv-vM-OJe.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let hVoEsMorNormalTitle = Rswift.StringResource(key: "HVo-es-Mor.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let eEJHzZX3NormalTitle = Rswift.StringResource(key: "eEJ-Hz-ZX3.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let ll80PSEzNormalTitle = Rswift.StringResource(key: "ll8-0P-SEz.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static let avyB23RjText = Rswift.StringResource(key: "Avy-B2-3Rj.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static let hfBNNGhiText = Rswift.StringResource(key: "hfB-NN-ghi.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static let u5b9kWtAText = Rswift.StringResource(key: "u5b-9k-WtA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static let zYlJLIUfText = Rswift.StringResource(key: "ZYl-JL-IUf.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let k4wH5O8MText = Rswift.StringResource(key: "k4w-h5-o8M.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kzrGFS7hText = Rswift.StringResource(key: "kzr-GF-S7h.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let pUGMgGEeText = Rswift.StringResource(key: "pUG-Mg-gEe.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let j68VcDn1NormalTitle = Rswift.StringResource(key: "J68-vc-dn1.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let qtHdIddText = Rswift.StringResource(key: "7Qt-hd-Idd.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let yrykweXdText = Rswift.StringResource(key: "YRY-KW-EXd.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let pbUZ4AdVNormalTitle = Rswift.StringResource(key: "pbU-Z4-adV.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let xDtPIAhbText = Rswift.StringResource(key: "xDt-PI-ahb.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, ta-LK, si-LK
      static let wISUEGDeText = Rswift.StringResource(key: "wIS-UE-GDe.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Select Quantity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let y4PXROmMText = Rswift.StringResource(key: "y4P-xR-OmM.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select Quantity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let yrIEJKjyText = Rswift.StringResource(key: "yrI-eJ-kjy.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select Sub Model
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let uXiW8Ro8Text = Rswift.StringResource(key: "uXi-W8-Ro8.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select Vehicle type
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ieBCd3YhText = Rswift.StringResource(key: "IeB-cd-3Yh.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select a ride
      ///
      /// Locales: en, ta-LK, si-LK
      static let iYcFK7zeText = Rswift.StringResource(key: "iYc-fK-7ze.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Select a service
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dcE0F3vxText = Rswift.StringResource(key: "DcE-0F-3vx.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select an issue we can help with you
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kPaOBAaDText = Rswift.StringResource(key: "kPa-oB-AaD.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select brand
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let wbvFiButText = Rswift.StringResource(key: "wbv-Fi-But.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select capacity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let fqFWsP2hText = Rswift.StringResource(key: "fqF-Ws-P2h.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select capacity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let kMrU0L3yText = Rswift.StringResource(key: "kMr-u0-L3y.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Select date and time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let h3Z1oJEuText = Rswift.StringResource(key: "H3Z-1o-jEu.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select date and time to proceed further
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let eq53dU17Text = Rswift.StringResource(key: "Eq5-3d-u17.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select eToken
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let vzOL8G5cNormalTitle = Rswift.StringResource(key: "VzO-L8-g5c.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select your exact pickup point
      ///
      /// Locales: en, ta-LK, si-LK
      static let ehfrlyMjText = Rswift.StringResource(key: "EHF-RL-YMj.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Select your exact pickup point
      ///
      /// Locales: en, ta-LK, si-LK
      static let kxifqwUgText = Rswift.StringResource(key: "KXI-FQ-WUg.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Selected Time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let q66QLCpText = Rswift.StringResource(key: "7q6-6Q-LCp.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Selected date
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let nPVNkXCAText = Rswift.StringResource(key: "nPV-Nk-XCA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Set Pickup Time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let klt1aA2lNormalTitle = Rswift.StringResource(key: "Klt-1a-A2l.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Set your pickup spot
      ///
      /// Locales: en, ta-LK, si-LK
      static let evcGTQdpText = Rswift.StringResource(key: "evc-gT-Qdp.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Set your pickup spot
      ///
      /// Locales: en, ta-LK, si-LK
      static let wjYTfEYkText = Rswift.StringResource(key: "wjY-tf-EYk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Share Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xa89uK3GNormalTitle = Rswift.StringResource(key: "XA8-9u-k3G.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Share your details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let zlgS3NmTText = Rswift.StringResource(key: "zlg-S3-nmT.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Shedule
      ///
      /// Locales: en, ta-LK, si-LK
      static let bm2D6Fp1NormalTitle = Rswift.StringResource(key: "bm2-d6-Fp1.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let jHFIyYWuNormalTitle = Rswift.StringResource(key: "jHF-Iy-YWu.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Sub total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let jm5IJHp0Text = Rswift.StringResource(key: "jm5-iJ-Hp0.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let qNiDd0MTNormalTitle = Rswift.StringResource(key: "qNi-dd-0MT.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Submit rating
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let b8kXEEfnNormalTitle = Rswift.StringResource(key: "B8k-xE-Efn.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Tester
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let dsoDoB4rText = Rswift.StringResource(key: "Dso-Do-b4r.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Token
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let a0TdSb8Text = Rswift.StringResource(key: "2A0-Td-sb8.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let pv8MjAtWText = Rswift.StringResource(key: "Pv8-mj-AtW.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let mKYRaSEkText = Rswift.StringResource(key: "mKY-ra-SEk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let peMUGXU3Text = Rswift.StringResource(key: "peM-UG-xU3.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Total (incl. tax & fees)
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let yfZeYAAText = Rswift.StringResource(key: "2Yf-ze-YAA.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Type your reason for cancellation 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let r8BCt4roText = Rswift.StringResource(key: "R8B-ct-4ro.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Upload Image
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let s8ACOIJVText = Rswift.StringResource(key: "S8A-cO-IJV.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Use Credit Points
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let n7IZZ61eText = Rswift.StringResource(key: "N7I-zZ-61e.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Version 1.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let dEfKjYWMText = Rswift.StringResource(key: "dEf-kj-yWM.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Very Sad
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xrrQOM1eText = Rswift.StringResource(key: "Xrr-qO-M1e.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: We are processing your request
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let vhyWlXLkText = Rswift.StringResource(key: "VHY-wl-XLk.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Where are you going ?
      ///
      /// Locales: en, ta-LK, si-LK
      static let qdn1dOm9NormalTitle = Rswift.StringResource(key: "QDN-1d-om9.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Where are you going ?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let oaXFBbwNormalTitle = Rswift.StringResource(key: "5Oa-XF-Bbw.normalTitle", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Where to drop?
      ///
      /// Locales: en, ta-LK, si-LK
      static let vSxYFIfDPlaceholder = Rswift.StringResource(key: "vSx-YF-IfD.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Where to drop?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let eSHWuIduPlaceholder = Rswift.StringResource(key: "eSH-wu-Idu.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: Where to pick?
      ///
      /// Locales: en, ta-LK, si-LK
      static let vywXEFBoPlaceholder = Rswift.StringResource(key: "vyw-xE-fBo.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: Where to pick?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xjKPXP31Placeholder = Rswift.StringResource(key: "XjK-pX-P31.placeholder", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Where to?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let fi5D3If3Text = Rswift.StringResource(key: "FI5-D3-If3.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Your fare will be the price presented before the trip or based on the rates below and other applicable surcharges and adjustment.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let nGp1JRiDText = Rswift.StringResource(key: "nGp-1J-riD.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: bike
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let g8JENNC0Text = Rswift.StringResource(key: "g8J-eN-NC0.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: cash - 125.50 Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let ez01mBDrText = Rswift.StringResource(key: "Ez0-1m-BDr.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: fgdgdfgdf
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let miYNiDWTText = Rswift.StringResource(key: "miY-ni-dWT.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: in Rs
      ///
      /// Locales: en, ta-LK, si-LK
      static let c9nS16EfText = Rswift.StringResource(key: "c9n-s1-6Ef.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: in Rs
      ///
      /// Locales: en, ta-LK, si-LK
      static let q4ADI5pHText = Rswift.StringResource(key: "Q4A-dI-5pH.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "ta-LK", "si-LK"], comment: nil)
      /// en translation: in Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let aHAoBLuText = Rswift.StringResource(key: "9aH-ao-bLu.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: in Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let foqLXQ0WText = Rswift.StringResource(key: "Foq-lX-Q0W.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let rYfHDWCRText = Rswift.StringResource(key: "rYf-hD-wCR.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: service
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let r6gZOE0tText = Rswift.StringResource(key: "R6g-zO-E0t.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: status
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let jgSOgXIjText = Rswift.StringResource(key: "JgS-Og-xIj.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: status
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let xchNF3nGText = Rswift.StringResource(key: "Xch-NF-3nG.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let gfdVc6AQText = Rswift.StringResource(key: "Gfd-Vc-6AQ.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static let rec0LCUpText = Rswift.StringResource(key: "Rec-0L-cUp.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: view deals available via companies
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static let j5LYx6R1Text = Rswift.StringResource(key: "j5L-Yx-6R1.text", tableName: "BookService", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "es", "ur", "ta-LK", "si-LK", "hi", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)

      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static func eSHWuIduText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eSH-wu-Idu.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "eSH-wu-Idu.text"
        }

        return NSLocalizedString("eSH-wu-Idu.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static func vSxYFIfDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vSx-YF-IfD.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "vSx-YF-IfD.text"
        }

        return NSLocalizedString("vSx-YF-IfD.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static func vywXEFBoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vyw-xE-fBo.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "vyw-xE-fBo.text"
        }

        return NSLocalizedString("vyw-xE-fBo.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ta-LK, si-LK
      static func xjKPXP31Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XjK-pX-P31.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "XjK-pX-P31.text"
        }

        return NSLocalizedString("XjK-pX-P31.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation:     
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func yLhXFZvWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yLh-xF-ZvW.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "yLh-xF-ZvW.text"
        }

        return NSLocalizedString("yLh-xF-ZvW.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation:  km
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func f3FT1BvwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("F3F-t1-bvw.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "F3F-t1-bvw.text"
        }

        return NSLocalizedString("F3F-t1-bvw.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bjYLeVSHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bjY-Le-vSH.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "bjY-Le-vSH.text"
        }

        return NSLocalizedString("bjY-Le-vSH.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.02
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func hLDF3OopText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hLD-F3-Oop.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "hLD-F3-Oop.text"
        }

        return NSLocalizedString("hLD-F3-Oop.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.1
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func mz0A0Xd7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mz0-A0-xd7.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Mz0-A0-xd7.text"
        }

        return NSLocalizedString("Mz0-A0-xd7.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.6
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func ni2LWBrvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ni2-LW-Brv.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ni2-LW-Brv.text"
        }

        return NSLocalizedString("ni2-LW-Brv.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.8
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func hBbKwFbQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HBb-Kw-FbQ.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "HBb-Kw-FbQ.text"
        }

        return NSLocalizedString("HBb-Kw-FbQ.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static func dlkjzq7rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DLK-JZ-q7r.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DLK-JZ-q7r.text"
        }

        return NSLocalizedString("DLK-JZ-q7r.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static func w6PFMGeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5w6-pF-MGe.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5w6-pF-MGe.text"
        }

        return NSLocalizedString("5w6-pF-MGe.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, ta-LK, si-LK
      static func yEjKp93nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YEj-kp-93n.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "YEj-kp-93n.text"
        }

        return NSLocalizedString("YEj-kp-93n.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func soqBzPRvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Soq-Bz-pRv.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Soq-Bz-pRv.text"
        }

        return NSLocalizedString("Soq-Bz-pRv.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ylLKXJeyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YlL-KX-Jey.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "YlL-KX-Jey.text"
        }

        return NSLocalizedString("YlL-KX-Jey.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func pk25BJqRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pk2-5B-JqR.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "pk2-5B-JqR.text"
        }

        return NSLocalizedString("pk2-5B-JqR.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: (Sector 29, chandigarh)
      ///
      /// Locales: en, ta-LK, si-LK
      static func zrHFhTmeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZrH-fh-Tme.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ZrH-fh-Tme.text"
        }

        return NSLocalizedString("ZrH-fh-Tme.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: + Per km
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bkYUJFPbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bkY-UJ-FPb.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "bkY-UJ-FPb.text"
        }

        return NSLocalizedString("bkY-UJ-FPb.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: + Per minute
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func p3YXcVkQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P3Y-xc-VkQ.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "P3Y-xc-VkQ.text"
        }

        return NSLocalizedString("P3Y-xc-VkQ.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func b8kWIKjhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b8k-wI-Kjh.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "b8k-wI-Kjh.text"
        }

        return NSLocalizedString("b8k-wI-Kjh.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func edsXcPbGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eds-xc-pbG.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Eds-xc-pbG.text"
        }

        return NSLocalizedString("Eds-xc-pbG.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func zv07wYcAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zv0-7w-ycA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Zv0-7w-ycA.text"
        }

        return NSLocalizedString("Zv0-7w-ycA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func h4JYhKRUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h4J-Yh-kRU.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "h4J-Yh-kRU.text"
        }

        return NSLocalizedString("h4J-Yh-kRU.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func mpLKD2ttText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mpL-KD-2tt.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "mpL-KD-2tt.text"
        }

        return NSLocalizedString("mpL-KD-2tt.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0 Mins
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kq1TcYb2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kq1-tc-Yb2.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kq1-tc-Yb2.text"
        }

        return NSLocalizedString("kq1-tc-Yb2.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0 OMR
      ///
      /// Locales: en, ta-LK, si-LK
      static func mMgP9EWlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mMg-P9-EWl.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "mMg-P9-EWl.text"
        }

        return NSLocalizedString("mMg-P9-EWl.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0.0 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func wxV6aQENText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wxV-6a-qEN.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "wxV-6a-qEN.text"
        }

        return NSLocalizedString("wxV-6a-qEN.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0.00
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func kjsobcoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1KJ-sO-bCO.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "1KJ-sO-bCO.text"
        }

        return NSLocalizedString("1KJ-sO-bCO.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 OMR
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func jeoWNNSsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jeo-WN-NSs.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "jeo-WN-NSs.text"
        }

        return NSLocalizedString("jeo-WN-NSs.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 OMR
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func lAw5dGVMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lAw-5d-gVM.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "lAw-5d-gVM.text"
        }

        return NSLocalizedString("lAw-5d-gVM.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 140 - 160
      ///
      /// Locales: en, ta-LK, si-LK
      static func eQmKsSk4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eQm-Ks-sk4.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "eQm-Ks-sk4.text"
        }

        return NSLocalizedString("eQm-Ks-sk4.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 140 - 160
      ///
      /// Locales: en, ta-LK, si-LK
      static func t6J71GYuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T6J-71-gYu.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "T6J-71-gYu.text"
        }

        return NSLocalizedString("T6J-71-gYu.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 140 - 160
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dtIOHK28Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DtI-oH-k28.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DtI-oH-k28.text"
        }

        return NSLocalizedString("DtI-oH-k28.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 140 - 160
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func sQyLHUjAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SQy-lH-UjA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "SQy-lH-UjA.text"
        }

        return NSLocalizedString("SQy-lH-UjA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 4 gallon of water  qunatity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func waNhHosText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Wa-nh-Hos.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3Wa-nh-Hos.text"
        }

        return NSLocalizedString("3Wa-nh-Hos.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 4.9
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, ja, nl, ja, sq
      static func iizsFj1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6II-ZS-fj1.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "6II-ZS-fj1.text"
        }

        return NSLocalizedString("6II-ZS-fj1.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 4.9
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, ja, nl, ja, sq
      static func sXHYAZjzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sXH-YA-zjz.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "sXH-YA-zjz.text"
        }

        return NSLocalizedString("sXH-YA-zjz.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: 8888855555
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func b1TOfVuBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B1T-Of-vuB.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "B1T-Of-vuB.text"
        }

        return NSLocalizedString("B1T-Of-vuB.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: AED 300
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func wg3PILhfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wg3-pI-Lhf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Wg3-pI-Lhf.text"
        }

        return NSLocalizedString("Wg3-pI-Lhf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: APPLY
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func mJQ1l84qNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mJQ-1l-84q.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "mJQ-1l-84q.normalTitle"
        }

        return NSLocalizedString("mJQ-1l-84q.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: APPLY
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func pIuTeAFENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pIu-te-aFE.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "pIu-te-aFE.normalTitle"
        }

        return NSLocalizedString("pIu-te-aFE.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: APPLY PROMO CODE
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dkzbtnGrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DKZ-bT-NGr.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DKZ-bT-NGr.normalTitle"
        }

        return NSLocalizedString("DKZ-bT-NGr.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ASAP
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func soWr2NsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8SO-wr-2Ns.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "8SO-wr-2Ns.text"
        }

        return NSLocalizedString("8SO-wr-2Ns.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Add More Details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func iaX9M7z0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IaX-9M-7z0.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "IaX-9M-7z0.normalTitle"
        }

        return NSLocalizedString("IaX-9M-7z0.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Add phone number or direct add from your list
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func iobHFH4LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Iob-hF-h4L.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Iob-hF-h4L.text"
        }

        return NSLocalizedString("Iob-hF-h4L.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Additional waiting time charges may apply to your trip if the driver has waited 5 minutes: $0.05 per minute.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func enPWgDX6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EnP-wg-dX6.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "EnP-wg-dX6.text"
        }

        return NSLocalizedString("EnP-wg-dX6.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bhvYQ0wcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bhv-yQ-0wc.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Bhv-yQ-0wc.text"
        }

        return NSLocalizedString("Bhv-yQ-0wc.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func fGBfIhOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5fG-bf-IhO.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5fG-bf-IhO.text"
        }

        return NSLocalizedString("5fG-bf-IhO.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Amount to be paid
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func umcRFWePText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Umc-RF-weP.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Umc-RF-weP.text"
        }

        return NSLocalizedString("Umc-RF-weP.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Ankush
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xv1AKBf6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XV1-aK-bf6.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "XV1-aK-bf6.text"
        }

        return NSLocalizedString("XV1-aK-bf6.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Apply Promo Code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func goYItYHzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("goY-it-YHz.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "goY-it-YHz.text"
        }

        return NSLocalizedString("goY-it-YHz.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Aquafina
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func oXjFbBW8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OXj-fb-BW8.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "OXj-fb-BW8.text"
        }

        return NSLocalizedString("OXj-fb-BW8.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Available Promo codes
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func nleio9o9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NLE-iO-9o9.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "NLE-iO-9o9.text"
        }

        return NSLocalizedString("NLE-iO-9o9.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ta-LK, si-LK
      static func la4NgCINNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LA4-Ng-CIN.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "LA4-Ng-CIN.normalTitle"
        }

        return NSLocalizedString("LA4-Ng-CIN.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func aD8iJMeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5aD-8i-JMe.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5aD-8i-JMe.normalTitle"
        }

        return NSLocalizedString("5aD-8i-JMe.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bfEJ7BkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6bf-EJ-7Bk.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "6bf-EJ-7Bk.normalTitle"
        }

        return NSLocalizedString("6bf-EJ-7Bk.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func cdmFzZUoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cdm-fz-zUo.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "cdm-fz-zUo.normalTitle"
        }

        return NSLocalizedString("cdm-fz-zUo.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func qghX7GnhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qgh-x7-gnh.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Qgh-x7-gnh.normalTitle"
        }

        return NSLocalizedString("Qgh-x7-gnh.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func uawnyofzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UAW-NY-OFZ.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "UAW-NY-OFZ.normalTitle"
        }

        return NSLocalizedString("UAW-NY-OFZ.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Base fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func nvWXx3PDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NvW-xx-3PD.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "NvW-xx-3PD.text"
        }

        return NSLocalizedString("NvW-xx-3PD.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Base fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func yK1OYUWKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yK1-oY-uWK.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "yK1-oY-uWK.text"
        }

        return NSLocalizedString("yK1-oY-uWK.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func sI46cUDdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sI4-6c-UDd.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "sI4-6c-UDd.normalTitle"
        }

        return NSLocalizedString("sI4-6c-UDd.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dwNSV9hrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DwN-SV-9hr.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DwN-SV-9hr.normalTitle"
        }

        return NSLocalizedString("DwN-SV-9hr.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func lcQXJQAwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LcQ-XJ-qAw.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "LcQ-XJ-qAw.normalTitle"
        }

        return NSLocalizedString("LcQ-XJ-qAw.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book a service
      ///
      /// Locales: en, ta-LK, si-LK
      static func nkaCyXysText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nka-Cy-xys.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Nka-Cy-xys.text"
        }

        return NSLocalizedString("Nka-Cy-xys.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book a service 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func rvj5dYQMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rvj-5d-yQM.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Rvj-5d-yQM.text"
        }

        return NSLocalizedString("Rvj-5d-yQM.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book by call
      ///
      /// Locales: en, ta-LK, si-LK
      static func b2jKjHQqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b2j-Kj-hQq.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "b2j-Kj-hQq.normalTitle"
        }

        return NSLocalizedString("b2j-Kj-hQq.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book by call
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func oqwQEOULNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oqw-qE-OUL.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Oqw-qE-OUL.normalTitle"
        }

        return NSLocalizedString("Oqw-qE-OUL.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book for a friend
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func jcE5dY77Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JcE-5d-Y77.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "JcE-5d-Y77.text"
        }

        return NSLocalizedString("JcE-5d-Y77.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book for a friend
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kuU1YVkXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kuU-1Y-VkX.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kuU-1Y-VkX.normalTitle"
        }

        return NSLocalizedString("kuU-1Y-VkX.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book now
      ///
      /// Locales: en, ta-LK, si-LK
      static func m8d2eDVANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M8d-2e-dVA.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "M8d-2e-dVA.normalTitle"
        }

        return NSLocalizedString("M8d-2e-dVA.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func aX010I7JNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aX0-10-i7J.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "aX0-10-i7J.normalTitle"
        }

        return NSLocalizedString("aX0-10-i7J.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Book now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func msMQP1h9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MsM-qP-1h9.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "MsM-qP-1h9.normalTitle"
        }

        return NSLocalizedString("MsM-qP-1h9.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: BreakDown
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ga908DfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8GA-90-8Df.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "8GA-90-8Df.text"
        }

        return NSLocalizedString("8GA-90-8Df.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Buy eTokens
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func n3DCZ0FdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n3D-cZ-0Fd.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "n3D-cZ-0Fd.text"
        }

        return NSLocalizedString("n3D-cZ-0Fd.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Call Driver
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dVcWRBOmNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DVc-WR-bOm.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DVc-WR-bOm.normalTitle"
        }

        return NSLocalizedString("DVc-WR-bOm.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func drufuEnoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DRU-FU-eno.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DRU-FU-eno.normalTitle"
        }

        return NSLocalizedString("DRU-FU-eno.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func pkQQmZjuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PkQ-qm-zju.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "PkQ-qm-zju.normalTitle"
        }

        return NSLocalizedString("PkQ-qm-zju.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func rl1RIXzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Rl-1R-iXz.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5Rl-1R-iXz.normalTitle"
        }

        return NSLocalizedString("5Rl-1R-iXz.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func yccOjQcTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ycc-Oj-qcT.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Ycc-Oj-qcT.normalTitle"
        }

        return NSLocalizedString("Ycc-Oj-qcT.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func zx0BwLrjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zx0-bw-lrj.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "zx0-bw-lrj.text"
        }

        return NSLocalizedString("zx0-bw-lrj.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Card
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func m3xSaFQwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M3x-Sa-fQw.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "M3x-Sa-fQw.text"
        }

        return NSLocalizedString("M3x-Sa-fQw.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func stgbnSipText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("STG-bN-Sip.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "STG-bN-Sip.text"
        }

        return NSLocalizedString("STG-bN-Sip.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cash Payment
      ///
      /// Locales: en, ta-LK, si-LK
      static func gcjCrEaWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GCJ-cr-eaW.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "GCJ-cr-eaW.normalTitle"
        }

        return NSLocalizedString("GCJ-cr-eaW.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cash Payment
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func i70bToFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7I7-0b-toF.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7I7-0b-toF.normalTitle"
        }

        return NSLocalizedString("7I7-0b-toF.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Cash on delivery 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func qtXMVAEpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QtX-mV-aEp.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "QtX-mV-aEp.text"
        }

        return NSLocalizedString("QtX-mV-aEp.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Choose a ride or swipe up for more
      ///
      /// Locales: en, ta-LK, si-LK
      static func qmZ3OSPHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QmZ-3O-SPH.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "QmZ-3O-SPH.text"
        }

        return NSLocalizedString("QmZ-3O-SPH.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Choose a service or swipe up for more
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func vzNBiJK2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VzN-Bi-JK2.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "VzN-Bi-JK2.text"
        }

        return NSLocalizedString("VzN-Bi-JK2.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Booking
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func b5m8eHtXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b5m-8e-htX.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "b5m-8e-htX.normalTitle"
        }

        return NSLocalizedString("b5m-8e-htX.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Pickup
      ///
      /// Locales: en, ta-LK, si-LK
      static func l4C10JLbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l4C-10-jLb.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "l4C-10-jLb.normalTitle"
        }

        return NSLocalizedString("l4C-10-jLb.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func clkGfFjiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CLK-gf-fji.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "CLK-gf-fji.normalTitle"
        }

        return NSLocalizedString("CLK-gf-fji.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func sItEi87qNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sIt-ei-87q.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "sIt-ei-87q.normalTitle"
        }

        return NSLocalizedString("sIt-ei-87q.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en, ta-LK, si-LK
      static func raZsAdFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5ra-zs-adF.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5ra-zs-adF.normalTitle"
        }

        return NSLocalizedString("5ra-zs-adF.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func sOaDIESwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sOa-DI-eSw.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "sOa-DI-eSw.normalTitle"
        }

        return NSLocalizedString("sOa-DI-eSw.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func fkOCZXWbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FkO-cZ-xWb.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "FkO-cZ-xWb.normalTitle"
        }

        return NSLocalizedString("FkO-cZ-xWb.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func vqPKHVNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Vq-PK-hVN.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "1Vq-PK-hVN.normalTitle"
        }

        return NSLocalizedString("1Vq-PK-hVN.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Drinking water
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xpOTUGb9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XpO-tU-gb9.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "XpO-tU-gb9.text"
        }

        return NSLocalizedString("XpO-tU-gb9.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Driver Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ylJ7YgXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Yl-J7-YgX.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7Yl-J7-YgX.text"
        }

        return NSLocalizedString("7Yl-J7-YgX.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Driver name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func w3QTmBPRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W3Q-Tm-bPR.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "W3Q-Tm-bPR.text"
        }

        return NSLocalizedString("W3Q-Tm-bPR.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Drop at :
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ye6QOWejText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ye6-QO-wej.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Ye6-QO-wej.text"
        }

        return NSLocalizedString("Ye6-QO-wej.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func aekSSANYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Aek-sS-aNY.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Aek-sS-aNY.text"
        }

        return NSLocalizedString("Aek-sS-aNY.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: EDIT OR CHANGE
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func gABWhZj2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gAB-wh-Zj2.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "gAB-wh-Zj2.normalTitle"
        }

        return NSLocalizedString("gAB-wh-Zj2.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Eg. Jane
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func taF0yWr2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("taF-0y-Wr2.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "taF-0y-Wr2.placeholder"
        }

        return NSLocalizedString("taF-0y-Wr2.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enjoy your ride
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func crMZDKojText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crM-zD-koj.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "crM-zD-koj.text"
        }

        return NSLocalizedString("crM-zD-koj.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter  approx weight in Kg's
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ebcNVWe1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ebc-nV-We1.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Ebc-nV-We1.placeholder"
        }

        return NSLocalizedString("Ebc-nV-We1.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func hmb5yWdyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hmb-5y-Wdy.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Hmb-5y-Wdy.text"
        }

        return NSLocalizedString("Hmb-5y-Wdy.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func lsEF843jText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LsE-F8-43j.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "LsE-F8-43j.text"
        }

        return NSLocalizedString("LsE-F8-43j.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter details of order
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func ssY01QETText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ssY-01-qET.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ssY-01-qET.text"
        }

        return NSLocalizedString("ssY-01-qET.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter drop off location
      ///
      /// Locales: en, ta-LK, si-LK
      static func rpL4y10iPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rpL-4y-10i.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "rpL-4y-10i.placeholder"
        }

        return NSLocalizedString("rpL-4y-10i.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter drop off location
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func q0qNeFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("16Q-0q-neF.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "16Q-0q-neF.text"
        }

        return NSLocalizedString("16Q-0q-neF.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter location to be saved
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func cilfu30FPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CIL-fU-30F.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "CIL-fU-30F.placeholder"
        }

        return NSLocalizedString("CIL-fU-30F.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter name to save place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func a47HOQbdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A47-HO-qbd.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "A47-HO-qbd.placeholder"
        }

        return NSLocalizedString("A47-HO-qbd.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func m8zWQKmrPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m8z-WQ-Kmr.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "m8z-WQ-Kmr.placeholder"
        }

        return NSLocalizedString("m8z-WQ-Kmr.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func s65L7XFOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s65-L7-xFO.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "s65-L7-xFO.placeholder"
        }

        return NSLocalizedString("s65-L7-xFO.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter pickup location
      ///
      /// Locales: en, ta-LK, si-LK
      static func jtuq6Ve9Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JTU-q6-ve9.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "JTU-q6-ve9.placeholder"
        }

        return NSLocalizedString("JTU-q6-ve9.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter promo code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func j8yWcOnnPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j8y-wc-Onn.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "j8y-wc-Onn.placeholder"
        }

        return NSLocalizedString("j8y-wc-Onn.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter type of material
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func iyhQUMB4Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iyh-qU-mB4.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "iyh-qU-mB4.placeholder"
        }

        return NSLocalizedString("iyh-qU-mB4.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Enter your friend details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func wxOMX60Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Wx-oM-x60.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "4Wx-oM-x60.text"
        }

        return NSLocalizedString("4Wx-oM-x60.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Excellent
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xfsRNA4iText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xfs-rN-a4i.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Xfs-rN-a4i.text"
        }

        return NSLocalizedString("Xfs-rN-a4i.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Expires Dec 01, 2020
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func fmZG6MrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Fm-zG-6Mr.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "8Fm-zG-6Mr.text"
        }

        return NSLocalizedString("8Fm-zG-6Mr.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: FULL NAME
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func jHQUPLwnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jHQ-UP-Lwn.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "jHQ-UP-Lwn.text"
        }

        return NSLocalizedString("jHQ-UP-Lwn.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Fare breakdown
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ietVhZocText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IET-Vh-zoc.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "IET-Vh-zoc.text"
        }

        return NSLocalizedString("IET-Vh-zoc.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func n7YVZYaLNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n7Y-vZ-YaL.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "n7Y-vZ-YaL.normalTitle"
        }

        return NSLocalizedString("n7Y-vZ-YaL.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: For me
      ///
      /// Locales: en, ta-LK, si-LK
      static func ccW9gBXXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ccW-9g-BXX.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ccW-9g-BXX.normalTitle"
        }

        return NSLocalizedString("ccW-9g-BXX.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: For me
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ayjRNV7hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ayj-rN-V7h.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ayj-rN-V7h.normalTitle"
        }

        return NSLocalizedString("ayj-rN-V7h.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: For me
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bxdjh1AhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BXD-jH-1Ah.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "BXD-jH-1Ah.normalTitle"
        }

        return NSLocalizedString("BXD-jH-1Ah.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Get 50% Off on first 3 rides
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func tuOK5H83Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TuO-k5-H83.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "TuO-k5-H83.text"
        }

        return NSLocalizedString("TuO-k5-H83.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func jtktd58EText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JTK-TD-58E.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "JTK-TD-58E.text"
        }

        return NSLocalizedString("JTK-TD-58E.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Half way stop
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func lDBhWUhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9lD-bh-WUh.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "9lD-bh-WUh.text"
        }

        return NSLocalizedString("9lD-bh-WUh.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Happy
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func xDUFa1GkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDU-Fa-1Gk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "xDU-Fa-1Gk.text"
        }

        return NSLocalizedString("xDU-Fa-1Gk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Hi Avinash Koundal
      ///
      /// Locales: en, ta-LK, si-LK
      static func xoy8d35HText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xoy-8d-35H.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "xoy-8d-35H.text"
        }

        return NSLocalizedString("xoy-8d-35H.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Hi Avinash Koundal
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func y4CCKh6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Y4-cC-Kh6.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5Y4-cC-Kh6.text"
        }

        return NSLocalizedString("5Y4-cC-Kh6.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Hide More Details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func iaX9M7z0SelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IaX-9M-7z0.selectedTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "IaX-9M-7z0.selectedTitle"
        }

        return NSLocalizedString("IaX-9M-7z0.selectedTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static func asAfHa5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3As-Af-Ha5.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3As-Af-Ha5.text"
        }

        return NSLocalizedString("3As-Af-Ha5.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static func jXx3eSW1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jXx-3e-SW1.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "jXx-3e-SW1.text"
        }

        return NSLocalizedString("jXx-3e-SW1.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static func n5fAQVFfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N5f-aQ-VFf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "N5f-aQ-VFf.text"
        }

        return NSLocalizedString("N5f-aQ-VFf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ta-LK, si-LK
      static func u1E7FhDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3U1-E7-FhD.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3U1-E7-FhD.text"
        }

        return NSLocalizedString("3U1-E7-FhD.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func oFdUpM2uText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OFd-Up-M2u.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "OFd-Up-M2u.text"
        }

        return NSLocalizedString("OFd-Up-M2u.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func ll9PCDoSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ll9-PC-DoS.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ll9-PC-DoS.text"
        }

        return NSLocalizedString("ll9-PC-DoS.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Hope you’re having a great day!
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func s9GRBafText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5s9-GR-Baf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5s9-GR-Baf.text"
        }

        return NSLocalizedString("5s9-GR-Baf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ynFc8iwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5YN-Fc-8iw.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5YN-Fc-8iw.text"
        }

        return NSLocalizedString("5YN-Fc-8iw.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Impôt
      ///
      /// Locales: en, ta-LK, si-LK
      static func ezq4USlRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EZQ-4U-slR.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "EZQ-4U-slR.text"
        }

        return NSLocalizedString("EZQ-4U-slR.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func he2J2sBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9he-2J-2sB.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "9he-2J-2sB.text"
        }

        return NSLocalizedString("9he-2J-2sB.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Invoice No.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bMd6sYK5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BMd-6s-yK5.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "BMd-6s-yK5.placeholder"
        }

        return NSLocalizedString("BMd-6s-yK5.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: July 28 . 1:52 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func abHyBnaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3ab-Hy-bna.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3ab-Hy-bna.text"
        }

        return NSLocalizedString("3ab-Hy-bna.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: en, ta-LK, si-LK
      static func spAnJurText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Sp-an-jur.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3Sp-an-jur.text"
        }

        return NSLocalizedString("3Sp-an-jur.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ta-LK, si-LK
      static func dsoNuBjxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dso-nu-bjx.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Dso-nu-bjx.text"
        }

        return NSLocalizedString("Dso-nu-bjx.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func fo1QXXBkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fo1-qX-xBk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Fo1-qX-xBk.text"
        }

        return NSLocalizedString("Fo1-qX-xBk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func dstSNIBGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dst-SN-iBG.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "dst-SN-iBG.text"
        }

        return NSLocalizedString("dst-SN-iBG.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Label rger gre gre ger g
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func pgmke6oText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6PG-MK-e6o.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "6PG-MK-e6o.text"
        }

        return NSLocalizedString("6PG-MK-e6o.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Label rger gre gre ger g
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func i05JvGKAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i05-Jv-GKA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "i05-Jv-GKA.text"
        }

        return NSLocalizedString("i05-Jv-GKA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ak3FVO6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0AK-3F-vO6.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "0AK-3F-vO6.text"
        }

        return NSLocalizedString("0AK-3F-vO6.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: MH O1 C 3254M
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func auJQT0RTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auJ-qT-0RT.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "auJ-qT-0RT.text"
        }

        return NSLocalizedString("auJ-qT-0RT.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: MH O1 C 3254M
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func h1BVQ6h0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h1B-vQ-6h0.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "h1B-vQ-6h0.text"
        }

        return NSLocalizedString("h1B-vQ-6h0.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, ta-LK, si-LK
      static func cELYi0mRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cEL-yi-0mR.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "cEL-yi-0mR.text"
        }

        return NSLocalizedString("cEL-yi-0mR.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, ta-LK, si-LK
      static func eBIAmL0bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eBI-Am-L0b.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "eBI-Am-L0b.text"
        }

        return NSLocalizedString("eBI-Am-L0b.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func jEaV8MQeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JEa-V8-MQe.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "JEa-V8-MQe.text"
        }

        return NSLocalizedString("JEa-V8-MQe.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func mhDs4SfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7mh-ds-4Sf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7mh-ds-4Sf.text"
        }

        return NSLocalizedString("7mh-ds-4Sf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func rMVP0HFgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rMV-p0-HFg.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "rMV-p0-HFg.text"
        }

        return NSLocalizedString("rMV-p0-HFg.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Mini
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func yTs0pWCoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yTs-0p-WCo.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "yTs-0p-WCo.text"
        }

        return NSLocalizedString("yTs-0p-WCo.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Minimum fare
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func nx9F3KhaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NX9-f3-Kha.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "NX9-f3-Kha.text"
        }

        return NSLocalizedString("NX9-f3-Kha.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func cjPV6K4aPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cjP-V6-k4a.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "cjP-V6-k4a.placeholder"
        }

        return NSLocalizedString("cjP-V6-k4a.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func mSn9qDR5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MSn-9q-DR5.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "MSn-9q-DR5.text"
        }

        return NSLocalizedString("MSn-9q-DR5.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func u2ZN39LTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("U2Z-N3-9LT.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "U2Z-N3-9LT.text"
        }

        return NSLocalizedString("U2Z-N3-9LT.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ztBFtN8KPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZtB-Ft-n8K.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ZtB-Ft-n8K.placeholder"
        }

        return NSLocalizedString("ZtB-Ft-n8K.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func azrNxVCJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("azr-nx-VCJ.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "azr-nx-VCJ.normalTitle"
        }

        return NSLocalizedString("azr-nx-VCJ.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func gVIvE83NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3gV-Iv-e83.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "3gV-Iv-e83.normalTitle"
        }

        return NSLocalizedString("3gV-Iv-e83.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func ed5JK3i2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ed5-jK-3i2.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ed5-jK-3i2.normalTitle"
        }

        return NSLocalizedString("ed5-jK-3i2.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Normal
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func nya07ThiSegmentTitles0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nya-07-Thi.segmentTitles[0]", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "nya-07-Thi.segmentTitles[0]"
        }

        return NSLocalizedString("nya-07-Thi.segmentTitles[0]", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: OMR 48.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func rg6LTYLqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rg6-lT-YLq.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "rg6-lT-YLq.text"
        }

        return NSLocalizedString("rg6-lT-YLq.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Ofiice
      ///
      /// Locales: en, ta-LK, si-LK
      static func ymAHvJ7mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YmA-Hv-j7m.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "YmA-Hv-j7m.text"
        }

        return NSLocalizedString("YmA-Hv-j7m.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Ofiice
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func yn7VefText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("13Y-N7-vef.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "13Y-N7-vef.text"
        }

        return NSLocalizedString("13Y-N7-vef.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Oil Change
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func htVVQeGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7ht-VV-QeG.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7ht-VV-QeG.text"
        }

        return NSLocalizedString("7ht-VV-QeG.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Ongoing
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func vqFSEDapText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vqF-sE-dap.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "vqF-sE-dap.text"
        }

        return NSLocalizedString("vqF-sE-dap.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Online Payment
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func tt2K3P85Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TT2-K3-P85.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "TT2-K3-P85.text"
        }

        return NSLocalizedString("TT2-K3-P85.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Other Services
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bTWdCVYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4bT-Wd-cVY.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "4bT-Wd-cVY.text"
        }

        return NSLocalizedString("4bT-Wd-cVY.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Other Services
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func gwhsquLvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GWH-SQ-ULv.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "GWH-SQ-ULv.text"
        }

        return NSLocalizedString("GWH-SQ-ULv.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: PACKAGE BOOKING
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func i23FQ6nfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i23-fQ-6nf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "i23-fQ-6nf.text"
        }

        return NSLocalizedString("i23-fQ-6nf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: PANIC
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func uJmSnYtZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UJm-sn-YtZ.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "UJm-sn-YtZ.normalTitle"
        }

        return NSLocalizedString("UJm-sn-YtZ.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Payments
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func d0hFOKKnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d0h-FO-KKn.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "d0h-FO-KKn.text"
        }

        return NSLocalizedString("d0h-FO-KKn.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func muzSh6LgPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("muz-sh-6Lg.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "muz-sh-6Lg.placeholder"
        }

        return NSLocalizedString("muz-sh-6Lg.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kl1Vf1NuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kl1-Vf-1Nu.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kl1-Vf-1Nu.text"
        }

        return NSLocalizedString("kl1-Vf-1Nu.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func qM4CMVCcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qM4-CM-VCc.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "qM4-CM-VCc.text"
        }

        return NSLocalizedString("qM4-CM-VCc.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Pickup at :
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func uclPuTqUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ucl-Pu-tqU.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Ucl-Pu-tqU.text"
        }

        return NSLocalizedString("Ucl-Pu-tqU.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Pickup date & time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func m8WExJO5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M8W-Ex-jO5.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "M8W-Ex-jO5.text"
        }

        return NSLocalizedString("M8W-Ex-jO5.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Place code inside the box
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func fPtK7BOxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fPt-k7-bOx.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "fPt-k7-bOx.text"
        }

        return NSLocalizedString("fPt-k7-bOx.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Promo code
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func mzdMzNEOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mzd-Mz-nEO.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "mzd-Mz-nEO.placeholder"
        }

        return NSLocalizedString("mzd-Mz-nEO.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: RECENT LOCATIONS
      ///
      /// Locales: en, ta-LK, si-LK
      static func yfo08TDeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yfo-08-TDe.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Yfo-08-TDe.text"
        }

        return NSLocalizedString("Yfo-08-TDe.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Rate Driver
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func pomf0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("952-PO-mF0.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "952-PO-mF0.text"
        }

        return NSLocalizedString("952-PO-mF0.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Ride Share
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func dAw41LPgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dAw-41-lPg.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "dAw-41-lPg.text"
        }

        return NSLocalizedString("dAw-41-lPg.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Road Pickup
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func cjuQfNpEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cju-qf-npE.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Cju-qf-npE.text"
        }

        return NSLocalizedString("Cju-qf-npE.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Road pickup
      ///
      /// Locales: en, ta-LK, si-LK
      static func lC0HLHD3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lC0-HL-HD3.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "lC0-HL-HD3.normalTitle"
        }

        return NSLocalizedString("lC0-HL-HD3.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Road pickup
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func lfxkeWiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6LF-xK-EWi.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "6LF-xK-EWi.normalTitle"
        }

        return NSLocalizedString("6LF-xK-EWi.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Rs 30
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func fqHYCTqmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fqH-yC-tqm.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "fqH-yC-tqm.text"
        }

        return NSLocalizedString("fqH-yC-tqm.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: SDWL
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func gbKqBM4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Gb-kq-bM4.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "0Gb-kq-bM4.text"
        }

        return NSLocalizedString("0Gb-kq-bM4.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: SEARCH
      ///
      /// Locales: en, ta-LK, si-LK
      static func zGTZQXxKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zGT-ZQ-xxK.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "zGT-ZQ-xxK.normalTitle"
        }

        return NSLocalizedString("zGT-ZQ-xxK.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: SKIP NOW
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func mt8RVhqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Mt-8R-vhq.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "6Mt-8R-vhq.normalTitle"
        }

        return NSLocalizedString("6Mt-8R-vhq.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sad
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func zMz0WOukText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zMz-0W-ouk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "zMz-0W-ouk.text"
        }

        return NSLocalizedString("zMz-0W-ouk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Satellite
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func nya07ThiSegmentTitles1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nya-07-Thi.segmentTitles[1]", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "nya-07-Thi.segmentTitles[1]"
        }

        return NSLocalizedString("nya-07-Thi.segmentTitles[1]", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func bBZMSCOvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bBZ-mS-cOv.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "bBZ-mS-cOv.normalTitle"
        }

        return NSLocalizedString("bBZ-mS-cOv.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Save Place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func djZBtVb3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DjZ-Bt-Vb3.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DjZ-Bt-Vb3.text"
        }

        return NSLocalizedString("DjZ-Bt-Vb3.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Save Place
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func wKbBIGXdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wKb-bI-gXd.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "wKb-bI-gXd.normalTitle"
        }

        return NSLocalizedString("wKb-bI-gXd.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func gvVMOJeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Gv-vM-OJe.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "9Gv-vM-OJe.normalTitle"
        }

        return NSLocalizedString("9Gv-vM-OJe.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func hVoEsMorNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HVo-es-Mor.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "HVo-es-Mor.normalTitle"
        }

        return NSLocalizedString("HVo-es-Mor.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func eEJHzZX3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eEJ-Hz-ZX3.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "eEJ-Hz-ZX3.normalTitle"
        }

        return NSLocalizedString("eEJ-Hz-ZX3.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func ll80PSEzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ll8-0P-SEz.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ll8-0P-SEz.normalTitle"
        }

        return NSLocalizedString("ll8-0P-SEz.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static func avyB23RjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Avy-B2-3Rj.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Avy-B2-3Rj.text"
        }

        return NSLocalizedString("Avy-B2-3Rj.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static func hfBNNGhiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hfB-NN-ghi.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "hfB-NN-ghi.text"
        }

        return NSLocalizedString("hfB-NN-ghi.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static func u5b9kWtAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("u5b-9k-WtA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "u5b-9k-WtA.text"
        }

        return NSLocalizedString("u5b-9k-WtA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, ta-LK, si-LK
      static func zYlJLIUfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZYl-JL-IUf.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "ZYl-JL-IUf.text"
        }

        return NSLocalizedString("ZYl-JL-IUf.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func k4wH5O8MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("k4w-h5-o8M.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "k4w-h5-o8M.text"
        }

        return NSLocalizedString("k4w-h5-o8M.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kzrGFS7hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kzr-GF-S7h.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kzr-GF-S7h.text"
        }

        return NSLocalizedString("kzr-GF-S7h.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sector 29, chandigarh
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func pUGMgGEeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pUG-Mg-gEe.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "pUG-Mg-gEe.text"
        }

        return NSLocalizedString("pUG-Mg-gEe.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func j68VcDn1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J68-vc-dn1.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "J68-vc-dn1.normalTitle"
        }

        return NSLocalizedString("J68-vc-dn1.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func qtHdIddText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Qt-hd-Idd.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7Qt-hd-Idd.text"
        }

        return NSLocalizedString("7Qt-hd-Idd.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func yrykweXdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YRY-KW-EXd.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "YRY-KW-EXd.text"
        }

        return NSLocalizedString("YRY-KW-EXd.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func pbUZ4AdVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pbU-Z4-adV.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "pbU-Z4-adV.normalTitle"
        }

        return NSLocalizedString("pbU-Z4-adV.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func xDtPIAhbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDt-PI-ahb.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "xDt-PI-ahb.text"
        }

        return NSLocalizedString("xDt-PI-ahb.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, ta-LK, si-LK
      static func wISUEGDeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wIS-UE-GDe.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "wIS-UE-GDe.text"
        }

        return NSLocalizedString("wIS-UE-GDe.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select Quantity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func y4PXROmMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y4P-xR-OmM.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "y4P-xR-OmM.text"
        }

        return NSLocalizedString("y4P-xR-OmM.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select Quantity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func yrIEJKjyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yrI-eJ-kjy.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "yrI-eJ-kjy.text"
        }

        return NSLocalizedString("yrI-eJ-kjy.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select Sub Model
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func uXiW8Ro8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uXi-W8-Ro8.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "uXi-W8-Ro8.text"
        }

        return NSLocalizedString("uXi-W8-Ro8.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select Vehicle type
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ieBCd3YhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IeB-cd-3Yh.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "IeB-cd-3Yh.text"
        }

        return NSLocalizedString("IeB-cd-3Yh.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select a ride
      ///
      /// Locales: en, ta-LK, si-LK
      static func iYcFK7zeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iYc-fK-7ze.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "iYc-fK-7ze.text"
        }

        return NSLocalizedString("iYc-fK-7ze.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select a service
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dcE0F3vxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DcE-0F-3vx.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "DcE-0F-3vx.text"
        }

        return NSLocalizedString("DcE-0F-3vx.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select an issue we can help with you
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kPaOBAaDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kPa-oB-AaD.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kPa-oB-AaD.text"
        }

        return NSLocalizedString("kPa-oB-AaD.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select brand
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func wbvFiButText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wbv-Fi-But.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "wbv-Fi-But.text"
        }

        return NSLocalizedString("wbv-Fi-But.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select capacity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func fqFWsP2hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fqF-Ws-P2h.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "fqF-Ws-P2h.text"
        }

        return NSLocalizedString("fqF-Ws-P2h.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select capacity
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func kMrU0L3yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kMr-u0-L3y.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "kMr-u0-L3y.text"
        }

        return NSLocalizedString("kMr-u0-L3y.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select date and time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func h3Z1oJEuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H3Z-1o-jEu.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "H3Z-1o-jEu.text"
        }

        return NSLocalizedString("H3Z-1o-jEu.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select date and time to proceed further
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func eq53dU17Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eq5-3d-u17.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Eq5-3d-u17.text"
        }

        return NSLocalizedString("Eq5-3d-u17.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select eToken
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func vzOL8G5cNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VzO-L8-g5c.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "VzO-L8-g5c.normalTitle"
        }

        return NSLocalizedString("VzO-L8-g5c.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select your exact pickup point
      ///
      /// Locales: en, ta-LK, si-LK
      static func ehfrlyMjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EHF-RL-YMj.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "EHF-RL-YMj.text"
        }

        return NSLocalizedString("EHF-RL-YMj.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Select your exact pickup point
      ///
      /// Locales: en, ta-LK, si-LK
      static func kxifqwUgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KXI-FQ-WUg.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "KXI-FQ-WUg.text"
        }

        return NSLocalizedString("KXI-FQ-WUg.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Selected Time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func q66QLCpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7q6-6Q-LCp.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "7q6-6Q-LCp.text"
        }

        return NSLocalizedString("7q6-6Q-LCp.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Selected date
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func nPVNkXCAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nPV-Nk-XCA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "nPV-Nk-XCA.text"
        }

        return NSLocalizedString("nPV-Nk-XCA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Set Pickup Time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func klt1aA2lNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Klt-1a-A2l.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Klt-1a-A2l.normalTitle"
        }

        return NSLocalizedString("Klt-1a-A2l.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Set your pickup spot
      ///
      /// Locales: en, ta-LK, si-LK
      static func evcGTQdpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("evc-gT-Qdp.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "evc-gT-Qdp.text"
        }

        return NSLocalizedString("evc-gT-Qdp.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Set your pickup spot
      ///
      /// Locales: en, ta-LK, si-LK
      static func wjYTfEYkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wjY-tf-EYk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "wjY-tf-EYk.text"
        }

        return NSLocalizedString("wjY-tf-EYk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Share Now
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xa89uK3GNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XA8-9u-k3G.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "XA8-9u-k3G.normalTitle"
        }

        return NSLocalizedString("XA8-9u-k3G.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Share your details
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func zlgS3NmTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zlg-S3-nmT.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "zlg-S3-nmT.text"
        }

        return NSLocalizedString("zlg-S3-nmT.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Shedule
      ///
      /// Locales: en, ta-LK, si-LK
      static func bm2D6Fp1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bm2-d6-Fp1.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "bm2-d6-Fp1.normalTitle"
        }

        return NSLocalizedString("bm2-d6-Fp1.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func jHFIyYWuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jHF-Iy-YWu.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "jHF-Iy-YWu.normalTitle"
        }

        return NSLocalizedString("jHF-Iy-YWu.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Sub total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func jm5IJHp0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jm5-iJ-Hp0.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "jm5-iJ-Hp0.text"
        }

        return NSLocalizedString("jm5-iJ-Hp0.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func qNiDd0MTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qNi-dd-0MT.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "qNi-dd-0MT.normalTitle"
        }

        return NSLocalizedString("qNi-dd-0MT.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Submit rating
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func b8kXEEfnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B8k-xE-Efn.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "B8k-xE-Efn.normalTitle"
        }

        return NSLocalizedString("B8k-xE-Efn.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Tester
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func dsoDoB4rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dso-Do-b4r.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Dso-Do-b4r.text"
        }

        return NSLocalizedString("Dso-Do-b4r.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Token
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func a0TdSb8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2A0-Td-sb8.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "2A0-Td-sb8.text"
        }

        return NSLocalizedString("2A0-Td-sb8.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func pv8MjAtWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pv8-mj-AtW.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Pv8-mj-AtW.text"
        }

        return NSLocalizedString("Pv8-mj-AtW.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func mKYRaSEkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mKY-ra-SEk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "mKY-ra-SEk.text"
        }

        return NSLocalizedString("mKY-ra-SEk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func peMUGXU3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("peM-UG-xU3.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "peM-UG-xU3.text"
        }

        return NSLocalizedString("peM-UG-xU3.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Total (incl. tax & fees)
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func yfZeYAAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Yf-ze-YAA.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "2Yf-ze-YAA.text"
        }

        return NSLocalizedString("2Yf-ze-YAA.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Type your reason for cancellation 
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func r8BCt4roText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R8B-ct-4ro.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "R8B-ct-4ro.text"
        }

        return NSLocalizedString("R8B-ct-4ro.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Upload Image
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func s8ACOIJVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S8A-cO-IJV.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "S8A-cO-IJV.text"
        }

        return NSLocalizedString("S8A-cO-IJV.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Use Credit Points
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func n7IZZ61eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N7I-zZ-61e.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "N7I-zZ-61e.text"
        }

        return NSLocalizedString("N7I-zZ-61e.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Version 1.0
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func dEfKjYWMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dEf-kj-yWM.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "dEf-kj-yWM.text"
        }

        return NSLocalizedString("dEf-kj-yWM.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Very Sad
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xrrQOM1eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xrr-qO-M1e.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Xrr-qO-M1e.text"
        }

        return NSLocalizedString("Xrr-qO-M1e.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: We are processing your request
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func vhyWlXLkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VHY-wl-XLk.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "VHY-wl-XLk.text"
        }

        return NSLocalizedString("VHY-wl-XLk.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where are you going ?
      ///
      /// Locales: en, ta-LK, si-LK
      static func qdn1dOm9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QDN-1d-om9.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "QDN-1d-om9.normalTitle"
        }

        return NSLocalizedString("QDN-1d-om9.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where are you going ?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func oaXFBbwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Oa-XF-Bbw.normalTitle", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "5Oa-XF-Bbw.normalTitle"
        }

        return NSLocalizedString("5Oa-XF-Bbw.normalTitle", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where to drop?
      ///
      /// Locales: en, ta-LK, si-LK
      static func vSxYFIfDPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vSx-YF-IfD.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "vSx-YF-IfD.placeholder"
        }

        return NSLocalizedString("vSx-YF-IfD.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where to drop?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func eSHWuIduPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eSH-wu-Idu.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "eSH-wu-Idu.placeholder"
        }

        return NSLocalizedString("eSH-wu-Idu.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where to pick?
      ///
      /// Locales: en, ta-LK, si-LK
      static func vywXEFBoPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vyw-xE-fBo.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "vyw-xE-fBo.placeholder"
        }

        return NSLocalizedString("vyw-xE-fBo.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where to pick?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xjKPXP31Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XjK-pX-P31.placeholder", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "XjK-pX-P31.placeholder"
        }

        return NSLocalizedString("XjK-pX-P31.placeholder", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Where to?
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func fi5D3If3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FI5-D3-If3.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "FI5-D3-If3.text"
        }

        return NSLocalizedString("FI5-D3-If3.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: Your fare will be the price presented before the trip or based on the rates below and other applicable surcharges and adjustment.
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func nGp1JRiDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nGp-1J-riD.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "nGp-1J-riD.text"
        }

        return NSLocalizedString("nGp-1J-riD.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: bike
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func g8JENNC0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g8J-eN-NC0.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "g8J-eN-NC0.text"
        }

        return NSLocalizedString("g8J-eN-NC0.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: cash - 125.50 Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func ez01mBDrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ez0-1m-BDr.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Ez0-1m-BDr.text"
        }

        return NSLocalizedString("Ez0-1m-BDr.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: fgdgdfgdf
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func miYNiDWTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("miY-ni-dWT.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "miY-ni-dWT.text"
        }

        return NSLocalizedString("miY-ni-dWT.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: in Rs
      ///
      /// Locales: en, ta-LK, si-LK
      static func c9nS16EfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c9n-s1-6Ef.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "c9n-s1-6Ef.text"
        }

        return NSLocalizedString("c9n-s1-6Ef.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: in Rs
      ///
      /// Locales: en, ta-LK, si-LK
      static func q4ADI5pHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q4A-dI-5pH.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Q4A-dI-5pH.text"
        }

        return NSLocalizedString("Q4A-dI-5pH.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: in Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func aHAoBLuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9aH-ao-bLu.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "9aH-ao-bLu.text"
        }

        return NSLocalizedString("9aH-ao-bLu.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: in Rs
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func foqLXQ0WText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Foq-lX-Q0W.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Foq-lX-Q0W.text"
        }

        return NSLocalizedString("Foq-lX-Q0W.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: label
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func rYfHDWCRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rYf-hD-wCR.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "rYf-hD-wCR.text"
        }

        return NSLocalizedString("rYf-hD-wCR.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: service
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func r6gZOE0tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R6g-zO-E0t.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "R6g-zO-E0t.text"
        }

        return NSLocalizedString("R6g-zO-E0t.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: status
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func jgSOgXIjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JgS-Og-xIj.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "JgS-Og-xIj.text"
        }

        return NSLocalizedString("JgS-Og-xIj.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: status
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func xchNF3nGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xch-NF-3nG.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Xch-NF-3nG.text"
        }

        return NSLocalizedString("Xch-NF-3nG.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func gfdVc6AQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gfd-Vc-6AQ.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Gfd-Vc-6AQ.text"
        }

        return NSLocalizedString("Gfd-Vc-6AQ.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: time
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, de, sq
      static func rec0LCUpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rec-0L-cUp.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "Rec-0L-cUp.text"
        }

        return NSLocalizedString("Rec-0L-cUp.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      /// en translation: view deals available via companies
      ///
      /// Locales: en, zh-Hans, es, ur, ta-LK, si-LK, hi, fr, it, ja, nl, ja, sq
      static func j5LYx6R1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j5L-Yx-6R1.text", tableName: "BookService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BookService", preferredLanguages: preferredLanguages) else {
          return "j5L-Yx-6R1.text"
        }

        return NSLocalizedString("j5L-Yx-6R1.text", tableName: "BookService", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.cameraUI` struct is generated, and contains static references to 12 localization keys.
    struct cameraUI {
      /// en translation: AE/AF LOCK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let aeaf_LOCK_TEXT = Rswift.StringResource(key: "AEAF_LOCK_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: All Photos in Library
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let all_PHOTOS_IN_LIBRARY = Rswift.StringResource(key: "ALL_PHOTOS_IN_LIBRARY", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let hdr_AUTO = Rswift.StringResource(key: "HDR_AUTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Camera Roll
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let camera_ROLL = Rswift.StringResource(key: "CAMERA_ROLL", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let api_CANCEL_TITLE = Rswift.StringResource(key: "API_CANCEL_TITLE", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let hdr_OFF = Rswift.StringResource(key: "HDR_OFF", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let timer_OFF_TEXT = Rswift.StringResource(key: "TIMER_OFF_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: On
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let hdr_ON = Rswift.StringResource(key: "HDR_ON", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: PHOTO
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let photO = Rswift.StringResource(key: "PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Retake
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let retakE = Rswift.StringResource(key: "RETAKE", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let placePickerTitle = Rswift.StringResource(key: "PlacePickerTitle", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: USE PHOTO
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let use_PHOTO = Rswift.StringResource(key: "USE_PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)

      /// en translation: AE/AF LOCK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func aeaf_LOCK_TEXT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AEAF_LOCK_TEXT", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "AEAF_LOCK_TEXT"
        }

        return NSLocalizedString("AEAF_LOCK_TEXT", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: All Photos in Library
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func all_PHOTOS_IN_LIBRARY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ALL_PHOTOS_IN_LIBRARY", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "ALL_PHOTOS_IN_LIBRARY"
        }

        return NSLocalizedString("ALL_PHOTOS_IN_LIBRARY", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func hdr_AUTO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HDR_AUTO", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "HDR_AUTO"
        }

        return NSLocalizedString("HDR_AUTO", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Camera Roll
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func camera_ROLL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CAMERA_ROLL", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "CAMERA_ROLL"
        }

        return NSLocalizedString("CAMERA_ROLL", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func api_CANCEL_TITLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("API_CANCEL_TITLE", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "API_CANCEL_TITLE"
        }

        return NSLocalizedString("API_CANCEL_TITLE", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func hdr_OFF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HDR_OFF", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "HDR_OFF"
        }

        return NSLocalizedString("HDR_OFF", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func timer_OFF_TEXT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TIMER_OFF_TEXT", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "TIMER_OFF_TEXT"
        }

        return NSLocalizedString("TIMER_OFF_TEXT", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func hdr_ON(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HDR_ON", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "HDR_ON"
        }

        return NSLocalizedString("HDR_ON", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: PHOTO
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func photO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PHOTO", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "PHOTO"
        }

        return NSLocalizedString("PHOTO", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Retake
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func retakE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RETAKE", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "RETAKE"
        }

        return NSLocalizedString("RETAKE", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func placePickerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PlacePickerTitle", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "PlacePickerTitle"
        }

        return NSLocalizedString("PlacePickerTitle", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      /// en translation: USE PHOTO
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func use_PHOTO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USE_PHOTO", tableName: "CameraUI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CameraUI", preferredLanguages: preferredLanguages) else {
          return "USE_PHOTO"
        }

        return NSLocalizedString("USE_PHOTO", tableName: "CameraUI", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.drinkingWater` struct is generated, and contains static references to 71 localization keys.
    struct drinkingWater {
      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let bphOQMe8Text = Rswift.StringResource(key: "Bph-oQ-me8.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let iFX9cY2hText = Rswift.StringResource(key: "iFX-9c-Y2h.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let oc59DT3PText = Rswift.StringResource(key: "oc5-9D-t3P.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wgjGbF2IText = Rswift.StringResource(key: "Wgj-gb-F2I.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:   
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ai8WsQHXText = Rswift.StringResource(key: "AI8-ws-QHX.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:   
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let iQC2uKbDText = Rswift.StringResource(key: "iQC-2u-kbD.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:     
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dpCV9SYjText = Rswift.StringResource(key: "DpC-V9-SYj.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:  2 gallon x 1
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hAG43ZbqText = Rswift.StringResource(key: "hAG-43-Zbq.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dsBCM3YuText = Rswift.StringResource(key: "DsB-CM-3Yu.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dtxQtAkAText = Rswift.StringResource(key: "dtx-qt-akA.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eAvFk3OWText = Rswift.StringResource(key: "eAv-fk-3OW.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fxy9TGvvText = Rswift.StringResource(key: "fxy-9T-gvv.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let g64S8YqhText = Rswift.StringResource(key: "g64-S8-yqh.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hLG3yRSDText = Rswift.StringResource(key: "hLG-3y-RSD.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rlWBuXCJText = Rswift.StringResource(key: "RlW-bu-XCJ.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let i8tGdLcmNormalTitle = Rswift.StringResource(key: "I8t-gd-lcm.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Aquafina
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let g2aJrGWXText = Rswift.StringResource(key: "g2a-Jr-gWX.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Available tokens
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let v5uO7ZAsText = Rswift.StringResource(key: "V5u-O7-zAs.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: BUY
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kAgN21qiNormalTitle = Rswift.StringResource(key: "KAg-N2-1qi.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let c9lFsL9INormalTitle = Rswift.StringResource(key: "c9l-fs-l9I.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eqLIID63NormalTitle = Rswift.StringResource(key: "eqL-II-d63.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gfsU649TNormalTitle = Rswift.StringResource(key: "gfs-U6-49T.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let sKsUkG1XNormalTitle = Rswift.StringResource(key: "sKs-uk-g1X.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vlvMyMdGNormalTitle = Rswift.StringResource(key: "Vlv-My-MdG.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel Order
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let c7BWNOGlNormalTitle = Rswift.StringResource(key: "C7B-WN-OGl.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cyxGv0wNNormalTitle = Rswift.StringResource(key: "CYX-Gv-0wN.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Choose a payment method
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vlMVuMYSText = Rswift.StringResource(key: "vlM-Vu-mYS.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Companies serving in your area
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jGOLFOg9Text = Rswift.StringResource(key: "jGO-LF-og9.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Delivers on -
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let s1yArPzrText = Rswift.StringResource(key: "s1y-ar-pzr.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Delivers on:
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let xu4NDHFaText = Rswift.StringResource(key: "xu4-nD-HFa.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Do you  have  water bottles with you?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ahPF9XDWText = Rswift.StringResource(key: "AhP-f9-xDW.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Driver is now serving you
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ygQU39fpText = Rswift.StringResource(key: "YgQ-U3-9fp.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Driver name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ypk4FByText = Rswift.StringResource(key: "6YP-K4-FBy.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Drop off location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let h9YI1WlyText = Rswift.StringResource(key: "H9Y-i1-Wly.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cfIHO3vDText = Rswift.StringResource(key: "cfI-HO-3vD.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let foX8oHfaText = Rswift.StringResource(key: "foX-8o-Hfa.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vwHNqCWhText = Rswift.StringResource(key: "vwH-nq-cWh.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wjRYYHdSText = Rswift.StringResource(key: "WjR-yY-HdS.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ac4Mv6X4Text = Rswift.StringResource(key: "ac4-mv-6X4.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Tokens Used
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let uTbH9KoXText = Rswift.StringResource(key: "uTb-H9-koX.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter pickup location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let noHGSNhPlaceholder = Rswift.StringResource(key: "3no-hG-sNh.placeholder", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Excellent
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let xxwdeTlHText = Rswift.StringResource(key: "XXW-dE-TlH.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let sOz1hYt2Text = Rswift.StringResource(key: "sOz-1h-yt2.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Happy
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let bqbMQKaeText = Rswift.StringResource(key: "Bqb-mQ-kae.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cx7LnRqNText = Rswift.StringResource(key: "cx7-Ln-RqN.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eOmZSG27Text = Rswift.StringResource(key: "eOm-ZS-G27.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let geeMS54iText = Rswift.StringResource(key: "Gee-MS-54i.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kz154ZWpText = Rswift.StringResource(key: "KZ1-54-zWp.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let lp2PGJw2Text = Rswift.StringResource(key: "lp2-pG-jw2.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nsI4XZF3Text = Rswift.StringResource(key: "nsI-4X-ZF3.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let uy4T0TynText = Rswift.StringResource(key: "Uy4-T0-Tyn.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rDg1b0zCNormalTitle = Rswift.StringResource(key: "rDg-1b-0zC.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rDg1b0zCSelectedTitle = Rswift.StringResource(key: "rDg-1b-0zC.selectedTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fLqG0GUHNormalTitle = Rswift.StringResource(key: "fLq-g0-GUH.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fLqG0GUHSelectedTitle = Rswift.StringResource(key: "fLq-g0-GUH.selectedTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let zZQ2q7MWNormalTitle = Rswift.StringResource(key: "zZQ-2q-7MW.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Purchased
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yy3MIRhWNormalTitle = Rswift.StringResource(key: "Yy3-mI-RhW.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Purchased
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yy3MIRhWSelectedTitle = Rswift.StringResource(key: "Yy3-mI-RhW.selectedTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Rate
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vEkUnCXUText = Rswift.StringResource(key: "VEk-Un-cXU.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let alw7xBqDNormalTitle = Rswift.StringResource(key: "ALW-7x-BqD.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Sad
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eB13cWText = Rswift.StringResource(key: "85e-b1-3cW.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Search Area
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let m53cEuaPlaceholder = Rswift.StringResource(key: "4m5-3c-eua.placeholder", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select quantity
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let sfqVp8XPText = Rswift.StringResource(key: "SFQ-Vp-8XP.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Submit rating
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ekNSECpBNormalTitle = Rswift.StringResource(key: "ekN-SE-CpB.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let haj7kFkzText = Rswift.StringResource(key: "HAJ-7k-fkz.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Track Order
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let lj6AyBiBNormalTitle = Rswift.StringResource(key: "Lj6-Ay-BiB.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Used tokens
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let o0eJYJqOText = Rswift.StringResource(key: "o0e-jY-jqO.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Very Sad
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wv4vOPhText = Rswift.StringResource(key: "1WV-4v-oPh.text", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: View Offers
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cRE96o6NormalTitle = Rswift.StringResource(key: "0cR-e9-6o6.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fVxTqCc0NormalTitle = Rswift.StringResource(key: "FVx-tq-Cc0.normalTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fVxTqCc0SelectedTitle = Rswift.StringResource(key: "FVx-tq-Cc0.selectedTitle", tableName: "DrinkingWater", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)

      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func bphOQMe8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bph-oQ-me8.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Bph-oQ-me8.text"
        }

        return NSLocalizedString("Bph-oQ-me8.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func iFX9cY2hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iFX-9c-Y2h.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "iFX-9c-Y2h.text"
        }

        return NSLocalizedString("iFX-9c-Y2h.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func oc59DT3PText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oc5-9D-t3P.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "oc5-9D-t3P.text"
        }

        return NSLocalizedString("oc5-9D-t3P.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wgjGbF2IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wgj-gb-F2I.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Wgj-gb-F2I.text"
        }

        return NSLocalizedString("Wgj-gb-F2I.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:   
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ai8WsQHXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AI8-ws-QHX.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "AI8-ws-QHX.text"
        }

        return NSLocalizedString("AI8-ws-QHX.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:   
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func iQC2uKbDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iQC-2u-kbD.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "iQC-2u-kbD.text"
        }

        return NSLocalizedString("iQC-2u-kbD.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:     
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dpCV9SYjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DpC-V9-SYj.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "DpC-V9-SYj.text"
        }

        return NSLocalizedString("DpC-V9-SYj.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation:  2 gallon x 1
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hAG43ZbqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hAG-43-Zbq.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "hAG-43-Zbq.text"
        }

        return NSLocalizedString("hAG-43-Zbq.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dsBCM3YuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DsB-CM-3Yu.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "DsB-CM-3Yu.text"
        }

        return NSLocalizedString("DsB-CM-3Yu.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dtxQtAkAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dtx-qt-akA.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "dtx-qt-akA.text"
        }

        return NSLocalizedString("dtx-qt-akA.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eAvFk3OWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eAv-fk-3OW.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "eAv-fk-3OW.text"
        }

        return NSLocalizedString("eAv-fk-3OW.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fxy9TGvvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fxy-9T-gvv.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "fxy-9T-gvv.text"
        }

        return NSLocalizedString("fxy-9T-gvv.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func g64S8YqhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g64-S8-yqh.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "g64-S8-yqh.text"
        }

        return NSLocalizedString("g64-S8-yqh.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: ---
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hLG3yRSDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hLG-3y-RSD.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "hLG-3y-RSD.text"
        }

        return NSLocalizedString("hLG-3y-RSD.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rlWBuXCJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RlW-bu-XCJ.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "RlW-bu-XCJ.text"
        }

        return NSLocalizedString("RlW-bu-XCJ.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func i8tGdLcmNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I8t-gd-lcm.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "I8t-gd-lcm.normalTitle"
        }

        return NSLocalizedString("I8t-gd-lcm.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Aquafina
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func g2aJrGWXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g2a-Jr-gWX.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "g2a-Jr-gWX.text"
        }

        return NSLocalizedString("g2a-Jr-gWX.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Available tokens
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func v5uO7ZAsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V5u-O7-zAs.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "V5u-O7-zAs.text"
        }

        return NSLocalizedString("V5u-O7-zAs.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: BUY
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kAgN21qiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KAg-N2-1qi.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "KAg-N2-1qi.normalTitle"
        }

        return NSLocalizedString("KAg-N2-1qi.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func c9lFsL9INormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c9l-fs-l9I.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "c9l-fs-l9I.normalTitle"
        }

        return NSLocalizedString("c9l-fs-l9I.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eqLIID63NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eqL-II-d63.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "eqL-II-d63.normalTitle"
        }

        return NSLocalizedString("eqL-II-d63.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gfsU649TNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gfs-U6-49T.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "gfs-U6-49T.normalTitle"
        }

        return NSLocalizedString("gfs-U6-49T.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func sKsUkG1XNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sKs-uk-g1X.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "sKs-uk-g1X.normalTitle"
        }

        return NSLocalizedString("sKs-uk-g1X.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vlvMyMdGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vlv-My-MdG.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Vlv-My-MdG.normalTitle"
        }

        return NSLocalizedString("Vlv-My-MdG.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Order
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func c7BWNOGlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C7B-WN-OGl.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "C7B-WN-OGl.normalTitle"
        }

        return NSLocalizedString("C7B-WN-OGl.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cyxGv0wNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CYX-Gv-0wN.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "CYX-Gv-0wN.normalTitle"
        }

        return NSLocalizedString("CYX-Gv-0wN.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Choose a payment method
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vlMVuMYSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vlM-Vu-mYS.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "vlM-Vu-mYS.text"
        }

        return NSLocalizedString("vlM-Vu-mYS.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Companies serving in your area
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jGOLFOg9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jGO-LF-og9.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "jGO-LF-og9.text"
        }

        return NSLocalizedString("jGO-LF-og9.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Delivers on -
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func s1yArPzrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s1y-ar-pzr.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "s1y-ar-pzr.text"
        }

        return NSLocalizedString("s1y-ar-pzr.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Delivers on:
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func xu4NDHFaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xu4-nD-HFa.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "xu4-nD-HFa.text"
        }

        return NSLocalizedString("xu4-nD-HFa.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Do you  have  water bottles with you?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ahPF9XDWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AhP-f9-xDW.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "AhP-f9-xDW.text"
        }

        return NSLocalizedString("AhP-f9-xDW.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Driver is now serving you
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ygQU39fpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YgQ-U3-9fp.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "YgQ-U3-9fp.text"
        }

        return NSLocalizedString("YgQ-U3-9fp.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Driver name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ypk4FByText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6YP-K4-FBy.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "6YP-K4-FBy.text"
        }

        return NSLocalizedString("6YP-K4-FBy.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Drop off location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func h9YI1WlyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H9Y-i1-Wly.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "H9Y-i1-Wly.text"
        }

        return NSLocalizedString("H9Y-i1-Wly.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cfIHO3vDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cfI-HO-3vD.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "cfI-HO-3vD.text"
        }

        return NSLocalizedString("cfI-HO-3vD.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func foX8oHfaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("foX-8o-Hfa.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "foX-8o-Hfa.text"
        }

        return NSLocalizedString("foX-8o-Hfa.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vwHNqCWhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vwH-nq-cWh.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "vwH-nq-cWh.text"
        }

        return NSLocalizedString("vwH-nq-cWh.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wjRYYHdSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WjR-yY-HdS.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "WjR-yY-HdS.text"
        }

        return NSLocalizedString("WjR-yY-HdS.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ac4Mv6X4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ac4-mv-6X4.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "ac4-mv-6X4.text"
        }

        return NSLocalizedString("ac4-mv-6X4.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: E-Tokens Used
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func uTbH9KoXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uTb-H9-koX.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "uTb-H9-koX.text"
        }

        return NSLocalizedString("uTb-H9-koX.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Enter pickup location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func noHGSNhPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3no-hG-sNh.placeholder", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "3no-hG-sNh.placeholder"
        }

        return NSLocalizedString("3no-hG-sNh.placeholder", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Excellent
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func xxwdeTlHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XXW-dE-TlH.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "XXW-dE-TlH.text"
        }

        return NSLocalizedString("XXW-dE-TlH.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func sOz1hYt2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sOz-1h-yt2.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "sOz-1h-yt2.text"
        }

        return NSLocalizedString("sOz-1h-yt2.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Happy
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func bqbMQKaeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bqb-mQ-kae.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Bqb-mQ-kae.text"
        }

        return NSLocalizedString("Bqb-mQ-kae.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cx7LnRqNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cx7-Ln-RqN.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "cx7-Ln-RqN.text"
        }

        return NSLocalizedString("cx7-Ln-RqN.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eOmZSG27Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eOm-ZS-G27.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "eOm-ZS-G27.text"
        }

        return NSLocalizedString("eOm-ZS-G27.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func geeMS54iText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gee-MS-54i.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Gee-MS-54i.text"
        }

        return NSLocalizedString("Gee-MS-54i.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kz154ZWpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KZ1-54-zWp.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "KZ1-54-zWp.text"
        }

        return NSLocalizedString("KZ1-54-zWp.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func lp2PGJw2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lp2-pG-jw2.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "lp2-pG-jw2.text"
        }

        return NSLocalizedString("lp2-pG-jw2.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nsI4XZF3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nsI-4X-ZF3.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "nsI-4X-ZF3.text"
        }

        return NSLocalizedString("nsI-4X-ZF3.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func uy4T0TynText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uy4-T0-Tyn.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Uy4-T0-Tyn.text"
        }

        return NSLocalizedString("Uy4-T0-Tyn.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rDg1b0zCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rDg-1b-0zC.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "rDg-1b-0zC.normalTitle"
        }

        return NSLocalizedString("rDg-1b-0zC.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rDg1b0zCSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rDg-1b-0zC.selectedTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "rDg-1b-0zC.selectedTitle"
        }

        return NSLocalizedString("rDg-1b-0zC.selectedTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fLqG0GUHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fLq-g0-GUH.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "fLq-g0-GUH.normalTitle"
        }

        return NSLocalizedString("fLq-g0-GUH.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fLqG0GUHSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fLq-g0-GUH.selectedTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "fLq-g0-GUH.selectedTitle"
        }

        return NSLocalizedString("fLq-g0-GUH.selectedTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func zZQ2q7MWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zZQ-2q-7MW.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "zZQ-2q-7MW.normalTitle"
        }

        return NSLocalizedString("zZQ-2q-7MW.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Purchased
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yy3MIRhWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yy3-mI-RhW.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Yy3-mI-RhW.normalTitle"
        }

        return NSLocalizedString("Yy3-mI-RhW.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Purchased
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yy3MIRhWSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yy3-mI-RhW.selectedTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Yy3-mI-RhW.selectedTitle"
        }

        return NSLocalizedString("Yy3-mI-RhW.selectedTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Rate
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vEkUnCXUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VEk-Un-cXU.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "VEk-Un-cXU.text"
        }

        return NSLocalizedString("VEk-Un-cXU.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func alw7xBqDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ALW-7x-BqD.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "ALW-7x-BqD.normalTitle"
        }

        return NSLocalizedString("ALW-7x-BqD.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Sad
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eB13cWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("85e-b1-3cW.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "85e-b1-3cW.text"
        }

        return NSLocalizedString("85e-b1-3cW.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Search Area
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func m53cEuaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4m5-3c-eua.placeholder", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "4m5-3c-eua.placeholder"
        }

        return NSLocalizedString("4m5-3c-eua.placeholder", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Select quantity
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func sfqVp8XPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SFQ-Vp-8XP.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "SFQ-Vp-8XP.text"
        }

        return NSLocalizedString("SFQ-Vp-8XP.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Submit rating
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ekNSECpBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ekN-SE-CpB.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "ekN-SE-CpB.normalTitle"
        }

        return NSLocalizedString("ekN-SE-CpB.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func haj7kFkzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HAJ-7k-fkz.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "HAJ-7k-fkz.text"
        }

        return NSLocalizedString("HAJ-7k-fkz.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Track Order
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func lj6AyBiBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lj6-Ay-BiB.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "Lj6-Ay-BiB.normalTitle"
        }

        return NSLocalizedString("Lj6-Ay-BiB.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Used tokens
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func o0eJYJqOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o0e-jY-jqO.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "o0e-jY-jqO.text"
        }

        return NSLocalizedString("o0e-jY-jqO.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Very Sad
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wv4vOPhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1WV-4v-oPh.text", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "1WV-4v-oPh.text"
        }

        return NSLocalizedString("1WV-4v-oPh.text", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: View Offers
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cRE96o6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0cR-e9-6o6.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "0cR-e9-6o6.normalTitle"
        }

        return NSLocalizedString("0cR-e9-6o6.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fVxTqCc0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FVx-tq-Cc0.normalTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "FVx-tq-Cc0.normalTitle"
        }

        return NSLocalizedString("FVx-tq-Cc0.normalTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fVxTqCc0SelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FVx-tq-Cc0.selectedTitle", tableName: "DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrinkingWater", preferredLanguages: preferredLanguages) else {
          return "FVx-tq-Cc0.selectedTitle"
        }

        return NSLocalizedString("FVx-tq-Cc0.selectedTitle", tableName: "DrinkingWater", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeSectionHeader` struct is generated, and contains static references to 3 localization keys.
    struct homeSectionHeader {
      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let sfc9dI7GText = Rswift.StringResource(key: "SFC-9d-I7G.text", tableName: "HomeSectionHeader", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let dgDZeCw0Text = Rswift.StringResource(key: "dgD-Ze-Cw0.text", tableName: "HomeSectionHeader", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: Ver más
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let l8kVkQuANormalTitle = Rswift.StringResource(key: "L8k-Vk-QuA.normalTitle", tableName: "HomeSectionHeader", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)

      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func sfc9dI7GText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SFC-9d-I7G.text", tableName: "HomeSectionHeader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeSectionHeader", preferredLanguages: preferredLanguages) else {
          return "SFC-9d-I7G.text"
        }

        return NSLocalizedString("SFC-9d-I7G.text", tableName: "HomeSectionHeader", bundle: bundle, comment: "")
      }

      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func dgDZeCw0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dgD-Ze-Cw0.text", tableName: "HomeSectionHeader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeSectionHeader", preferredLanguages: preferredLanguages) else {
          return "dgD-Ze-Cw0.text"
        }

        return NSLocalizedString("dgD-Ze-Cw0.text", tableName: "HomeSectionHeader", bundle: bundle, comment: "")
      }

      /// es translation: Ver más
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func l8kVkQuANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L8k-Vk-QuA.normalTitle", tableName: "HomeSectionHeader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeSectionHeader", preferredLanguages: preferredLanguages) else {
          return "L8k-Vk-QuA.normalTitle"
        }

        return NSLocalizedString("L8k-Vk-QuA.normalTitle", tableName: "HomeSectionHeader", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 797 localization keys.
    struct localizable {
      /// en translation:  Mins
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let mins = Rswift.StringResource(key: "mins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation:  Outstanding from previous trip
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let outstandingFromPreviousTrip = Rswift.StringResource(key: "Outstanding from previous trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation:  and 
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let and = Rswift.StringResource(key: "and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation:  not available 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let notAvailable = Rswift.StringResource(key: "Not Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: %@ *
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormRequiredTemplate = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.requiredTemplate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: %@ joined the chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatAgentJoined = Rswift.StringResource(key: "ios.ZDCChat.agentJoined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: %@ left the chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatAgentLeft = Rswift.StringResource(key: "ios.ZDCChat.agentLeft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: %@ needs access to your camera
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatAccessCamera = Rswift.StringResource(key: "ios.ZDCChat.access.camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: %@ needs access to your photos
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatAccessGallery = Rswift.StringResource(key: "ios.ZDCChat.access.gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: 4 Star and above
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let starAndAbove = Rswift.StringResource(key: "4 Star and above", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: About Us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let aboutUs = Rswift.StringResource(key: "About Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: About Us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let about_us = Rswift.StringResource(key: "about_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: About us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let settingAbout = Rswift.StringResource(key: "Setting.About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add Home Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addHomeAddress = Rswift.StringResource(key: "Add Home Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add Home Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeAdd_Home_Address = Rswift.StringResource(key: "Home.Add_Home_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add Trusted Contact
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addTrustedContact = Rswift.StringResource(key: "AddTrustedContact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add Work Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addWorkAddress = Rswift.StringResource(key: "Add Work Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add Work Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeAdd_Work_Address = Rswift.StringResource(key: "Home.Add_Work_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add a comment here ...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderRatingTextPalceholder = Rswift.StringResource(key: "Order.RatingTextPalceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Add a comment here…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let add_comments_here = Rswift.StringResource(key: "add_comments_here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Adding products from different suppliers will clear your cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addingProductsFromDiffrentSuppliersWillClearYourCart = Rswift.StringResource(key: "Adding products from diffrent suppliers will clear your cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Adding products from promotions will clear your cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addingProductsFromPromotionsWillClearYourCart = Rswift.StringResource(key: "Adding products from promotions will clear your cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Address Line First
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addressLineFirst = Rswift.StringResource(key: "Address Line First", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Address Line Second
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let addressLineSecond = Rswift.StringResource(key: "Address Line Second", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Agent is not assigned to this order
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let agentIsNotAssignedToThisOrder = Rswift.StringResource(key: "Agent is not assigned to this order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Alert
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationAlert = Rswift.StringResource(key: "Validation.Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Alert
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let alertTitle = Rswift.StringResource(key: "alertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Already have an account?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let haveAlreadyAccount = Rswift.StringResource(key: "haveAlreadyAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Amount should be more than 0.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let walletAddAmountLess = Rswift.StringResource(key: "Wallet.AddAmountLess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: An OTP will be sent on your entered mobile number for verification.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let landingVCOtpWillBeSent = Rswift.StringResource(key: "LandingVC.OtpWillBeSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Approval Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenApprovalPending = Rswift.StringResource(key: "eToken.approvalPending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Approval Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenApprovalPending = Rswift.StringResource(key: "etoken.ApprovalPending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to Signout?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let logout_confirmation = Rswift.StringResource(key: "logout_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to buy this e-token?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buy_etoken_confirmation = Rswift.StringResource(key: "buy_etoken_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to delete this address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let areYouSureYouWantToDeleteThisAddress = Rswift.StringResource(key: "Are you sure you want to delete this address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en, nl, de, zh-Hans, ja, si-LK, sq
      static let areYouSureYouWantToLogout = Rswift.StringResource(key: "Are you sure you want to logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to remove card?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let remove_card_Confirmation = Rswift.StringResource(key: "remove_card_Confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you want to send Panic Request to your nearby?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let areYouSureYouWantToSendPanicRequestToYourNearby = Rswift.StringResource(key: "Are you sure you want to send Panic Request to your nearby?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Are you sure you would like to end this chat?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatChatEndedMessage = Rswift.StringResource(key: "ios.ZDCChat.chatEndedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Are you sure?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let areYouSure = Rswift.StringResource(key: "Are you sure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Area
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let area = Rswift.StringResource(key: "Area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: At Place Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let atplaceservicE = Rswift.StringResource(key: "AT PLACE SERVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Awaiting Shipment
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let awaitingShipment = Rswift.StringResource(key: "Awaiting Shipment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: BOOK AGAIN
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookagaiN = Rswift.StringResource(key: "BOOK AGAIN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: BOOKED
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookeD = Rswift.StringResource(key: "BOOKED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Baby sitter
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let babySitter = Rswift.StringResource(key: "Baby sitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatBackButton = Rswift.StringResource(key: "ios.ZDCChat.backButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let navigationButtonBack = Rswift.StringResource(key: "NavigationButton.Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Base fare
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let base_fair = Rswift.StringResource(key: "base_fair", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Base fare
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderBaseFair = Rswift.StringResource(key: "Order.BaseFair", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Beauty salon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let beautySalon = Rswift.StringResource(key: "Beauty salon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Before you end this chat, would you like to email a transcript?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatTranscriptEmailAlertMessage = Rswift.StringResource(key: "ios.ZDCChat.transcriptEmailAlert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Bletani
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let appName = Rswift.StringResource(key: "AppName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let book = Rswift.StringResource(key: "book", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderBook = Rswift.StringResource(key: "Order.Book", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let book_now = Rswift.StringResource(key: "book_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buttonTitleBookNow = Rswift.StringResource(key: "Button.Title.BookNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book a delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeBook_a_delivery = Rswift.StringResource(key: "Home.Book_a_delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book a service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeBook_a_service = Rswift.StringResource(key: "Home.Book_a_service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book a service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuBook_service = Rswift.StringResource(key: "SideMenu.Book_service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Book a taxi
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuBook_a_taxi = Rswift.StringResource(key: "SideMenu.Book_a_taxi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Booking Details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let booking_details = Rswift.StringResource(key: "booking_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Booking Details
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingDetails = Rswift.StringResource(key: "Booking Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Booking History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingHistory = Rswift.StringResource(key: "Booking History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Booking placed successfully
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingPlacedSuccessfully = Rswift.StringResource(key: "Booking placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionBookings = Rswift.StringResource(key: "LeftMenuOption.Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Bookings
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookings = Rswift.StringResource(key: "bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Both
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let both = Rswift.StringResource(key: "Both", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Breakdown
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let breakdown = Rswift.StringResource(key: "breakdown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Breakdown Recovery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceTow = Rswift.StringResource(key: "Service.Tow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Breakdown Recovery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let tow = Rswift.StringResource(key: "tow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Bronze
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let bronze = Rswift.StringResource(key: "Bronze", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Buraq 24
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buraq_24 = Rswift.StringResource(key: "buraq_24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Buraq24-Customer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Busy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let busy = Rswift.StringResource(key: "Busy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Buy E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buy_etoken = Rswift.StringResource(key: "buy_etoken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: By creating account you agree
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let by_creating_account_you_agree = Rswift.StringResource(key: "by_creating_account_you_agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: By creating account you agree
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let landingVCAccountAgreement = Rswift.StringResource(key: "LandingVC.AccountAgreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: By signing up you agree to the 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static let bySigningUpYouAgreeToThe = Rswift.StringResource(key: "By signing up you agree to the ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: CAD
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let currency = Rswift.StringResource(key: "currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CANCEL BOOKING
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancelbookinG = Rswift.StringResource(key: "CANCEL BOOKING", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CANCEL ORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancelordeR = Rswift.StringResource(key: "CANCEL ORDER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CARD NUMBER
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let cardNumberPl = Rswift.StringResource(key: "CardNumberPl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CARDHOLDER NAME
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let cardNamePl = Rswift.StringResource(key: "CardNamePl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CONFIRM BOOKING
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let confirmbookinG = Rswift.StringResource(key: "CONFIRM BOOKING", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CONFIRM ORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let confirmordeR = Rswift.StringResource(key: "CONFIRM ORDER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CONTINUE WITH APPLE
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let continue_WITH_APPLE = Rswift.StringResource(key: "CONTINUE_WITH_APPLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let cvCtxt = Rswift.StringResource(key: "CVCtxt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let dialog_camera = Rswift.StringResource(key: "dialog_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Camera Unavailable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let cameraUnavailable = Rswift.StringResource(key: "Camera Unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancel_Ride = Rswift.StringResource(key: "Cancel_Ride", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatCancel = Rswift.StringResource(key: "ios.ZDCChat.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatCancelButton = Rswift.StringResource(key: "ios.ZDCChat.cancelButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderCancel = Rswift.StringResource(key: "Order.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel Booking
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancelBooking = Rswift.StringResource(key: "Cancel Booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel Delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancel_Delivery = Rswift.StringResource(key: "Cancel_Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel Order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cancelOrder = Rswift.StringResource(key: "Cancel Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancel this payment?
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let titleMessage = Rswift.StringResource(key: "titleMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancelled
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let customercancelleD = Rswift.StringResource(key: "CUSTOMER CANCELLED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderUIStatusCancelled = Rswift.StringResource(key: "OrderUI.Status.Cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Card
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderCard = Rswift.StringResource(key: "Order.Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cart
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cart = Rswift.StringResource(key: "Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cartes enregistrées
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuSaved_Cards = Rswift.StringResource(key: "SideMenu.Saved_Cards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cash = Rswift.StringResource(key: "cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderCash = Rswift.StringResource(key: "Order.Cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cash on delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cash_on_delivery = Rswift.StringResource(key: "cash_on_delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cash on delivery
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cashOnDelivery = Rswift.StringResource(key: "Cash on delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cash on delivery
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderCashOnDelivery = Rswift.StringResource(key: "Order.CashOnDelivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let change_language = Rswift.StringResource(key: "change_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let settingChangeLanguage = Rswift.StringResource(key: "Setting.ChangeLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Change pick up time no suppliers are available for this pickup timing
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let changePickUpTimeNoSuppliersAreAvailableForThisPickupTiming = Rswift.StringResource(key: "Change pick up time no suppliers are available for this pickup timing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Changing the current area will clear you cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let changingTheCurrentAreaWillClearYouCart = Rswift.StringResource(key: "Changing the current area will clear you cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Changing the language will clear your cart. Are you sure you want to proceed?
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let changingTheLanguageWillClearYourCart = Rswift.StringResource(key: "Changing the language will clear your cart.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatTitle = Rswift.StringResource(key: "ios.ZDCChat.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Choose booking cycle
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let chooseBookingCycle = Rswift.StringResource(key: "Choose booking cycle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Choose location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let chooseLocation = Rswift.StringResource(key: "Choose location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: City
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let city = Rswift.StringResource(key: "City", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Cleaning
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let cleaning = Rswift.StringResource(key: "Cleaning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Close navigation drawer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let navigation_drawer_close = Rswift.StringResource(key: "navigation_drawer_close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let closed = Rswift.StringResource(key: "Closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Coming soon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let coming_soon = Rswift.StringResource(key: "coming_soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Compare Products
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let compareProducts = Rswift.StringResource(key: "Compare Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusSerComplete = Rswift.StringResource(key: "OrderStatus.SerComplete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderUIStatusCompleted = Rswift.StringResource(key: "OrderUI.Status.Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let completed = Rswift.StringResource(key: "completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Completed Bookings
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let completedBookings = Rswift.StringResource(key: "Completed Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Completed at
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let completed_at = Rswift.StringResource(key: "completed_at", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirm Booking
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let booking = Rswift.StringResource(key: "booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirm Schedule
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let schedule = Rswift.StringResource(key: "schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, fr, it, nl, de, ja, si-LK, sq
      static let validationAlert2 = Rswift.StringResource(key: "Validation.Alert2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirmed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let confirmeD = Rswift.StringResource(key: "CONFIRMED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Confirmed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusConfirmed = Rswift.StringResource(key: "OrderStatus.Confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Congratulations
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let popUpScheduledBookedConfirmationTitle = Rswift.StringResource(key: "PopUpScheduledBooked.ConfirmationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Congratulations
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let congratulations = Rswift.StringResource(key: "congratulations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Connecting your needs in seconds
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let slogan = Rswift.StringResource(key: "slogan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Connection lost
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatChatConnectionLostTitle = Rswift.StringResource(key: "ios.ZDCChat.chatConnectionLost.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contact_us = Rswift.StringResource(key: "contact_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionContactUs = Rswift.StringResource(key: "LeftMenuOption.ContactUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuContact_us = Rswift.StringResource(key: "SideMenu.Contact_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Could not connect
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatCantConnectTitle = Rswift.StringResource(key: "ios.ZDCChat.cantConnectTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Could not send message
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatSendOfflineMessageErrorTitle = Rswift.StringResource(key: "ios.ZDCChat.sendOfflineMessageError.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let creditCard = Rswift.StringResource(key: "Credit Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let titleviewLbl = Rswift.StringResource(key: "titleviewLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Credit Card number must consist of 16 digits.
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let invaildCardNumber = Rswift.StringResource(key: "InvaildCardNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Credit/Debit card
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let creditDebitCard = Rswift.StringResource(key: "Credit/Debit card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Current session expired   Please Login to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sessionExpiredLoginToContinue = Rswift.StringResource(key: "Session expired login to continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Currently, no driver available.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let currently_no_driver_available = Rswift.StringResource(key: "currently_no_driver_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Currently, no driver available.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let no_driver = Rswift.StringResource(key: "no_driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Customer Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusCustomerCancel = Rswift.StringResource(key: "OrderStatus.CustomerCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Customizable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let customizable = Rswift.StringResource(key: "Customizable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Daily Deals
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, sq
      static let dailyDeals = Rswift.StringResource(key: "Daily Deals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "zh-Hans", "ja", "sq"], comment: nil)
      /// en translation: Deliver with us!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuDeliver_with_us = Rswift.StringResource(key: "SideMenu.Deliver_with_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivered
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let delivereD = Rswift.StringResource(key: "DELIVERED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivered on
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let deliveredOn = Rswift.StringResource(key: "Delivered on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let delivery = Rswift.StringResource(key: "Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let deliveryAddress = Rswift.StringResource(key: "Delivery Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuDelivery_History = Rswift.StringResource(key: "SideMenu.Delivery_History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery In Progress
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let delivery_In_Progress = Rswift.StringResource(key: "Delivery_In_Progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery Speed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let deliverySpeed = Rswift.StringResource(key: "Delivery Speed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery care free at your doorstep.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let introductionVCTitleDescription = Rswift.StringResource(key: "IntroductionVC.TitleDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: en, fr, de, zh-Hans, ja, si-LK, sq
      static let deliveryCharges = Rswift.StringResource(key: "Delivery charges", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges applicable accordingly
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let deliveryChargesApplicableAccordingly = Rswift.StringResource(key: "Delivery charges applicable accordingly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let delivery_location = Rswift.StringResource(key: "delivery_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery on
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let deliveryOn = Rswift.StringResource(key: "Delivery on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Discoverability
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let discoverability = Rswift.StringResource(key: "Discoverability", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Do you have (Brand name) bottles with you?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenReturnBottleTitle = Rswift.StringResource(key: "eToken.returnBottleTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Do you really want to cancel this order?
      ///
      /// Locales: en, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let doYouReallyWantToCancelThisOrder = Rswift.StringResource(key: "Do you really want to cancel this order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Do you want to buy this e-token ?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buyTokenPopUpTitle = Rswift.StringResource(key: "BuyToken.PopUpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Don't receive your code?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let otpvcDontReceiveCode = Rswift.StringResource(key: "OTPVC.DontReceiveCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Don't send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatTranscriptEmailAlertDontSendButton = Rswift.StringResource(key: "ios.ZDCChat.transcriptEmailAlert.dontSendButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatDone = Rswift.StringResource(key: "ios.ZDCChat.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let doneBtn = Rswift.StringResource(key: "doneBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Don’t have an account?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let haveNoAccount = Rswift.StringResource(key: "haveNoAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Drinking Water
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let drinking_water = Rswift.StringResource(key: "drinking_water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Drinking Water
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceDrinkingWater = Rswift.StringResource(key: "Service.DrinkingWater", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusDriverCancel = Rswift.StringResource(key: "OrderStatus.DriverCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver has accepted your request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driverStatusAcceptedRequest = Rswift.StringResource(key: "DriverStatus.AcceptedRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver has accepted your request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driver_accepted_request = Rswift.StringResource(key: "driver_accepted_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver has reached
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driver_is_reached = Rswift.StringResource(key: "driver_is_reached", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver is completing nearby order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driver_completing_nearby_order = Rswift.StringResource(key: "driver_completing_nearby_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver is completing nearby order.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driverStatusAnotherOrderOnWay = Rswift.StringResource(key: "DriverStatus.AnotherOrderOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver is on the way
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driver_is_on_the_way = Rswift.StringResource(key: "driver_is_on_the_way", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Driver is on the way.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driverStatusYourOrderOnWay = Rswift.StringResource(key: "DriverStatus.YourOrderOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Drop off location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let drop_off_location = Rswift.StringResource(key: "drop_off_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Dutch
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let languageNameDutch = Rswift.StringResource(key: "LanguageName.Dutch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let e_token = Rswift.StringResource(key: "e_token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenEToken = Rswift.StringResource(key: "etoken.eToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderEToken = Rswift.StringResource(key: "Order.EToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let e_tokens = Rswift.StringResource(key: "e_tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: EXPIRY DATE
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let expDateLbl = Rswift.StringResource(key: "ExpDateLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Edit Actions
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let share_SHEET_EDIT_ACTIONS_BUTTON_TITLE = Rswift.StringResource(key: "SHARE_SHEET_EDIT_ACTIONS_BUTTON_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let edit_profile = Rswift.StringResource(key: "edit_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuEdit_Profile = Rswift.StringResource(key: "SideMenu.Edit_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Edit comment...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatRatingEditButton = Rswift.StringResource(key: "ios.ZDCChat.rating.editButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Edit this number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let edit_this_number = Rswift.StringResource(key: "edit_this_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Edit this number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otpvcEditNumber = Rswift.StringResource(key: "OTPVC.EditNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Email a transcript
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatTranscriptEmailAlertTitle = Rswift.StringResource(key: "ios.ZDCChat.transcriptEmailAlert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Email address
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatEmailPlaceholder = Rswift.StringResource(key: "ios.ZDCChat.emailPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Email is not configured on the phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let email_not_configured = Rswift.StringResource(key: "email_not_configured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Emergency Contact
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let emmergencyEmmergency_Contact = Rswift.StringResource(key: "Emmergency.Emmergency_Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Emergency Contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuEmergency_Contacts = Rswift.StringResource(key: "SideMenu.Emergency_Contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Emergency contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let emergencyContacts = Rswift.StringResource(key: "Emergency contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enable this from the home screen, Settings > %@
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatAccessHowto = Rswift.StringResource(key: "ios.ZDCChat.access.howto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: End
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatEnd = Rswift.StringResource(key: "ios.ZDCChat.end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: End chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatChatEndedTitle = Rswift.StringResource(key: "ios.ZDCChat.chatEndedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: End chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatEndButton = Rswift.StringResource(key: "ios.ZDCChat.endButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: English
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameEnglish = Rswift.StringResource(key: "LanguageName.English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enjoy Your Ride
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enjoy_Your_Ride = Rswift.StringResource(key: "Enjoy_Your_Ride", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter Drop off Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_drop_off_location = Rswift.StringResource(key: "enter_drop_off_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter additional information...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_additional_information = Rswift.StringResource(key: "enter_additional_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter approx weight in Kg's...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_approx_weight = Rswift.StringResource(key: "enter_approx_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter details of order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_details_of_order = Rswift.StringResource(key: "enter_details_of_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter details of order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderDetailEnterTitle = Rswift.StringResource(key: "Order.DetailEnterTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter drop off location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderDropOffLocation = Rswift.StringResource(key: "Order.DropOffLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter instructions here
      ///
      /// Locales: ar, en
      static let enterInstructionsHere = Rswift.StringResource(key: "Enter instructions here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter pickup location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_pickup_location = Rswift.StringResource(key: "enter_pickup_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter the OTP Received on
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otpvcotpText = Rswift.StringResource(key: "OTPVC.OTPText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter the code sent on
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_otp_on = Rswift.StringResource(key: "enter_otp_on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter your Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enterYourAddress = Rswift.StringResource(key: "Enter your Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter your details.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let enterYourDetails = Rswift.StringResource(key: "Enter your details.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter your mobile no.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let enter_you_mobile_no = Rswift.StringResource(key: "enter_you_mobile_no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Enter your mobile number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let landingVCMobileNumber = Rswift.StringResource(key: "LandingVC.MobileNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Error accessing file
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatUploadErrorAccess = Rswift.StringResource(key: "ios.ZDCChat.upload.error.access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Error occurred on server. Please try again.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let api_error_msg = Rswift.StringResource(key: "api_error_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Excellent
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let excellent = Rswift.StringResource(key: "excellent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Expected Delivery On
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static let expectedDeliveryOn = Rswift.StringResource(key: "Expected Delivery On", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Failed
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pf_resp_page_failed = Rswift.StringResource(key: "pf_resp_page_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Failed to download. Tap to retry.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatDownloadFailedMessage = Rswift.StringResource(key: "ios.ZDCChat.download.failedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Failed to send. Tap to retry.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatUnsentMessage = Rswift.StringResource(key: "ios.ZDCChat.unsentMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Favourites
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let share_SHEET_EDIT_SECTION_TITLE_FAVORITES = Rswift.StringResource(key: "SHARE_SHEET_EDIT_SECTION_TITLE_FAVORITES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Feedback Given
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let feedbackgiveN = Rswift.StringResource(key: "FEEDBACKGIVEN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Fields marked with * are required
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormRequired = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: File size too large
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatUploadErrorSize = Rswift.StringResource(key: "ios.ZDCChat.upload.error.size", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: File type not permitted
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatUploadErrorType = Rswift.StringResource(key: "ios.ZDCChat.upload.error.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let finish = Rswift.StringResource(key: "finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let orderFinish = Rswift.StringResource(key: "Order.Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Fitness
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let fitness = Rswift.StringResource(key: "Fitness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Flowers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let flowers = Rswift.StringResource(key: "Flowers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: For Friend
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeFor_Friend = Rswift.StringResource(key: "Home.For_Friend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: For me
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeFor_me = Rswift.StringResource(key: "Home.For_me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let introductionVCTitleFirst = Rswift.StringResource(key: "IntroductionVC.TitleFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: French
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameFrench = Rswift.StringResource(key: "LanguageName.French", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let fri = Rswift.StringResource(key: "Fri", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Full Name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let full_name = Rswift.StringResource(key: "full_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Full name
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let userProfileVCFullNamePlaceHolder = Rswift.StringResource(key: "UserProfileVC.FullNamePlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let dialog_gallery = Rswift.StringResource(key: "dialog_gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Gas
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let gas = Rswift.StringResource(key: "gas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Gas
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceGas = Rswift.StringResource(key: "Service.Gas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: German
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let languageNameGerman = Rswift.StringResource(key: "LanguageName.German", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Go to Home
      ///
      /// Locales: ar, en
      static let goToHome = Rswift.StringResource(key: "Go to Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Gold
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let gold = Rswift.StringResource(key: "Gold", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let good = Rswift.StringResource(key: "good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderGood = Rswift.StringResource(key: "Order.Good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Grant
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let grant = Rswift.StringResource(key: "grant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Grant read sms permission to auto fetch the OTP.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sms_permission = Rswift.StringResource(key: "sms_permission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Great
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pf_resp_page_great = Rswift.StringResource(key: "pf_resp_page_great", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Grocery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let grocery = Rswift.StringResource(key: "Grocery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Guest
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let guest = Rswift.StringResource(key: "Guest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: HalfWay Stop
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let halfWayStop = Rswift.StringResource(key: "HalfWayStop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Happy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderHappy = Rswift.StringResource(key: "Order.Happy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Have you Forgot Completing Your Last Shopping Cart?
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let haveYouForgotCompletingYourLastShoppingCart = Rswift.StringResource(key: "Have you Forgot Completing Your Last Shopping Cart?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Heavy Machine
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceHeavyMachine = Rswift.StringResource(key: "Service.HeavyMachine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuHelp = Rswift.StringResource(key: "SideMenu.Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Hey! What’s your name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let whats_your_name = Rswift.StringResource(key: "whats_your_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Hey!What's your name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let userProfileVCNameText = Rswift.StringResource(key: "UserProfileVC.NameText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Hi 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let hi = Rswift.StringResource(key: "Hi ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuHome = Rswift.StringResource(key: "SideMenu.Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Home Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeservicE = Rswift.StringResource(key: "HOME SERVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: House No.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let houseNo = Rswift.StringResource(key: "House No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Household
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let household = Rswift.StringResource(key: "Household", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: I agree to the 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let i_agree_to_the = Rswift.StringResource(key: "i_agree_to_the", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: I would like to recommend using
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iWouldLikeToRecommendUsing = Rswift.StringResource(key: "I would like to recommend using", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Important Numbers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionEmergencyContacts = Rswift.StringResource(key: "LeftMenuOption.EmergencyContacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Important Numbers
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let emergency_contacts = Rswift.StringResource(key: "emergency_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Init a secure connection...
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let init_conn = Rswift.StringResource(key: "Init_conn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Inprocess
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let inprocesS = Rswift.StringResource(key: "INPROCESS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Institution
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let institution = Rswift.StringResource(key: "institution", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Institution Account
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let institution_account = Rswift.StringResource(key: "institution_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Invalid CVV
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let invalidCVV = Rswift.StringResource(key: "InvalidCVV", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Invalid Expiry Date
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let invalidExp = Rswift.StringResource(key: "InvalidExp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Invalid card number
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let invaildCard = Rswift.StringResource(key: "InvaildCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let invoice = Rswift.StringResource(key: "invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderInvoice = Rswift.StringResource(key: "Order.Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Issue wth OrderID
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let issueWthOrderID = Rswift.StringResource(key: "Issue wth OrderID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: It looks like your privacy settings are preventing us from accessing your camera.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let itLooksLikeYourPrivacySettingsArePreventingUsFromAccessingYourCamera = Rswift.StringResource(key: "It looks like your privacy settings are preventing us from accessing your camera.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Italian
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let languageNameItalian = Rswift.StringResource(key: "LanguageName.Italian", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Item Detail
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let itemDetail = Rswift.StringResource(key: "Item Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Japanese
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static let languageNameJapanese = Rswift.StringResource(key: "LanguageName.Japanese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "sq"], comment: nil)
      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let userProfileVCJustSomeMore = Rswift.StringResource(key: "UserProfileVC.JustSomeMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Ladies Beauty Salon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let ladiesBeautySalon = Rswift.StringResource(key: "Ladies Beauty Salon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Landmark
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let landmark = Rswift.StringResource(key: "Landmark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Laundry
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let laundry = Rswift.StringResource(key: "Laundry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Leave a comment
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatRatingCommentTitle = Rswift.StringResource(key: "ios.ZDCChat.rating.comment.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Leave a comment
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatRatingCommentPlaceholder = Rswift.StringResource(key: "ios.ZDCChat.rating.comment.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Leave a comment...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatRatingCommentButton = Rswift.StringResource(key: "ios.ZDCChat.rating.commentButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Leave a message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatNoAgentsButton = Rswift.StringResource(key: "ios.ZDCChat.noAgentsButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Like Buraq 24?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let referralText = Rswift.StringResource(key: "Referral.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Like Buraq24? Share with the friends.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let like_buraq24_n_nshare_with_the_friends = Rswift.StringResource(key: "like_buraq24_n_nshare_with_the_friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Live Tracking
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let liveTracking = Rswift.StringResource(key: "Live Tracking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Live support
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let liveSupport = Rswift.StringResource(key: "Live support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let navigationTitleLocation = Rswift.StringResource(key: "NavigationTitle.Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let location = Rswift.StringResource(key: "location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Location Unavailable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let locationUnavailable = Rswift.StringResource(key: "Location Unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Log out!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let logOut = Rswift.StringResource(key: "LogOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Login to
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let loginTo = Rswift.StringResource(key: "loginTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Looks like your order has been delivered. Would you like to rate your order?
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let looksLikeYourOrderHasBeenDeliveredWouldYouLikeToRateYourOrder = Rswift.StringResource(key: "Looks like your order has been delivered Would you like to rate your order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Loyality points
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let loyalityPoints = Rswift.StringResource(key: "Loyality points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Loyalty Points Type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let loyaltyPointsType = Rswift.StringResource(key: "Loyalty Points Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Main2Activity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let title_activity_main2 = Rswift.StringResource(key: "title_activity_main2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Manage Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let manageAddress = Rswift.StringResource(key: "Manage Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Map
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let title_activity_maps = Rswift.StringResource(key: "title_activity_maps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Medicines
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let medicines = Rswift.StringResource(key: "Medicines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormMessagePlaceholder = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.messagePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatMessageButton = Rswift.StringResource(key: "ios.ZDCChat.messageButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatChatTextEntryPlaceholderText = Rswift.StringResource(key: "ios.ZDCChat.chatTextEntry.placeholderText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Min
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderTimeLeftMin = Rswift.StringResource(key: "Order.TimeLeftMin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Min. Delivery Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let minDeliveryTime = Rswift.StringResource(key: "Min. Delivery Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Min. Delviery Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let minDelvieryTime = Rswift.StringResource(key: "Min. Delviery Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Min. Order Amount
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let minOrderAmount = Rswift.StringResource(key: "Min. Order Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Min. Service Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let minServiceTime = Rswift.StringResource(key: "Min. Service Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Mins
      ///
      /// Locales: en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let orderTimeLeftMins = Rswift.StringResource(key: "Order.TimeLeftMins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let mon = Rswift.StringResource(key: "Mon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Month & Year
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let monthyearLbl = Rswift.StringResource(key: "monthyearLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Monthly
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let monthly = Rswift.StringResource(key: "Monthly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Account
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let myAccount = Rswift.StringResource(key: "My Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Addresses
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let myAddresses = Rswift.StringResource(key: "My Addresses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingMyBooking = Rswift.StringResource(key: "Booking.MyBooking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let myBookings = Rswift.StringResource(key: "My Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuMy_Bookings = Rswift.StringResource(key: "SideMenu.My_Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My Orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let myOrders = Rswift.StringResource(key: "My Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: My favorites
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let myFavorites = Rswift.StringResource(key: "My favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let noBtn = Rswift.StringResource(key: "noBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormNamePlaceholder = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.namePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Navigation header
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let nav_header_desc = Rswift.StringResource(key: "nav_header_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: New
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let new = Rswift.StringResource(key: "New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: New Password must not be same as old password
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let newPasswordMustNotBeSameAsOldPassword = Rswift.StringResource(key: "New Password must not be same as old password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: New Services - Coming soon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuNew_Services_Coming_soon = Rswift.StringResource(key: "SideMenu.New_Services_Coming_soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderNext = Rswift.StringResource(key: "Order.Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatNextButton = Rswift.StringResource(key: "ios.ZDCChat.nextButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatNo = Rswift.StringResource(key: "ios.ZDCChat.no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_bookings = Rswift.StringResource(key: "no_bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No Internet connection. Please try again when connected
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatNoConnectionMessage = Rswift.StringResource(key: "ios.ZDCChat.noConnectionMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No Product Found!
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let noProductFound = Rswift.StringResource(key: "No Product Found!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No Remarks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let noRemarks = Rswift.StringResource(key: "No Remarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No agents available
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatNoAgentsTitle = Rswift.StringResource(key: "ios.ZDCChat.noAgentsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No connection
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatNoConnectionTitle = Rswift.StringResource(key: "ios.ZDCChat.noConnectionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No connection
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatNetworkConnectionError = Rswift.StringResource(key: "ios.ZDCChat.network.connectionError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: No connection, please check the internet connection
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let internetConnectionMessage = Rswift.StringResource(key: "internetConnectionMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_contacts = Rswift.StringResource(key: "no_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No file added!
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let noFileAdded = Rswift.StringResource(key: "No file added!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No offers available
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_offers_available = Rswift.StringResource(key: "no_offers_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No route exists
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_route_exits = Rswift.StringResource(key: "no_route_exits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No services available
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_services = Rswift.StringResource(key: "no_services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: No supplier found!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let noSupplierFound = Rswift.StringResource(key: "No supplier found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Normal
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let normal = Rswift.StringResource(key: "normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Not rated yet
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let notRatedYet = Rswift.StringResource(key: "Not rated yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Notification Language Changed Successfully
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static let notificationLanguageChangedSuccessfully = Rswift.StringResource(key: "Notification Language Changed Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuNotifications = Rswift.StringResource(key: "SideMenu.Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Notifications Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let notificationsLanguage = Rswift.StringResource(key: "Notifications Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buttonTitleOK = Rswift.StringResource(key: "Button.Title.OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatOk = Rswift.StringResource(key: "ios.ZDCChat.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OTP Sent.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otpSent = Rswift.StringResource(key: "OTP Sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: OTP resent successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otp_resent_successfully = Rswift.StringResource(key: "otp_resent_successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let offers = Rswift.StringResource(key: "Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Offers available near you
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buyTokenOffersNearYou = Rswift.StringResource(key: "BuyToken.OffersNearYou", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Offers available near you
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let offers_available_near_you = Rswift.StringResource(key: "offers_available_near_you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Offline
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let offline = Rswift.StringResource(key: "Offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let okBtn = Rswift.StringResource(key: "okBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let oldPassword = Rswift.StringResource(key: "Old Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: On The Way
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let nearbY = Rswift.StringResource(key: "NEARBY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: On hold
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let onHold = Rswift.StringResource(key: "On hold", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: One order is waiting for your approval in upcoming bookings.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenOrderWaitingConfirmation = Rswift.StringResource(key: "eToken.orderWaitingConfirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: One order is waiting for your approval in upcoming bookings.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenOrderTimeOut = Rswift.StringResource(key: "etoken.orderTimeOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Ongoing
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusOngoing = Rswift.StringResource(key: "OrderStatus.Ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let online = Rswift.StringResource(key: "Online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Online payment not available yet.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenOnlinePayment = Rswift.StringResource(key: "eToken.onlinePayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Oops, you can only schedule booking 1 hour after now.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let schedule_time_selection_validation_msg = Rswift.StringResource(key: "schedule_time_selection_validation_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Open navigation drawer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let navigation_drawer_open = Rswift.StringResource(key: "navigation_drawer_open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Opens at 
      ///
      /// Locales: en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let opensAt = Rswift.StringResource(key: "Opens at ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Order Confirmed Successfully
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let orderConfirmedSuccessfully = Rswift.StringResource(key: "Order Confirmed Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderDetails = Rswift.StringResource(key: "Order Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Order Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderNow = Rswift.StringResource(key: "Order Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Order history
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderHistory = Rswift.StringResource(key: "Order history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Order placed successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderPlacedSuccessfully = Rswift.StringResource(key: "Order placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let other = Rswift.StringResource(key: "Other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Other Services
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionSupport = Rswift.StringResource(key: "LeftMenuOption.Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Other Services
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let support = Rswift.StringResource(key: "support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let share_SHEET_EDIT_SECTION_TITLE_OTHER = Rswift.StringResource(key: "SHARE_SHEET_EDIT_SECTION_TITLE_OTHER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, sq
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "zh-Hans", "ja", "sq"], comment: nil)
      /// en translation: PROCEED
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let proceeD = Rswift.StringResource(key: "PROCEED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Packages
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let packages = Rswift.StringResource(key: "Packages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Packages details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let packagesDetails = Rswift.StringResource(key: "Packages details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Party
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let party = Rswift.StringResource(key: "Party", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Password Changed Successfully
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let passwordChangedSuccess = Rswift.StringResource(key: "PasswordChangedSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Password recovery has been sent to your email id
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let passwordRecoveryHasBeenSentToYourEmailId = Rswift.StringResource(key: "Password recovery has been sent to your email id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Password should be minimum 6 characters.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let passwordShouldBeMinimum6Characters = Rswift.StringResource(key: "Password should be minimum 6 characters.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Passwords do not match
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let passwordsDoNotMatch = Rswift.StringResource(key: "Passwords do not match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingPast = Rswift.StringResource(key: "Booking.Past", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingsPast = Rswift.StringResource(key: "Bookings.Past", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let past = Rswift.StringResource(key: "past", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let payBtn = Rswift.StringResource(key: "PayBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pay 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pay = Rswift.StringResource(key: "Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Payment History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuPayment_History = Rswift.StringResource(key: "SideMenu.Payment_History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Payment Methods
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuPayment_Methods = Rswift.StringResource(key: "SideMenu.Payment_Methods", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Payments
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionPayments = Rswift.StringResource(key: "LeftMenuOption.Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Payments
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let payments = Rswift.StringResource(key: "payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pendinG = Rswift.StringResource(key: "PENDING", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pending Orders
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pendingOrders = Rswift.StringResource(key: "Pending Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Permission required to select image
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let permission_required_to_select_image = Rswift.StringResource(key: "permission_required_to_select_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatPreChatFormPhonePlaceholder = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.phonePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Photo Library
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let photoLibrary = Rswift.StringResource(key: "Photo Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Photo library
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatUploadSourceGallery = Rswift.StringResource(key: "ios.ZDCChat.upload.source.gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Photography
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let photography = Rswift.StringResource(key: "Photography", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pickup = Rswift.StringResource(key: "Pickup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pickup location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pickupLocation = Rswift.StringResource(key: "Pickup location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Pincode
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pincode = Rswift.StringResource(key: "Pincode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Place Booking
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let placeBooking = Rswift.StringResource(key: "Place Booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Plaese enter username or email.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let username_email_validation = Rswift.StringResource(key: "username_email_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Platinum
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let platinum = Rswift.StringResource(key: "Platinum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please add image.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let institutional_cred_Image_validation = Rswift.StringResource(key: "institutional_cred_Image_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please agree to our terms and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let terms_and_conditions_validation_message = Rswift.StringResource(key: "terms_and_conditions_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please check to see if you have enabled location services.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pleaseCheckToSeeIfYouHaveEnabledLocationServices = Rswift.StringResource(key: "Please check to see if you have enabled location services.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please check your internet connection.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseCheckYourInternetConnection = Rswift.StringResource(key: "Please check your internet connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter Item to be picked up.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let materialType2 = Rswift.StringResource(key: "materialType2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter Item weight.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let approxWeight2 = Rswift.StringResource(key: "approxWeight2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a landmark name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterALandmarkName = Rswift.StringResource(key: "Please enter a landmark name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a valid OTP.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otp_validation_message = Rswift.StringResource(key: "otp_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a valid email address
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormInvalidEmail = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.invalidEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a valid email address
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterAValidEmailAddress = Rswift.StringResource(key: "Please enter a valid email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a valid phone number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let phone_validation_message = Rswift.StringResource(key: "phone_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter a valid phone number
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatPreChatFormInvalidPhone = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.invalidPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Please enter additional information.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let additionalInformation = Rswift.StringResource(key: "additionalInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter address
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static let pleaseEnterAddress = Rswift.StringResource(key: "Please enter address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter approx. weight.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let approxWeight = Rswift.StringResource(key: "approxWeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter cancellation reason.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let cancellation_reason_validation_text = Rswift.StringResource(key: "cancellation_reason_validation_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter cancelling reason.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderCancellingReasonValidation = Rswift.StringResource(key: "Order.CancellingReasonValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter confirm password.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let confirm_password_empty_validation_message = Rswift.StringResource(key: "confirm_password_empty_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter drop at location
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let dropAtLocation = Rswift.StringResource(key: "dropAtLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter first name
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static let pleaseEnterFirstName = Rswift.StringResource(key: "Please enter first name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter full name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationUserName = Rswift.StringResource(key: "Validation.UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter institution id number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let institution_id_validation = Rswift.StringResource(key: "institution_id_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter institutional email.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let empty_institutional_email_validation = Rswift.StringResource(key: "empty_institutional_email_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter last name
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static let pleaseEnterLastName = Rswift.StringResource(key: "Please enter last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter material Type.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let materialType = Rswift.StringResource(key: "materialType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter message
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let please_enter_message = Rswift.StringResource(key: "please_enter_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter name of contact person at dropoff location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let receiverName2 = Rswift.StringResource(key: "receiverName2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter name of contact person at pickup location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let senderName2 = Rswift.StringResource(key: "senderName2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter name to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let name_empty_validation_message = Rswift.StringResource(key: "name_empty_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter order details.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let aletEnterDetails = Rswift.StringResource(key: "alet.enterDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter order details.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderDetailValidation = Rswift.StringResource(key: "Order.DetailValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter otp.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationOTPValidation = Rswift.StringResource(key: "Validation.OTPValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter password.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let password_empty_validation_message = Rswift.StringResource(key: "password_empty_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter phone number of contact person at pickup location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let phoneNumber2 = Rswift.StringResource(key: "phoneNumber2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter phone number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationPhoneNumberMissed = Rswift.StringResource(key: "Validation.PhoneNumberMissed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter phone number.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let phoneNumber = Rswift.StringResource(key: "phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter pickup at location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pickupAtLocation = Rswift.StringResource(key: "pickupAtLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter promo code to continue.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let promoCode_empty_validation_message = Rswift.StringResource(key: "PromoCode_empty_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter receiver name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let receiverName = Rswift.StringResource(key: "receiverName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter sender name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let senderName = Rswift.StringResource(key: "senderName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter valid Pincode
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterValidPincode = Rswift.StringResource(key: "Please enter valid Pincode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter valid country code followed by phone number
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterValidCountryCodeFollowedByPhoneNumber = Rswift.StringResource(key: "Please enter valid country code followed by phone number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter valid phone number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationPhoneNumberLength = Rswift.StringResource(key: "Validation.PhoneNumberLength", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter verification code.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationVerificationValidation = Rswift.StringResource(key: "Validation.VerificationValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your building name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourBuildingName = Rswift.StringResource(key: "Please enter your building name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your city
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourCity = Rswift.StringResource(key: "Please enter your city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your counrty
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourCounrty = Rswift.StringResource(key: "Please enter your counrty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your email address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourEmailAddress = Rswift.StringResource(key: "Please enter your email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your house no.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourHouseNo = Rswift.StringResource(key: "Please enter your house no.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourName = Rswift.StringResource(key: "Please enter your name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please enter your password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseEnterYourPassword = Rswift.StringResource(key: "Please enter your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please fill all details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseFillAllDetails = Rswift.StringResource(key: "Please fill all details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please maintain a minimum balance of
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let walletPlease_maintain_minimum = Rswift.StringResource(key: "Wallet.Please_maintain_minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select a booking schedule and time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectABookingScheduleAndTime = Rswift.StringResource(key: "Please select a booking schedule and time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select a city
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectACity = Rswift.StringResource(key: "Please select a city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select a country
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectACountry = Rswift.StringResource(key: "Please select a country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select a valid dropoff address.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let dropoff_address_validation_message = Rswift.StringResource(key: "dropoff_address_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select a valid pickup address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pickup_address_validation_message = Rswift.StringResource(key: "pickup_address_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenSelectAddress = Rswift.StringResource(key: "eToken.selectAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select all fields above.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectAllFieldsAbove = Rswift.StringResource(key: "Please select all fields above", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select an Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectAnAddress = Rswift.StringResource(key: "Please select an Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select dates to schedule.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectDatesToSchedule = Rswift.StringResource(key: "Please select dates to schedule.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select dropoff level.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let dropLevel = Rswift.StringResource(key: "dropLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select institution name.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let institution_name_validation = Rswift.StringResource(key: "institution_name_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select institution type.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let institution_type_validation = Rswift.StringResource(key: "institution_type_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select pickup level.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pickupLevel = Rswift.StringResource(key: "pickupLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select produts from same supplier
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectProdutsFromSameSupplier = Rswift.StringResource(key: "Select produts from same supplier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select rating to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let rating_validation_msg = Rswift.StringResource(key: "rating_validation_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select terms and conditions.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationTermsConditions = Rswift.StringResource(key: "Validation.TermsConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select your location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectYourLocation = Rswift.StringResource(key: "Please select your location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select your option
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectOption = Rswift.StringResource(key: "Please select option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please select your profile picture.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseSelectYourProfilePicture = Rswift.StringResource(key: "Please select your profile picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please wait for an agent. There are currently %@ visitor(s) waiting to be served.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatVisitorQueue = Rswift.StringResource(key: "ios.ZDCChat.visitorQueue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please wait. we'll contact you shortly.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let pleaseWaitWeLlContactYouShortly = Rswift.StringResource(key: "Please wait. we'll contact you shortly.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Please write something first.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contactUSValidationMessage = Rswift.StringResource(key: "ContactUS.ValidationMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Points
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let points = Rswift.StringResource(key: "Points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Popular Restaurants
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let popularRestaurants = Rswift.StringResource(key: "Popular Restaurants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Prefer not to say
      ///
      /// Locales: en, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let preferNotToSay = Rswift.StringResource(key: "Prefer not to say", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Press back again to exit.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let press_back_again_to_exit = Rswift.StringResource(key: "press_back_again_to_exit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let privacy = Rswift.StringResource(key: "privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let settingPrivacy = Rswift.StringResource(key: "Setting.Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let landingVCProceed = Rswift.StringResource(key: "LandingVC.Proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Profile updated successfully!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let profile_updated_successfully = Rswift.StringResource(key: "profile_updated_successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Promo
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let promo = Rswift.StringResource(key: "promo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Promo
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderPromo = Rswift.StringResource(key: "Order.Promo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionPromotions = Rswift.StringResource(key: "LeftMenuOption.Promotions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuPromotions = Rswift.StringResource(key: "SideMenu.Promotions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Purchased
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buyTokenPurchased = Rswift.StringResource(key: "BuyToken.Purchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Purchased
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let purchased = Rswift.StringResource(key: "purchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Push Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let push_notifications = Rswift.StringResource(key: "push_notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Push Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let settingPush = Rswift.StringResource(key: "Setting.Push", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Quantity : 
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let quantity = Rswift.StringResource(key: "Quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: REFERRAL CODE
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let userProfileVCReferalCode = Rswift.StringResource(key: "UserProfileVC.ReferalCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: REORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let reordeR = Rswift.StringResource(key: "REORDER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rate
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderRate = Rswift.StringResource(key: "Order.Rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rate
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let rate = Rswift.StringResource(key: "rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Order
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let rateOrder = Rswift.StringResource(key: "Rate Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rate my order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let rateMyOrder = Rswift.StringResource(key: "Rate my order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rate this chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatRatingTitle = Rswift.StringResource(key: "ios.ZDCChat.rating.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let nav_header_subtitle = Rswift.StringResource(key: "nav_header_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let rating = Rswift.StringResource(key: "Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reach us via email
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contactUsReachByEmail = Rswift.StringResource(key: "ContactUs.ReachByEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reach us via mail
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let reach_us_via_mail = Rswift.StringResource(key: "reach_us_via_mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reach us via phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contactUsReachByPhone = Rswift.StringResource(key: "ContactUs.ReachByPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reach us via phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let reach_us_via_phone = Rswift.StringResource(key: "reach_us_via_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reached
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusReached = Rswift.StringResource(key: "OrderStatus.Reached", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Recent Locations
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeRecent_Locations = Rswift.StringResource(key: "Home.Recent_Locations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Recommended
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let recommended = Rswift.StringResource(key: "Recommended", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reconnecting...
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatReconnecting = Rswift.StringResource(key: "ios.ZDCChat.reconnecting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Refer & Earn
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuRefer_Earn = Rswift.StringResource(key: "SideMenu.Refer_Earn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Referral
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionReferral = Rswift.StringResource(key: "LeftMenuOption.Referral", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Referral
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let referral = Rswift.StringResource(key: "referral", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenRejected = Rswift.StringResource(key: "eToken.rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenRejected = Rswift.StringResource(key: "etoken.Rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusSerReject = Rswift.StringResource(key: "OrderStatus.SerReject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let rejecteD = Rswift.StringResource(key: "REJECTED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Reordering will clear you cart. Press OK to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let reOrderingWillClearYouCart = Rswift.StringResource(key: "ReOrdering will clear you cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Required field,cannot be left empty
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pf_cancel_required_field = Rswift.StringResource(key: "pf_cancel_required_field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Resend OTP
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otpvcResendOTP = Rswift.StringResource(key: "OTPVC.ResendOTP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Resend otp
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let resend_otp = Rswift.StringResource(key: "resend_otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Results for 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static let resultsFor = Rswift.StringResource(key: "Results for ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let retry = Rswift.StringResource(key: "retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatRetry = Rswift.StringResource(key: "ios.ZDCChat.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Review
      ///
      /// Locales: ar, en, fr, it, de, zh-Hans, ja, si-LK, sq
      static let review = Rswift.StringResource(key: "Review", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Ride Share
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let ride_Share = Rswift.StringResource(key: "Ride_Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Rs
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderOMR = Rswift.StringResource(key: "Order.OMR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: SAVE THIS CARD
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let saveCarLbl = Rswift.StringResource(key: "saveCarLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSad = Rswift.StringResource(key: "Order.Sad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sad = Rswift.StringResource(key: "sad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sat = Rswift.StringResource(key: "Sat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Satellite
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let satellite = Rswift.StringResource(key: "satellite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Save image
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatImageViewerSaveButton = Rswift.StringResource(key: "ios.ZDCChat.imageViewer.saveButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let buttonTitleSchedule = Rswift.StringResource(key: "Button.Title.Schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusScheduled = Rswift.StringResource(key: "OrderStatus.Scheduled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderUIStatusScheduled = Rswift.StringResource(key: "OrderUI.Status.Scheduled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let scheduleD = Rswift.StringResource(key: "SCHEDULED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let scheduled = Rswift.StringResource(key: "Scheduled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled Orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let scheduledOrders = Rswift.StringResource(key: "Scheduled Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: School Rides
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuSchool_Rides = Rswift.StringResource(key: "SideMenu.School_Rides", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Search for product
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let searchForProduct = Rswift.StringResource(key: "Search for product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Searching
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderStatusSearching = Rswift.StringResource(key: "OrderStatus.Searching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Seating capacity
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let seatingCapacity = Rswift.StringResource(key: "Seating capacity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let dialog_select_your_choice = Rswift.StringResource(key: "dialog_select_your_choice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let navigationButtonSelect = Rswift.StringResource(key: "NavigationButton.Select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select = Rswift.StringResource(key: "select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select Area
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectArea = Rswift.StringResource(key: "Select Area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select City
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectCity = Rswift.StringResource(key: "Select City", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select Country
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectCountry = Rswift.StringResource(key: "Select Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_e_token = Rswift.StringResource(key: "select_e_token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_location = Rswift.StringResource(key: "select_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select Time and Date
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectTimeAndDate = Rswift.StringResource(key: "Select Time and Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select Zone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectZone = Rswift.StringResource(key: "Select Zone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select an issue we can help you with
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let support_msg = Rswift.StringResource(key: "support_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select booking time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectBookingTime = Rswift.StringResource(key: "Select booking time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select brand
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSelectBrand = Rswift.StringResource(key: "Order.SelectBrand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select brand
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_branch = Rswift.StringResource(key: "select_branch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select capacity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSelectCapacity = Rswift.StringResource(key: "Order.SelectCapacity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select capacity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_capacity = Rswift.StringResource(key: "select_capacity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select notification language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectNotificationLanguage = Rswift.StringResource(key: "Select notification language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select pickup date and time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectPickupDateAndTime = Rswift.StringResource(key: "Select pickup date and time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select picture
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectPicture = Rswift.StringResource(key: "Select picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select quantity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSelectQuantity = Rswift.StringResource(key: "Order.SelectQuantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select quantity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_quantity = Rswift.StringResource(key: "select_quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let selectService = Rswift.StringResource(key: "Select service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select sub model
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_sub_model = Rswift.StringResource(key: "select_sub_model", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Select vehicle type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let select_vehicle_type = Rswift.StringResource(key: "select_vehicle_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatSendOfflineMessageErrorSendButton = Rswift.StringResource(key: "ios.ZDCChat.sendOfflineMessageError.sendButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatTranscriptEmailAlertSendButton = Rswift.StringResource(key: "ios.ZDCChat.transcriptEmailAlert.sendButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatChatTextEntrySendButton = Rswift.StringResource(key: "ios.ZDCChat.chatTextEntry.sendButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Send mail to Buraq24
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let send_mail_to_buraq = Rswift.StringResource(key: "send_mail_to_buraq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let default_category_name = Rswift.StringResource(key: "default_category_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Service Charge
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceCharge = Rswift.StringResource(key: "Service Charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let action_settings = Rswift.StringResource(key: "action_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuSettings = Rswift.StringResource(key: "SideMenu.Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionSettings = Rswift.StringResource(key: "LeftMenuOption.Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let share = Rswift.StringResource(key: "share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Share Parcel Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let share_Parcel_Location = Rswift.StringResource(key: "Share_Parcel_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Share app
      ///
      /// Locales: en, nl, si-LK
      static let shareApp = Rswift.StringResource(key: "Share app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl", "si-LK"], comment: nil)
      /// en translation: Share with friends
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuGet_Discount = Rswift.StringResource(key: "SideMenu.Get_Discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Share with the friends
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let referralShareWithFriends = Rswift.StringResource(key: "Referral.ShareWithFriends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Shipped
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let shipped = Rswift.StringResource(key: "Shipped", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Shipped
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let shippeD = Rswift.StringResource(key: "SHIPPED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Shipping Status
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let shippingStatus = Rswift.StringResource(key: "Shipping Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign in with Apple
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sign_IN_WITH_APPLE = Rswift.StringResource(key: "SIGN_IN_WITH_APPLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let leftMenuOptionSignout = Rswift.StringResource(key: "LeftMenuOption.Signout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuSign_out = Rswift.StringResource(key: "SideMenu.Sign_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sign_out = Rswift.StringResource(key: "sign_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK
      static let signup = Rswift.StringResource(key: "signup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Sign up for
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let signup_for = Rswift.StringResource(key: "signup_for", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sign up for
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let signupfor = Rswift.StringResource(key: "Signupfor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Silver
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let silver = Rswift.StringResource(key: "Silver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Some charges may be apply when you cancel the ride. Are you sure you want to continue?
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let cancel_ride_confirmation = Rswift.StringResource(key: "cancel_ride_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Somewhere, Somehow, Something Went Wrong
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let somewhereSomehowSomethingWentWrong = Rswift.StringResource(key: "Somewhere Somehow Something Went Wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sorry, not enough points to redeem.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sorryNotEnoughPointsToRedeem = Rswift.StringResource(key: "Sorry not enough points to redeem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sorry, something went wrong please try again!
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let general_error = Rswift.StringResource(key: "general_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sorry, there are no agents available to chat. Please try again later or leave us a message.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatNoAgentsMessage = Rswift.StringResource(key: "ios.ZDCChat.noAgentsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Sorry, we can't connect you right now. Please try again later.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatCantConnectMessage = Rswift.StringResource(key: "ios.ZDCChat.cantConnectMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Sorry, you can only schedule booking 1 hour after now.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSchedulingAlert = Rswift.StringResource(key: "Order.Scheduling.Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sorry… Your Order is Below Minimum Order Price.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sorryYourOrderIsBelowMinimumOrderPrice = Rswift.StringResource(key: "Sorry… Your Order is Below Minimum Order Price.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sort
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sort = Rswift.StringResource(key: "Sort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Spanish
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameSpanish = Rswift.StringResource(key: "LanguageName.Spanish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Started at
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let started_at = Rswift.StringResource(key: "started_at", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Starting chat...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatChatStartingChatMessage = Rswift.StringResource(key: "ios.ZDCChat.chat.startingChatMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let status = Rswift.StringResource(key: "Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sub Total
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static let subTotal = Rswift.StringResource(key: "Sub Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let userProfileVCSubmit = Rswift.StringResource(key: "UserProfileVC.Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Submit rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderSubmitRating = Rswift.StringResource(key: "Order.SubmitRating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let success = Rswift.StringResource(key: "Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationSuccess = Rswift.StringResource(key: "Validation.Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sun = Rswift.StringResource(key: "Sun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Supplier
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let supplier = Rswift.StringResource(key: "Supplier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Supplier Rated Successfully
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let supplierRatedSuccessfully = Rswift.StringResource(key: "Supplier Rated Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Supplier Type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let supplierType = Rswift.StringResource(key: "Supplier Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Suppliers
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static let suppliers = Rswift.StringResource(key: "Suppliers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Switch Rider
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let homeSwitch_Rider = Rswift.StringResource(key: "Home.Switch_Rider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: TRACK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let tracK = Rswift.StringResource(key: "TRACK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Take photo
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatUploadSourceCamera = Rswift.StringResource(key: "ios.ZDCChat.upload.source.camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Tax
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderTax = Rswift.StringResource(key: "Order.Tax", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Tax
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let tax = Rswift.StringResource(key: "tax", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Termes and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let settingTerm = Rswift.StringResource(key: "Setting.Term", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Terms & Conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let termsAndConditions = Rswift.StringResource(key: "Terms and Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let terms_and_conditions_caps = Rswift.StringResource(key: "terms_and_conditions_caps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let landingVCTermsConditions = Rswift.StringResource(key: "LandingVC.Terms&Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Terms and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let terms_and_conditions = Rswift.StringResource(key: "terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Terms and conditions.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let termsAndConditionsSignUp = Rswift.StringResource(key: "Terms and conditionsSignUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: The entered credit card type does not match the selected payment option.
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let pf_errors_card_number_mismatch_po = Rswift.StringResource(key: "pf_errors_card_number_mismatch_po", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: The first Food Delivery application in Venezuela! They have everything: https://itunes.apple.com/us/app/%@/id?ls=1&mt=8
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let theLeadingOnlineHomeServicesInUAE = Rswift.StringResource(key: "The Leading Online Home Services In UAE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: There are currently no agents online. Would you like to send a message?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatAccountOfflineMessage = Rswift.StringResource(key: "ios.ZDCChat.accountOffline.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: There are no agents currently online.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatAgentsOfflineMessage = Rswift.StringResource(key: "ios.ZDCChat.agentsOffline.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: There are no email clients installed.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let no_email_app_installed = Rswift.StringResource(key: "no_email_app_installed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: There is no currently ongoing ride
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let noOngoigRide = Rswift.StringResource(key: "NoOngoigRide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Thought you might like this app to make life more simpler:  https://itunes.apple.com/us/app/%@/id?ls=1&mt=8
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let shareAppYummy = Rswift.StringResource(key: "ShareAppYummy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let thu = Rswift.StringResource(key: "Thu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Timeout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenTimeOut = Rswift.StringResource(key: "eToken.timeOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Timeout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenTimeout = Rswift.StringResource(key: "etoken.Timeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: To be Make Sure, if you are add a stop in current ride then you wouldn't be able to delete them. Are you sure you want to continue?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let ongoing_AddStop_Confirmation = Rswift.StringResource(key: "Ongoing_AddStop_Confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Token purchased successfully.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenTokenPurchasedSuccessfully = Rswift.StringResource(key: "eToken.tokenPurchasedSuccessfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderTotal = Rswift.StringResource(key: "Order.Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let total = Rswift.StringResource(key: "total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Track my order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let trackMyOrder = Rswift.StringResource(key: "Track my order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Tracked
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let trackeD = Rswift.StringResource(key: "TRACKED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Tracking not available yet. Please wait.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenTrackingNotAvailable = Rswift.StringResource(key: "eToken.trackingNotAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Travel Packages
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuTravel_Packages = Rswift.StringResource(key: "SideMenu.Travel_Packages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Travel packages
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let travelPackages = Rswift.StringResource(key: "Travel packages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Trucks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let freight = Rswift.StringResource(key: "freight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Trucks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceFreight = Rswift.StringResource(key: "Service.Freight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let tue = Rswift.StringResource(key: "Tue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Type your reason for cancellation
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let type_reason_for_cancellation = Rswift.StringResource(key: "type_reason_for_cancellation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Typing
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let typing = Rswift.StringResource(key: "Typing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: USD 
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let usD = Rswift.StringResource(key: "USD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Unable to send message.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatOfflineMessageFailedMessage = Rswift.StringResource(key: "ios.ZDCChat.offlineMessageFailed.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingUpcoming = Rswift.StringResource(key: "Booking.Upcoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let bookingsUpcoming = Rswift.StringResource(key: "Bookings.Upcoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let uncoming = Rswift.StringResource(key: "uncoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Upcoming orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let upcomingOrders = Rswift.StringResource(key: "Upcoming orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Upload images
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let upload_images = Rswift.StringResource(key: "upload_images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Use current location
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let useCurrentLocation = Rswift.StringResource(key: "Use current location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let nav_header_title = Rswift.StringResource(key: "nav_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Valid for
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validFor = Rswift.StringResource(key: "Valid for", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Validation success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validations_success = Rswift.StringResource(key: "validations_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static let otpvcVerificationCode = Rswift.StringResource(key: "OTPVC.VerificationCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Version : 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let version = Rswift.StringResource(key: "version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Very Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let very_good = Rswift.StringResource(key: "very_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Very Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let very_sad = Rswift.StringResource(key: "very_sad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Very sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderVerySad = Rswift.StringResource(key: "Order.VerySad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: View E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let view_e_tokens = Rswift.StringResource(key: "view_e_tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: View Package
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let viewPackage = Rswift.StringResource(key: "View Package", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Visiting Charges
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let visitingCharges = Rswift.StringResource(key: "Visiting Charges", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let sideMenuWallet = Rswift.StringResource(key: "SideMenu.Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let warning = Rswift.StringResource(key: "Warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Water Tanker
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceWaterTanker = Rswift.StringResource(key: "Service.WaterTanker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Water Tanker
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let water_tanker = Rswift.StringResource(key: "water_tanker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Water delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let waterDelivery = Rswift.StringResource(key: "Water delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We are processing your request
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let we_are_requesting_your_request = Rswift.StringResource(key: "we_are_requesting_your_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We are processing your request
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderProcessingRequestTitle = Rswift.StringResource(key: "Order.ProcessingRequestTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We got your message. We will reach you soon.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let we_will_reach_soon = Rswift.StringResource(key: "we_will_reach_soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We have been unable to reconnect. Do you wish to continue trying?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatChatConnectionLostMessage = Rswift.StringResource(key: "ios.ZDCChat.chatConnectionLost.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: We sent you a code to
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let otp_text = Rswift.StringResource(key: "otp_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We're transfering your booking to another driver.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let transferRequest = Rswift.StringResource(key: "transferRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: We've not heard from you for a while so this chat session has been closed. Please start a new chat if you still have questions.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatTimeoutMessage = Rswift.StringResource(key: "ios.ZDCChat.timeoutMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let wed = Rswift.StringResource(key: "Wed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Weekly
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let weekly = Rswift.StringResource(key: "Weekly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: What can we help you with?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatPreChatFormDepartmentPlaceholder = Rswift.StringResource(key: "ios.ZDCChat.preChatForm.departmentPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: When do you want the service?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let whenDoYouWantTheService = Rswift.StringResource(key: "When do you want the service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Where you want to deliver
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let serviceViewWhere_you_want_to_deliver = Rswift.StringResource(key: "ServiceView.Where_you_want_to_deliver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Work
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let work = Rswift.StringResource(key: "Work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Would you like to retry?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static let iosZDCChatSendOfflineMessageErrorMessage = Rswift.StringResource(key: "ios.ZDCChat.sendOfflineMessageError.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Write a cancelling reason.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderPlaceHolderCancelReason = Rswift.StringResource(key: "Order.PlaceHolderCancelReason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Write a message here directly to reach us..
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contactUsPlaceHolder = Rswift.StringResource(key: "ContactUs.PlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Write a message here directly to reach us…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let contact_us_msg_hint = Rswift.StringResource(key: "contact_us_msg_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Write a message here…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let write_your_msg_here = Rswift.StringResource(key: "write_your_msg_here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let yesBtn = Rswift.StringResource(key: "yesBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static let iosZDCChatYes = Rswift.StringResource(key: "ios.ZDCChat.yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: You are successfully logged out
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let youAreSuccessfullyLoggedOut = Rswift.StringResource(key: "You are successfully logged out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You can add maximum 2 images
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let max_images_validation_msg = Rswift.StringResource(key: "max_images_validation_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You can add only 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static let youCanAddOnly = Rswift.StringResource(key: "You can add only ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "de", "zh-Hans", "ja", "si-LK"], comment: nil)
      /// en translation: You can't use credit points for cash payment
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let canT_use_credit_point = Rswift.StringResource(key: "can't_use_credit_point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You cannot select E-Tokens as a default payment method.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let default_selecting_token_error = Rswift.StringResource(key: "default_selecting_token_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You have cancelled your order successfully
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let youHaveCancelledYourOrderSuccessfully = Rswift.StringResource(key: "You have cancelled your order successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You haven't earned any loyalty points yet.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let youHavenTEarnedAnyLoyaltyPointsYet = Rswift.StringResource(key: "You haven't earned any loyalty points yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You must have to update latest verison of the app.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let alertVersionUpdateText = Rswift.StringResource(key: "Alert.VersionUpdateText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You need to enable internet connection.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let validationInternetNotWorking = Rswift.StringResource(key: "Validation.InternetNotWorking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: You session has been expired. Please login again
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let session_expired_please_login_again = Rswift.StringResource(key: "session_expired_please_login_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your Cart has no items.Please add items to cart to Proceed.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let yourCartHasNoItemsPleaseAddItemsToCartToProceed = Rswift.StringResource(key: "Your Cart has no items.Please add items to cart to Proceed.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your Order will be confirmed during next supplier working hours/day.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let yourOrderWillBeConfirmedDuringNextSupplierWorkingHoursDay = Rswift.StringResource(key: "Your Order will be confirmed during next supplier working hours/day.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your Receipt
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let yourReceiptLbl = Rswift.StringResource(key: "YourReceiptLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your booking is not completed because the service update is under process. Please contact our customer support for assistance.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let work_in_progress = Rswift.StringResource(key: "work_in_progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your driver is picking to you long distance root. You may pay extra charged for this. Are you sure you want to continue?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let long_distance_confirmation = Rswift.StringResource(key: "long_distance_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your journey distance is more than Package distance. You may charge extra for this. Would you like to procced?
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static let package_distance_confirmation = Rswift.StringResource(key: "package_distance_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your ongoing request has been cancelled by the driver.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let ongoing_request_cancelled_by_driver = Rswift.StringResource(key: "ongoing_request_cancelled_by_driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order has been cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let order_cancelled = Rswift.StringResource(key: "order_cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order has been confirmed for delivery.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let eTokenOrderConfirmed = Rswift.StringResource(key: "eToken.orderConfirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order has been out for delivery.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let etokenOrderOutForDelivery = Rswift.StringResource(key: "etoken.orderOutForDelivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order has been placed successfully.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let yourOrderHaveBeenPlacedSuccessfully = Rswift.StringResource(key: "Your order have been placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order has been scheduled successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let yourOrderHaveBeenSheduledSuccessfully = Rswift.StringResource(key: "Your order have been sheduled successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your order is on the way for delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let truck_driver_is_on_the_way = Rswift.StringResource(key: "truck_driver_is_on_the_way", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your request has been cancelled.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let request_cancelled_successfully = Rswift.StringResource(key: "request_cancelled_successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your ride has been accepted and its pending from approval.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let your_ride_has_been_accepted_and_its_pending_from_approval = Rswift.StringResource(key: "Your_ride_has_been_accepted_and_its_pending_from_approval.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your service has been booked successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let service_booked_successfully = Rswift.StringResource(key: "service_booked_successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your service has been booked.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let popUpScheduledBookedConfirmationMessage = Rswift.StringResource(key: "PopUpScheduledBooked.ConfirmationMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: Your service has been started
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let driver_is_on_the_way_DriveStarted = Rswift.StringResource(key: "driver_is_on_the_way_DriveStarted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: available
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static let available = Rswift.StringResource(key: "available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: credit
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let credit = Rswift.StringResource(key: "credit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: customisable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let customisable = Rswift.StringResource(key: "customisable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: day
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: days
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let days = Rswift.StringResource(key: "days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: email@address.com
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let iosZDCChatTranscriptEmailAlertEmailPlaceholder = Rswift.StringResource(key: "ios.ZDCChat.transcriptEmailAlert.emailPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: hour
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: in the wallet in order to receive the booking request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let walletReceive_money = Rswift.StringResource(key: "Wallet.Receive_money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: items
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let items = Rswift.StringResource(key: "items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: left
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let left = Rswift.StringResource(key: "left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: month
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: months
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let months = Rswift.StringResource(key: "months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: password and confirm password should match.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let password_confirmPassword_validation = Rswift.StringResource(key: "password_confirmPassword_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: password should be atleast 6 characters.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let password_length_validation_message = Rswift.StringResource(key: "password_length_validation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: technical problem
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let technicalIssue = Rswift.StringResource(key: "TechnicalIssue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: the date in the past
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let past_DATE_MSG = Rswift.StringResource(key: "PAST_DATE_MSG", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderToken = Rswift.StringResource(key: "Order.Token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: token left
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let orderTokenLeft = Rswift.StringResource(key: "Order.TokenLeft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: via Sneni
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static let viaClikat = Rswift.StringResource(key: "via Clikat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "fr", "it", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: view deals available via companies
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let view_deals = Rswift.StringResource(key: "view_deals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: with Phone or Email
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let withPhoneEmail = Rswift.StringResource(key: "withPhoneEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: اردو
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameUrdu = Rswift.StringResource(key: "LanguageName.Urdu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: اردو
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let urdu = Rswift.StringResource(key: "urdu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: عربى
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameArabic = Rswift.StringResource(key: "LanguageName.Arabic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: हिंदी
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let hindi = Rswift.StringResource(key: "hindi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: हिंदी
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameHindi = Rswift.StringResource(key: "LanguageName.Hindi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: 中文
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let chinese = Rswift.StringResource(key: "chinese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// en translation: 中文
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static let languageNameChinese = Rswift.StringResource(key: "LanguageName.Chinese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en", "es", "fr", "it", "nl", "de", "zh-Hans", "ja", "si-LK", "sq"], comment: nil)
      /// es translation:  Comentarios
      ///
      /// Locales: es, nl
      static let reviews = Rswift.StringResource(key: "reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["es", "nl"], comment: nil)
      /// nl translation: Geannuleerd
      ///
      /// Locales: nl
      static let cancelled = Rswift.StringResource(key: "cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      /// sq translation: العربية
      ///
      /// Locales: sq
      static let arabic = Rswift.StringResource(key: "arabic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["sq"], comment: nil)
      /// zh-Hans translation: 卡
      ///
      /// Locales: zh-Hans
      static let card = Rswift.StringResource(key: "Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)

      /// en translation:  Mins
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func mins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mins"
        }

        return NSLocalizedString("mins", bundle: bundle, comment: "")
      }

      /// en translation:  Outstanding from previous trip
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func outstandingFromPreviousTrip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Outstanding from previous trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Outstanding from previous trip"
        }

        return NSLocalizedString("Outstanding from previous trip", bundle: bundle, comment: "")
      }

      /// en translation:  and 
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("and", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "and"
        }

        return NSLocalizedString("and", bundle: bundle, comment: "")
      }

      /// en translation:  not available 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func notAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not Available"
        }

        return NSLocalizedString("Not Available", bundle: bundle, comment: "")
      }

      /// en translation: %@ *
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormRequiredTemplate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.preChatForm.requiredTemplate", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.requiredTemplate"
        }

        let format = NSLocalizedString("ios.ZDCChat.preChatForm.requiredTemplate", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ joined the chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatAgentJoined(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.agentJoined", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.agentJoined"
        }

        let format = NSLocalizedString("ios.ZDCChat.agentJoined", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ left the chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatAgentLeft(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.agentLeft", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.agentLeft"
        }

        let format = NSLocalizedString("ios.ZDCChat.agentLeft", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ needs access to your camera
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatAccessCamera(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.access.camera", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.access.camera"
        }

        let format = NSLocalizedString("ios.ZDCChat.access.camera", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ needs access to your photos
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatAccessGallery(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.access.gallery", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.access.gallery"
        }

        let format = NSLocalizedString("ios.ZDCChat.access.gallery", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 4 Star and above
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func starAndAbove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4 Star and above", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "4 Star and above"
        }

        return NSLocalizedString("4 Star and above", bundle: bundle, comment: "")
      }

      /// en translation: About Us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About Us"
        }

        return NSLocalizedString("About Us", bundle: bundle, comment: "")
      }

      /// en translation: About Us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func about_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about_us"
        }

        return NSLocalizedString("about_us", bundle: bundle, comment: "")
      }

      /// en translation: About us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func settingAbout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.About"
        }

        return NSLocalizedString("Setting.About", bundle: bundle, comment: "")
      }

      /// en translation: Add Home Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addHomeAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Home Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Home Address"
        }

        return NSLocalizedString("Add Home Address", bundle: bundle, comment: "")
      }

      /// en translation: Add Home Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeAdd_Home_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Add_Home_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Add_Home_Address"
        }

        return NSLocalizedString("Home.Add_Home_Address", bundle: bundle, comment: "")
      }

      /// en translation: Add Trusted Contact
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addTrustedContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddTrustedContact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddTrustedContact"
        }

        return NSLocalizedString("AddTrustedContact", bundle: bundle, comment: "")
      }

      /// en translation: Add Work Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addWorkAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Work Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Work Address"
        }

        return NSLocalizedString("Add Work Address", bundle: bundle, comment: "")
      }

      /// en translation: Add Work Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeAdd_Work_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Add_Work_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Add_Work_Address"
        }

        return NSLocalizedString("Home.Add_Work_Address", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment here ...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderRatingTextPalceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.RatingTextPalceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.RatingTextPalceholder"
        }

        return NSLocalizedString("Order.RatingTextPalceholder", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment here…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func add_comments_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_comments_here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_comments_here"
        }

        return NSLocalizedString("add_comments_here", bundle: bundle, comment: "")
      }

      /// en translation: Adding products from different suppliers will clear your cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addingProductsFromDiffrentSuppliersWillClearYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Adding products from diffrent suppliers will clear your cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Adding products from diffrent suppliers will clear your cart"
        }

        return NSLocalizedString("Adding products from diffrent suppliers will clear your cart", bundle: bundle, comment: "")
      }

      /// en translation: Adding products from promotions will clear your cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addingProductsFromPromotionsWillClearYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Adding products from promotions will clear your cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Adding products from promotions will clear your cart"
        }

        return NSLocalizedString("Adding products from promotions will clear your cart", bundle: bundle, comment: "")
      }

      /// en translation: Address Line First
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addressLineFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Line First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Line First"
        }

        return NSLocalizedString("Address Line First", bundle: bundle, comment: "")
      }

      /// en translation: Address Line Second
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func addressLineSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Line Second", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Line Second"
        }

        return NSLocalizedString("Address Line Second", bundle: bundle, comment: "")
      }

      /// en translation: Agent is not assigned to this order
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func agentIsNotAssignedToThisOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Agent is not assigned to this order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Agent is not assigned to this order"
        }

        return NSLocalizedString("Agent is not assigned to this order", bundle: bundle, comment: "")
      }

      /// en translation: Alert
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.Alert"
        }

        return NSLocalizedString("Validation.Alert", bundle: bundle, comment: "")
      }

      /// en translation: Alert
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func alertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alertTitle"
        }

        return NSLocalizedString("alertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func haveAlreadyAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haveAlreadyAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "haveAlreadyAccount"
        }

        return NSLocalizedString("haveAlreadyAccount", bundle: bundle, comment: "")
      }

      /// en translation: Amount should be more than 0.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func walletAddAmountLess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet.AddAmountLess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet.AddAmountLess"
        }

        return NSLocalizedString("Wallet.AddAmountLess", bundle: bundle, comment: "")
      }

      /// en translation: An OTP will be sent on your entered mobile number for verification.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func landingVCOtpWillBeSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LandingVC.OtpWillBeSent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LandingVC.OtpWillBeSent"
        }

        return NSLocalizedString("LandingVC.OtpWillBeSent", bundle: bundle, comment: "")
      }

      /// en translation: Approval Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenApprovalPending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.approvalPending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.approvalPending"
        }

        return NSLocalizedString("eToken.approvalPending", bundle: bundle, comment: "")
      }

      /// en translation: Approval Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenApprovalPending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.ApprovalPending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.ApprovalPending"
        }

        return NSLocalizedString("etoken.ApprovalPending", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to Signout?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func logout_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_confirmation"
        }

        return NSLocalizedString("logout_confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to buy this e-token?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buy_etoken_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buy_etoken_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy_etoken_confirmation"
        }

        return NSLocalizedString("buy_etoken_confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func areYouSureYouWantToDeleteThisAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete this address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete this address"
        }

        return NSLocalizedString("Are you sure you want to delete this address", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en, nl, de, zh-Hans, ja, si-LK, sq
      static func areYouSureYouWantToLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to logout"
        }

        return NSLocalizedString("Are you sure you want to logout", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to remove card?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func remove_card_Confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_card_Confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_card_Confirmation"
        }

        return NSLocalizedString("remove_card_Confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to send Panic Request to your nearby?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func areYouSureYouWantToSendPanicRequestToYourNearby(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to send Panic Request to your nearby?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to send Panic Request to your nearby?"
        }

        return NSLocalizedString("Are you sure you want to send Panic Request to your nearby?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you would like to end this chat?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatChatEndedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatEndedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatEndedMessage"
        }

        return NSLocalizedString("ios.ZDCChat.chatEndedMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func areYouSure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure"
        }

        return NSLocalizedString("Are you sure", bundle: bundle, comment: "")
      }

      /// en translation: Area
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func area(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Area"
        }

        return NSLocalizedString("Area", bundle: bundle, comment: "")
      }

      /// en translation: At Place Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func atplaceservicE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AT PLACE SERVICE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AT PLACE SERVICE"
        }

        return NSLocalizedString("AT PLACE SERVICE", bundle: bundle, comment: "")
      }

      /// en translation: Awaiting Shipment
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func awaitingShipment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Awaiting Shipment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Awaiting Shipment"
        }

        return NSLocalizedString("Awaiting Shipment", bundle: bundle, comment: "")
      }

      /// en translation: BOOK AGAIN
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookagaiN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BOOK AGAIN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BOOK AGAIN"
        }

        return NSLocalizedString("BOOK AGAIN", bundle: bundle, comment: "")
      }

      /// en translation: BOOKED
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BOOKED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BOOKED"
        }

        return NSLocalizedString("BOOKED", bundle: bundle, comment: "")
      }

      /// en translation: Baby sitter
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func babySitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Baby sitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Baby sitter"
        }

        return NSLocalizedString("Baby sitter", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatBackButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.backButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.backButton"
        }

        return NSLocalizedString("ios.ZDCChat.backButton", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func navigationButtonBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NavigationButton.Back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NavigationButton.Back"
        }

        return NSLocalizedString("NavigationButton.Back", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back"
        }

        return NSLocalizedString("back", bundle: bundle, comment: "")
      }

      /// en translation: Base fare
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func base_fair(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("base_fair", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "base_fair"
        }

        return NSLocalizedString("base_fair", bundle: bundle, comment: "")
      }

      /// en translation: Base fare
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderBaseFair(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.BaseFair", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.BaseFair"
        }

        return NSLocalizedString("Order.BaseFair", bundle: bundle, comment: "")
      }

      /// en translation: Beauty salon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func beautySalon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Beauty salon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Beauty salon"
        }

        return NSLocalizedString("Beauty salon", bundle: bundle, comment: "")
      }

      /// en translation: Before you end this chat, would you like to email a transcript?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatTranscriptEmailAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.transcriptEmailAlert.message"
        }

        return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.message", bundle: bundle, comment: "")
      }

      /// en translation: Bletani
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AppName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AppName"
        }

        return NSLocalizedString("AppName", bundle: bundle, comment: "")
      }

      /// en translation: Book
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func book(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("book", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "book"
        }

        return NSLocalizedString("book", bundle: bundle, comment: "")
      }

      /// en translation: Book
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderBook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Book", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Book"
        }

        return NSLocalizedString("Order.Book", bundle: bundle, comment: "")
      }

      /// en translation: Book Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func book_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("book_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "book_now"
        }

        return NSLocalizedString("book_now", bundle: bundle, comment: "")
      }

      /// en translation: Book Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buttonTitleBookNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Title.BookNow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button.Title.BookNow"
        }

        return NSLocalizedString("Button.Title.BookNow", bundle: bundle, comment: "")
      }

      /// en translation: Book a delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeBook_a_delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Book_a_delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Book_a_delivery"
        }

        return NSLocalizedString("Home.Book_a_delivery", bundle: bundle, comment: "")
      }

      /// en translation: Book a service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeBook_a_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Book_a_service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Book_a_service"
        }

        return NSLocalizedString("Home.Book_a_service", bundle: bundle, comment: "")
      }

      /// en translation: Book a service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuBook_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Book_service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Book_service"
        }

        return NSLocalizedString("SideMenu.Book_service", bundle: bundle, comment: "")
      }

      /// en translation: Book a taxi
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuBook_a_taxi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Book_a_taxi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Book_a_taxi"
        }

        return NSLocalizedString("SideMenu.Book_a_taxi", bundle: bundle, comment: "")
      }

      /// en translation: Booking Details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func booking_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("booking_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "booking_details"
        }

        return NSLocalizedString("booking_details", bundle: bundle, comment: "")
      }

      /// en translation: Booking Details
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking Details"
        }

        return NSLocalizedString("Booking Details", bundle: bundle, comment: "")
      }

      /// en translation: Booking History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking History"
        }

        return NSLocalizedString("Booking History", bundle: bundle, comment: "")
      }

      /// en translation: Booking placed successfully
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking placed successfully"
        }

        return NSLocalizedString("Booking placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionBookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Bookings"
        }

        return NSLocalizedString("LeftMenuOption.Bookings", bundle: bundle, comment: "")
      }

      /// en translation: Bookings
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookings"
        }

        return NSLocalizedString("bookings", bundle: bundle, comment: "")
      }

      /// en translation: Both
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func both(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Both", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Both"
        }

        return NSLocalizedString("Both", bundle: bundle, comment: "")
      }

      /// en translation: Breakdown
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func breakdown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("breakdown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "breakdown"
        }

        return NSLocalizedString("breakdown", bundle: bundle, comment: "")
      }

      /// en translation: Breakdown Recovery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceTow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.Tow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.Tow"
        }

        return NSLocalizedString("Service.Tow", bundle: bundle, comment: "")
      }

      /// en translation: Breakdown Recovery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func tow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tow"
        }

        return NSLocalizedString("tow", bundle: bundle, comment: "")
      }

      /// en translation: Bronze
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func bronze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bronze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bronze"
        }

        return NSLocalizedString("Bronze", bundle: bundle, comment: "")
      }

      /// en translation: Buraq 24
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buraq_24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buraq_24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buraq_24"
        }

        return NSLocalizedString("buraq_24", bundle: bundle, comment: "")
      }

      /// en translation: Buraq24-Customer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func app_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_name"
        }

        return NSLocalizedString("app_name", bundle: bundle, comment: "")
      }

      /// en translation: Busy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func busy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Busy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Busy"
        }

        return NSLocalizedString("Busy", bundle: bundle, comment: "")
      }

      /// en translation: Buy E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buy_etoken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buy_etoken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy_etoken"
        }

        return NSLocalizedString("buy_etoken", bundle: bundle, comment: "")
      }

      /// en translation: By creating account you agree
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func by_creating_account_you_agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by_creating_account_you_agree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by_creating_account_you_agree"
        }

        return NSLocalizedString("by_creating_account_you_agree", bundle: bundle, comment: "")
      }

      /// en translation: By creating account you agree
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func landingVCAccountAgreement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LandingVC.AccountAgreement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LandingVC.AccountAgreement"
        }

        return NSLocalizedString("LandingVC.AccountAgreement", bundle: bundle, comment: "")
      }

      /// en translation: By signing up you agree to the 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static func bySigningUpYouAgreeToThe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("By signing up you agree to the ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "By signing up you agree to the "
        }

        return NSLocalizedString("By signing up you agree to the ", bundle: bundle, comment: "")
      }

      /// en translation: CAD
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currency"
        }

        return NSLocalizedString("currency", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL BOOKING
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancelbookinG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL BOOKING", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL BOOKING"
        }

        return NSLocalizedString("CANCEL BOOKING", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL ORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancelordeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL ORDER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL ORDER"
        }

        return NSLocalizedString("CANCEL ORDER", bundle: bundle, comment: "")
      }

      /// en translation: CARD NUMBER
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func cardNumberPl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CardNumberPl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CardNumberPl"
        }

        return NSLocalizedString("CardNumberPl", bundle: bundle, comment: "")
      }

      /// en translation: CARDHOLDER NAME
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func cardNamePl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CardNamePl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CardNamePl"
        }

        return NSLocalizedString("CardNamePl", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM BOOKING
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func confirmbookinG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CONFIRM BOOKING", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CONFIRM BOOKING"
        }

        return NSLocalizedString("CONFIRM BOOKING", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM ORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func confirmordeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CONFIRM ORDER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CONFIRM ORDER"
        }

        return NSLocalizedString("CONFIRM ORDER", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE WITH APPLE
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func continue_WITH_APPLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CONTINUE_WITH_APPLE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CONTINUE_WITH_APPLE"
        }

        return NSLocalizedString("CONTINUE_WITH_APPLE", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func cvCtxt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCtxt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCtxt"
        }

        return NSLocalizedString("CVCtxt", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func dialog_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_camera"
        }

        return NSLocalizedString("dialog_camera", bundle: bundle, comment: "")
      }

      /// en translation: Camera Unavailable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func cameraUnavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera Unavailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera Unavailable"
        }

        return NSLocalizedString("Camera Unavailable", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancel_Ride(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel_Ride", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel_Ride"
        }

        return NSLocalizedString("Cancel_Ride", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.cancel"
        }

        return NSLocalizedString("ios.ZDCChat.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatCancelButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.cancelButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.cancelButton"
        }

        return NSLocalizedString("ios.ZDCChat.cancelButton", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Cancel"
        }

        return NSLocalizedString("Order.Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Booking
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancelBooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel Booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel Booking"
        }

        return NSLocalizedString("Cancel Booking", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancel_Delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel_Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel_Delivery"
        }

        return NSLocalizedString("Cancel_Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel Order"
        }

        return NSLocalizedString("Cancel Order", bundle: bundle, comment: "")
      }

      /// en translation: Cancel this payment?
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func titleMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titleMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titleMessage"
        }

        return NSLocalizedString("titleMessage", bundle: bundle, comment: "")
      }

      /// en translation: Cancelled
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func customercancelleD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CUSTOMER CANCELLED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CUSTOMER CANCELLED"
        }

        return NSLocalizedString("CUSTOMER CANCELLED", bundle: bundle, comment: "")
      }

      /// en translation: Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderUIStatusCancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderUI.Status.Cancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderUI.Status.Cancelled"
        }

        return NSLocalizedString("OrderUI.Status.Cancelled", bundle: bundle, comment: "")
      }

      /// en translation: Card
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Card"
        }

        return NSLocalizedString("Order.Card", bundle: bundle, comment: "")
      }

      /// en translation: Cart
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cart"
        }

        return NSLocalizedString("Cart", bundle: bundle, comment: "")
      }

      /// en translation: Cartes enregistrées
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuSaved_Cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Saved_Cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Saved_Cards"
        }

        return NSLocalizedString("SideMenu.Saved_Cards", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cash"
        }

        return NSLocalizedString("cash", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderCash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Cash"
        }

        return NSLocalizedString("Order.Cash", bundle: bundle, comment: "")
      }

      /// en translation: Cash on delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cash_on_delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cash_on_delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cash_on_delivery"
        }

        return NSLocalizedString("cash_on_delivery", bundle: bundle, comment: "")
      }

      /// en translation: Cash on delivery
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cashOnDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cash on delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cash on delivery"
        }

        return NSLocalizedString("Cash on delivery", bundle: bundle, comment: "")
      }

      /// en translation: Cash on delivery
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderCashOnDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.CashOnDelivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.CashOnDelivery"
        }

        return NSLocalizedString("Order.CashOnDelivery", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func change_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_language"
        }

        return NSLocalizedString("change_language", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func settingChangeLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.ChangeLanguage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.ChangeLanguage"
        }

        return NSLocalizedString("Setting.ChangeLanguage", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Change pick up time no suppliers are available for this pickup timing
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func changePickUpTimeNoSuppliersAreAvailableForThisPickupTiming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change pick up time no suppliers are available for this pickup timing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change pick up time no suppliers are available for this pickup timing"
        }

        return NSLocalizedString("Change pick up time no suppliers are available for this pickup timing", bundle: bundle, comment: "")
      }

      /// en translation: Changing the current area will clear you cart.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func changingTheCurrentAreaWillClearYouCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Changing the current area will clear you cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Changing the current area will clear you cart"
        }

        return NSLocalizedString("Changing the current area will clear you cart", bundle: bundle, comment: "")
      }

      /// en translation: Changing the language will clear your cart. Are you sure you want to proceed?
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func changingTheLanguageWillClearYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Changing the language will clear your cart.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Changing the language will clear your cart."
        }

        return NSLocalizedString("Changing the language will clear your cart.", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.title"
        }

        return NSLocalizedString("ios.ZDCChat.title", bundle: bundle, comment: "")
      }

      /// en translation: Choose booking cycle
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func chooseBookingCycle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose booking cycle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose booking cycle"
        }

        return NSLocalizedString("Choose booking cycle", bundle: bundle, comment: "")
      }

      /// en translation: Choose location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func chooseLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose location"
        }

        return NSLocalizedString("Choose location", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("City", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "City"
        }

        return NSLocalizedString("City", bundle: bundle, comment: "")
      }

      /// en translation: Cleaning
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func cleaning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cleaning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cleaning"
        }

        return NSLocalizedString("Cleaning", bundle: bundle, comment: "")
      }

      /// en translation: Close navigation drawer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func navigation_drawer_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("navigation_drawer_close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "navigation_drawer_close"
        }

        return NSLocalizedString("navigation_drawer_close", bundle: bundle, comment: "")
      }

      /// en translation: Closed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func closed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Closed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Closed"
        }

        return NSLocalizedString("Closed", bundle: bundle, comment: "")
      }

      /// en translation: Coming soon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func coming_soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coming_soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coming_soon"
        }

        return NSLocalizedString("coming_soon", bundle: bundle, comment: "")
      }

      /// en translation: Compare Products
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func compareProducts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Compare Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Compare Products"
        }

        return NSLocalizedString("Compare Products", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusSerComplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.SerComplete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.SerComplete"
        }

        return NSLocalizedString("OrderStatus.SerComplete", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderUIStatusCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderUI.Status.Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderUI.Status.Completed"
        }

        return NSLocalizedString("OrderUI.Status.Completed", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "completed"
        }

        return NSLocalizedString("completed", bundle: bundle, comment: "")
      }

      /// en translation: Completed Bookings
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func completedBookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed Bookings"
        }

        return NSLocalizedString("Completed Bookings", bundle: bundle, comment: "")
      }

      /// en translation: Completed at
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func completed_at(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("completed_at", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "completed_at"
        }

        return NSLocalizedString("completed_at", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Booking
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func booking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "booking"
        }

        return NSLocalizedString("booking", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Schedule
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "schedule"
        }

        return NSLocalizedString("schedule", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, fr, it, nl, de, ja, si-LK, sq
      static func validationAlert2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.Alert2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.Alert2"
        }

        return NSLocalizedString("Validation.Alert2", bundle: bundle, comment: "")
      }

      /// en translation: Confirmed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func confirmeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CONFIRMED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CONFIRMED"
        }

        return NSLocalizedString("CONFIRMED", bundle: bundle, comment: "")
      }

      /// en translation: Confirmed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusConfirmed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.Confirmed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.Confirmed"
        }

        return NSLocalizedString("OrderStatus.Confirmed", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func popUpScheduledBookedConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PopUpScheduledBooked.ConfirmationTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PopUpScheduledBooked.ConfirmationTitle"
        }

        return NSLocalizedString("PopUpScheduledBooked.ConfirmationTitle", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func congratulations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("congratulations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "congratulations"
        }

        return NSLocalizedString("congratulations", bundle: bundle, comment: "")
      }

      /// en translation: Connecting your needs in seconds
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func slogan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slogan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slogan"
        }

        return NSLocalizedString("slogan", bundle: bundle, comment: "")
      }

      /// en translation: Connection lost
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatChatConnectionLostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatConnectionLost.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatConnectionLost.title"
        }

        return NSLocalizedString("ios.ZDCChat.chatConnectionLost.title", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contact_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact_us"
        }

        return NSLocalizedString("contact_us", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionContactUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.ContactUs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.ContactUs"
        }

        return NSLocalizedString("LeftMenuOption.ContactUs", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuContact_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Contact_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Contact_us"
        }

        return NSLocalizedString("SideMenu.Contact_us", bundle: bundle, comment: "")
      }

      /// en translation: Could not connect
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatCantConnectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.cantConnectTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.cantConnectTitle"
        }

        return NSLocalizedString("ios.ZDCChat.cantConnectTitle", bundle: bundle, comment: "")
      }

      /// en translation: Could not send message
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatSendOfflineMessageErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.sendOfflineMessageError.title"
        }

        return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.title", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func creditCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Credit Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Credit Card"
        }

        return NSLocalizedString("Credit Card", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func titleviewLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titleviewLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titleviewLbl"
        }

        return NSLocalizedString("titleviewLbl", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card number must consist of 16 digits.
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func invaildCardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InvaildCardNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InvaildCardNumber"
        }

        return NSLocalizedString("InvaildCardNumber", bundle: bundle, comment: "")
      }

      /// en translation: Credit/Debit card
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func creditDebitCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Credit/Debit card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Credit/Debit card"
        }

        return NSLocalizedString("Credit/Debit card", bundle: bundle, comment: "")
      }

      /// en translation: Current session expired   Please Login to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sessionExpiredLoginToContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Session expired login to continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Session expired login to continue"
        }

        return NSLocalizedString("Session expired login to continue", bundle: bundle, comment: "")
      }

      /// en translation: Currently, no driver available.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func currently_no_driver_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currently_no_driver_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currently_no_driver_available"
        }

        return NSLocalizedString("currently_no_driver_available", bundle: bundle, comment: "")
      }

      /// en translation: Currently, no driver available.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func no_driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_driver"
        }

        return NSLocalizedString("no_driver", bundle: bundle, comment: "")
      }

      /// en translation: Customer Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusCustomerCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.CustomerCancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.CustomerCancel"
        }

        return NSLocalizedString("OrderStatus.CustomerCancel", bundle: bundle, comment: "")
      }

      /// en translation: Customizable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func customizable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Customizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Customizable"
        }

        return NSLocalizedString("Customizable", bundle: bundle, comment: "")
      }

      /// en translation: Daily Deals
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, sq
      static func dailyDeals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Daily Deals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Daily Deals"
        }

        return NSLocalizedString("Daily Deals", bundle: bundle, comment: "")
      }

      /// en translation: Deliver with us!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuDeliver_with_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Deliver_with_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Deliver_with_us"
        }

        return NSLocalizedString("SideMenu.Deliver_with_us", bundle: bundle, comment: "")
      }

      /// en translation: Delivered
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func delivereD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DELIVERED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DELIVERED"
        }

        return NSLocalizedString("DELIVERED", bundle: bundle, comment: "")
      }

      /// en translation: Delivered on
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func deliveredOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivered on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivered on"
        }

        return NSLocalizedString("Delivered on", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery"
        }

        return NSLocalizedString("Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func deliveryAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery Address"
        }

        return NSLocalizedString("Delivery Address", bundle: bundle, comment: "")
      }

      /// en translation: Delivery History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuDelivery_History(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Delivery_History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Delivery_History"
        }

        return NSLocalizedString("SideMenu.Delivery_History", bundle: bundle, comment: "")
      }

      /// en translation: Delivery In Progress
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func delivery_In_Progress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery_In_Progress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery_In_Progress"
        }

        return NSLocalizedString("Delivery_In_Progress", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Speed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func deliverySpeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery Speed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery Speed"
        }

        return NSLocalizedString("Delivery Speed", bundle: bundle, comment: "")
      }

      /// en translation: Delivery care free at your doorstep.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func introductionVCTitleDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IntroductionVC.TitleDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "IntroductionVC.TitleDescription"
        }

        return NSLocalizedString("IntroductionVC.TitleDescription", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: en, fr, de, zh-Hans, ja, si-LK, sq
      static func deliveryCharges(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery charges", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery charges"
        }

        return NSLocalizedString("Delivery charges", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges applicable accordingly
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func deliveryChargesApplicableAccordingly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery charges applicable accordingly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery charges applicable accordingly"
        }

        return NSLocalizedString("Delivery charges applicable accordingly", bundle: bundle, comment: "")
      }

      /// en translation: Delivery location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func delivery_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_location"
        }

        return NSLocalizedString("delivery_location", bundle: bundle, comment: "")
      }

      /// en translation: Delivery on
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func deliveryOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery on"
        }

        return NSLocalizedString("Delivery on", bundle: bundle, comment: "")
      }

      /// en translation: Discoverability
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func discoverability(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discoverability", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discoverability"
        }

        return NSLocalizedString("Discoverability", bundle: bundle, comment: "")
      }

      /// en translation: Do you have (Brand name) bottles with you?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenReturnBottleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.returnBottleTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.returnBottleTitle"
        }

        return NSLocalizedString("eToken.returnBottleTitle", bundle: bundle, comment: "")
      }

      /// en translation: Do you really want to cancel this order?
      ///
      /// Locales: en, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func doYouReallyWantToCancelThisOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Do you really want to cancel this order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Do you really want to cancel this order"
        }

        return NSLocalizedString("Do you really want to cancel this order", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to buy this e-token ?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buyTokenPopUpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BuyToken.PopUpTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BuyToken.PopUpTitle"
        }

        return NSLocalizedString("BuyToken.PopUpTitle", bundle: bundle, comment: "")
      }

      /// en translation: Don't receive your code?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func otpvcDontReceiveCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPVC.DontReceiveCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTPVC.DontReceiveCode"
        }

        return NSLocalizedString("OTPVC.DontReceiveCode", bundle: bundle, comment: "")
      }

      /// en translation: Don't send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatTranscriptEmailAlertDontSendButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.dontSendButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.transcriptEmailAlert.dontSendButton"
        }

        return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.dontSendButton", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.done"
        }

        return NSLocalizedString("ios.ZDCChat.done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func doneBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("doneBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "doneBtn"
        }

        return NSLocalizedString("doneBtn", bundle: bundle, comment: "")
      }

      /// en translation: Don’t have an account?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func haveNoAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haveNoAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "haveNoAccount"
        }

        return NSLocalizedString("haveNoAccount", bundle: bundle, comment: "")
      }

      /// en translation: Drinking Water
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func drinking_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drinking_water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drinking_water"
        }

        return NSLocalizedString("drinking_water", bundle: bundle, comment: "")
      }

      /// en translation: Drinking Water
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceDrinkingWater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.DrinkingWater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.DrinkingWater"
        }

        return NSLocalizedString("Service.DrinkingWater", bundle: bundle, comment: "")
      }

      /// en translation: Driver Cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusDriverCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.DriverCancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.DriverCancel"
        }

        return NSLocalizedString("OrderStatus.DriverCancel", bundle: bundle, comment: "")
      }

      /// en translation: Driver has accepted your request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driverStatusAcceptedRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DriverStatus.AcceptedRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DriverStatus.AcceptedRequest"
        }

        return NSLocalizedString("DriverStatus.AcceptedRequest", bundle: bundle, comment: "")
      }

      /// en translation: Driver has accepted your request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driver_accepted_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("driver_accepted_request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "driver_accepted_request"
        }

        return NSLocalizedString("driver_accepted_request", bundle: bundle, comment: "")
      }

      /// en translation: Driver has reached
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driver_is_reached(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("driver_is_reached", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "driver_is_reached"
        }

        return NSLocalizedString("driver_is_reached", bundle: bundle, comment: "")
      }

      /// en translation: Driver is completing nearby order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driver_completing_nearby_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("driver_completing_nearby_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "driver_completing_nearby_order"
        }

        return NSLocalizedString("driver_completing_nearby_order", bundle: bundle, comment: "")
      }

      /// en translation: Driver is completing nearby order.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driverStatusAnotherOrderOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DriverStatus.AnotherOrderOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DriverStatus.AnotherOrderOnWay"
        }

        return NSLocalizedString("DriverStatus.AnotherOrderOnWay", bundle: bundle, comment: "")
      }

      /// en translation: Driver is on the way
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driver_is_on_the_way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("driver_is_on_the_way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "driver_is_on_the_way"
        }

        return NSLocalizedString("driver_is_on_the_way", bundle: bundle, comment: "")
      }

      /// en translation: Driver is on the way.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driverStatusYourOrderOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DriverStatus.YourOrderOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DriverStatus.YourOrderOnWay"
        }

        return NSLocalizedString("DriverStatus.YourOrderOnWay", bundle: bundle, comment: "")
      }

      /// en translation: Drop off location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func drop_off_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drop_off_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drop_off_location"
        }

        return NSLocalizedString("drop_off_location", bundle: bundle, comment: "")
      }

      /// en translation: Dutch
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func languageNameDutch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Dutch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Dutch"
        }

        return NSLocalizedString("LanguageName.Dutch", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func e_token(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e_token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "e_token"
        }

        return NSLocalizedString("e_token", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenEToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.eToken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.eToken"
        }

        return NSLocalizedString("etoken.eToken", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderEToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.EToken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.EToken"
        }

        return NSLocalizedString("Order.EToken", bundle: bundle, comment: "")
      }

      /// en translation: E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func e_tokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e_tokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "e_tokens"
        }

        return NSLocalizedString("e_tokens", bundle: bundle, comment: "")
      }

      /// en translation: EXPIRY DATE
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func expDateLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ExpDateLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ExpDateLbl"
        }

        return NSLocalizedString("ExpDateLbl", bundle: bundle, comment: "")
      }

      /// en translation: Edit Actions
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func share_SHEET_EDIT_ACTIONS_BUTTON_TITLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHARE_SHEET_EDIT_ACTIONS_BUTTON_TITLE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHARE_SHEET_EDIT_ACTIONS_BUTTON_TITLE"
        }

        return NSLocalizedString("SHARE_SHEET_EDIT_ACTIONS_BUTTON_TITLE", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func edit_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit_profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit_profile"
        }

        return NSLocalizedString("edit_profile", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuEdit_Profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Edit_Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Edit_Profile"
        }

        return NSLocalizedString("SideMenu.Edit_Profile", bundle: bundle, comment: "")
      }

      /// en translation: Edit comment...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatRatingEditButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.rating.editButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.rating.editButton"
        }

        return NSLocalizedString("ios.ZDCChat.rating.editButton", bundle: bundle, comment: "")
      }

      /// en translation: Edit this number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func edit_this_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit_this_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit_this_number"
        }

        return NSLocalizedString("edit_this_number", bundle: bundle, comment: "")
      }

      /// en translation: Edit this number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otpvcEditNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPVC.EditNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTPVC.EditNumber"
        }

        return NSLocalizedString("OTPVC.EditNumber", bundle: bundle, comment: "")
      }

      /// en translation: Email a transcript
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatTranscriptEmailAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.transcriptEmailAlert.title"
        }

        return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.title", bundle: bundle, comment: "")
      }

      /// en translation: Email address
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatEmailPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.emailPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.emailPlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.emailPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Email is not configured on the phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func email_not_configured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_not_configured", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_not_configured"
        }

        return NSLocalizedString("email_not_configured", bundle: bundle, comment: "")
      }

      /// en translation: Emergency Contact
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func emmergencyEmmergency_Contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Emmergency.Emmergency_Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Emmergency.Emmergency_Contact"
        }

        return NSLocalizedString("Emmergency.Emmergency_Contact", bundle: bundle, comment: "")
      }

      /// en translation: Emergency Contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuEmergency_Contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Emergency_Contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Emergency_Contacts"
        }

        return NSLocalizedString("SideMenu.Emergency_Contacts", bundle: bundle, comment: "")
      }

      /// en translation: Emergency contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func emergencyContacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Emergency contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Emergency contacts"
        }

        return NSLocalizedString("Emergency contacts", bundle: bundle, comment: "")
      }

      /// en translation: Enable this from the home screen, Settings > %@
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatAccessHowto(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.access.howto", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.access.howto"
        }

        let format = NSLocalizedString("ios.ZDCChat.access.howto", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: End
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatEnd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.end", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.end"
        }

        return NSLocalizedString("ios.ZDCChat.end", bundle: bundle, comment: "")
      }

      /// en translation: End chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatChatEndedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatEndedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatEndedTitle"
        }

        return NSLocalizedString("ios.ZDCChat.chatEndedTitle", bundle: bundle, comment: "")
      }

      /// en translation: End chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatEndButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.endButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.endButton"
        }

        return NSLocalizedString("ios.ZDCChat.endButton", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameEnglish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.English"
        }

        return NSLocalizedString("LanguageName.English", bundle: bundle, comment: "")
      }

      /// en translation: Enjoy Your Ride
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enjoy_Your_Ride(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enjoy_Your_Ride", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enjoy_Your_Ride"
        }

        return NSLocalizedString("Enjoy_Your_Ride", bundle: bundle, comment: "")
      }

      /// en translation: Enter Drop off Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_drop_off_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_drop_off_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_drop_off_location"
        }

        return NSLocalizedString("enter_drop_off_location", bundle: bundle, comment: "")
      }

      /// en translation: Enter additional information...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_additional_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_additional_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_additional_information"
        }

        return NSLocalizedString("enter_additional_information", bundle: bundle, comment: "")
      }

      /// en translation: Enter approx weight in Kg's...
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_approx_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_approx_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_approx_weight"
        }

        return NSLocalizedString("enter_approx_weight", bundle: bundle, comment: "")
      }

      /// en translation: Enter details of order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_details_of_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_details_of_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_details_of_order"
        }

        return NSLocalizedString("enter_details_of_order", bundle: bundle, comment: "")
      }

      /// en translation: Enter details of order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderDetailEnterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.DetailEnterTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.DetailEnterTitle"
        }

        return NSLocalizedString("Order.DetailEnterTitle", bundle: bundle, comment: "")
      }

      /// en translation: Enter drop off location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderDropOffLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.DropOffLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.DropOffLocation"
        }

        return NSLocalizedString("Order.DropOffLocation", bundle: bundle, comment: "")
      }

      /// en translation: Enter instructions here
      ///
      /// Locales: ar, en
      static func enterInstructionsHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter instructions here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter instructions here"
        }

        return NSLocalizedString("Enter instructions here", bundle: bundle, comment: "")
      }

      /// en translation: Enter pickup location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_pickup_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_pickup_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_pickup_location"
        }

        return NSLocalizedString("enter_pickup_location", bundle: bundle, comment: "")
      }

      /// en translation: Enter the OTP Received on
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otpvcotpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPVC.OTPText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTPVC.OTPText"
        }

        return NSLocalizedString("OTPVC.OTPText", bundle: bundle, comment: "")
      }

      /// en translation: Enter the code sent on
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_otp_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_otp_on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_otp_on"
        }

        return NSLocalizedString("enter_otp_on", bundle: bundle, comment: "")
      }

      /// en translation: Enter your Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enterYourAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your Address"
        }

        return NSLocalizedString("Enter your Address", bundle: bundle, comment: "")
      }

      /// en translation: Enter your details.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func enterYourDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your details.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your details."
        }

        return NSLocalizedString("Enter your details.", bundle: bundle, comment: "")
      }

      /// en translation: Enter your mobile no.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func enter_you_mobile_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_you_mobile_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_you_mobile_no"
        }

        return NSLocalizedString("enter_you_mobile_no", bundle: bundle, comment: "")
      }

      /// en translation: Enter your mobile number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func landingVCMobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LandingVC.MobileNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LandingVC.MobileNumber"
        }

        return NSLocalizedString("LandingVC.MobileNumber", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Error accessing file
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatUploadErrorAccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.upload.error.access", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.upload.error.access"
        }

        return NSLocalizedString("ios.ZDCChat.upload.error.access", bundle: bundle, comment: "")
      }

      /// en translation: Error occurred on server. Please try again.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func api_error_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("api_error_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "api_error_msg"
        }

        return NSLocalizedString("api_error_msg", bundle: bundle, comment: "")
      }

      /// en translation: Excellent
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func excellent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("excellent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "excellent"
        }

        return NSLocalizedString("excellent", bundle: bundle, comment: "")
      }

      /// en translation: Expected Delivery On
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static func expectedDeliveryOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expected Delivery On", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expected Delivery On"
        }

        return NSLocalizedString("Expected Delivery On", bundle: bundle, comment: "")
      }

      /// en translation: Failed
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pf_resp_page_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pf_resp_page_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pf_resp_page_failed"
        }

        return NSLocalizedString("pf_resp_page_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to download. Tap to retry.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatDownloadFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.download.failedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.download.failedMessage"
        }

        return NSLocalizedString("ios.ZDCChat.download.failedMessage", bundle: bundle, comment: "")
      }

      /// en translation: Failed to send. Tap to retry.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatUnsentMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.unsentMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.unsentMessage"
        }

        return NSLocalizedString("ios.ZDCChat.unsentMessage", bundle: bundle, comment: "")
      }

      /// en translation: Favourites
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func share_SHEET_EDIT_SECTION_TITLE_FAVORITES(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHARE_SHEET_EDIT_SECTION_TITLE_FAVORITES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHARE_SHEET_EDIT_SECTION_TITLE_FAVORITES"
        }

        return NSLocalizedString("SHARE_SHEET_EDIT_SECTION_TITLE_FAVORITES", bundle: bundle, comment: "")
      }

      /// en translation: Feedback Given
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func feedbackgiveN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FEEDBACKGIVEN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FEEDBACKGIVEN"
        }

        return NSLocalizedString("FEEDBACKGIVEN", bundle: bundle, comment: "")
      }

      /// en translation: Fields marked with * are required
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.required"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.required", bundle: bundle, comment: "")
      }

      /// en translation: File size too large
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatUploadErrorSize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.upload.error.size", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.upload.error.size"
        }

        return NSLocalizedString("ios.ZDCChat.upload.error.size", bundle: bundle, comment: "")
      }

      /// en translation: File type not permitted
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatUploadErrorType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.upload.error.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.upload.error.type"
        }

        return NSLocalizedString("ios.ZDCChat.upload.error.type", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finish"
        }

        return NSLocalizedString("finish", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func orderFinish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Finish"
        }

        return NSLocalizedString("Order.Finish", bundle: bundle, comment: "")
      }

      /// en translation: Fitness
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func fitness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fitness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fitness"
        }

        return NSLocalizedString("Fitness", bundle: bundle, comment: "")
      }

      /// en translation: Flowers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func flowers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Flowers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Flowers"
        }

        return NSLocalizedString("Flowers", bundle: bundle, comment: "")
      }

      /// en translation: For Friend
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeFor_Friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.For_Friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.For_Friend"
        }

        return NSLocalizedString("Home.For_Friend", bundle: bundle, comment: "")
      }

      /// en translation: For me
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeFor_me(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.For_me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.For_me"
        }

        return NSLocalizedString("Home.For_me", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func introductionVCTitleFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IntroductionVC.TitleFirst", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "IntroductionVC.TitleFirst"
        }

        return NSLocalizedString("IntroductionVC.TitleFirst", bundle: bundle, comment: "")
      }

      /// en translation: French
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameFrench(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.French", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.French"
        }

        return NSLocalizedString("LanguageName.French", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func fri(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri"
        }

        return NSLocalizedString("Fri", bundle: bundle, comment: "")
      }

      /// en translation: Full Name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func full_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("full_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "full_name"
        }

        return NSLocalizedString("full_name", bundle: bundle, comment: "")
      }

      /// en translation: Full name
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func userProfileVCFullNamePlaceHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserProfileVC.FullNamePlaceHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserProfileVC.FullNamePlaceHolder"
        }

        return NSLocalizedString("UserProfileVC.FullNamePlaceHolder", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func dialog_gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_gallery"
        }

        return NSLocalizedString("dialog_gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gas
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func gas(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gas", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gas"
        }

        return NSLocalizedString("gas", bundle: bundle, comment: "")
      }

      /// en translation: Gas
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceGas(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.Gas", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.Gas"
        }

        return NSLocalizedString("Service.Gas", bundle: bundle, comment: "")
      }

      /// en translation: German
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func languageNameGerman(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.German", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.German"
        }

        return NSLocalizedString("LanguageName.German", bundle: bundle, comment: "")
      }

      /// en translation: Go to Home
      ///
      /// Locales: ar, en
      static func goToHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go to Home"
        }

        return NSLocalizedString("Go to Home", bundle: bundle, comment: "")
      }

      /// en translation: Gold
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func gold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gold"
        }

        return NSLocalizedString("Gold", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good"
        }

        return NSLocalizedString("good", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderGood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Good"
        }

        return NSLocalizedString("Order.Good", bundle: bundle, comment: "")
      }

      /// en translation: Grant
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func grant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("grant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "grant"
        }

        return NSLocalizedString("grant", bundle: bundle, comment: "")
      }

      /// en translation: Grant read sms permission to auto fetch the OTP.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sms_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_permission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sms_permission"
        }

        return NSLocalizedString("sms_permission", bundle: bundle, comment: "")
      }

      /// en translation: Great
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pf_resp_page_great(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pf_resp_page_great", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pf_resp_page_great"
        }

        return NSLocalizedString("pf_resp_page_great", bundle: bundle, comment: "")
      }

      /// en translation: Grocery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func grocery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Grocery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Grocery"
        }

        return NSLocalizedString("Grocery", bundle: bundle, comment: "")
      }

      /// en translation: Guest
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Guest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Guest"
        }

        return NSLocalizedString("Guest", bundle: bundle, comment: "")
      }

      /// en translation: HalfWay Stop
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func halfWayStop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HalfWayStop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HalfWayStop"
        }

        return NSLocalizedString("HalfWayStop", bundle: bundle, comment: "")
      }

      /// en translation: Happy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderHappy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Happy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Happy"
        }

        return NSLocalizedString("Order.Happy", bundle: bundle, comment: "")
      }

      /// en translation: Have you Forgot Completing Your Last Shopping Cart?
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func haveYouForgotCompletingYourLastShoppingCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Have you Forgot Completing Your Last Shopping Cart?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Have you Forgot Completing Your Last Shopping Cart?"
        }

        return NSLocalizedString("Have you Forgot Completing Your Last Shopping Cart?", bundle: bundle, comment: "")
      }

      /// en translation: Heavy Machine
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceHeavyMachine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.HeavyMachine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.HeavyMachine"
        }

        return NSLocalizedString("Service.HeavyMachine", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuHelp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Help"
        }

        return NSLocalizedString("SideMenu.Help", bundle: bundle, comment: "")
      }

      /// en translation: Hey! What’s your name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func whats_your_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whats_your_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whats_your_name"
        }

        return NSLocalizedString("whats_your_name", bundle: bundle, comment: "")
      }

      /// en translation: Hey!What's your name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func userProfileVCNameText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserProfileVC.NameText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserProfileVC.NameText"
        }

        return NSLocalizedString("UserProfileVC.NameText", bundle: bundle, comment: "")
      }

      /// en translation: Hi 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func hi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hi ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hi "
        }

        return NSLocalizedString("Hi ", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Home"
        }

        return NSLocalizedString("SideMenu.Home", bundle: bundle, comment: "")
      }

      /// en translation: Home Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeservicE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HOME SERVICE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HOME SERVICE"
        }

        return NSLocalizedString("HOME SERVICE", bundle: bundle, comment: "")
      }

      /// en translation: House No.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func houseNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("House No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "House No"
        }

        return NSLocalizedString("House No", bundle: bundle, comment: "")
      }

      /// en translation: Household
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func household(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Household", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Household"
        }

        return NSLocalizedString("Household", bundle: bundle, comment: "")
      }

      /// en translation: I agree to the 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func i_agree_to_the(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i_agree_to_the", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "i_agree_to_the"
        }

        return NSLocalizedString("i_agree_to_the", bundle: bundle, comment: "")
      }

      /// en translation: I would like to recommend using
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iWouldLikeToRecommendUsing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I would like to recommend using", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I would like to recommend using"
        }

        return NSLocalizedString("I would like to recommend using", bundle: bundle, comment: "")
      }

      /// en translation: Important Numbers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionEmergencyContacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.EmergencyContacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.EmergencyContacts"
        }

        return NSLocalizedString("LeftMenuOption.EmergencyContacts", bundle: bundle, comment: "")
      }

      /// en translation: Important Numbers
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func emergency_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emergency_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emergency_contacts"
        }

        return NSLocalizedString("emergency_contacts", bundle: bundle, comment: "")
      }

      /// en translation: Init a secure connection...
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func init_conn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Init_conn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Init_conn"
        }

        return NSLocalizedString("Init_conn", bundle: bundle, comment: "")
      }

      /// en translation: Inprocess
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func inprocesS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("INPROCESS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "INPROCESS"
        }

        return NSLocalizedString("INPROCESS", bundle: bundle, comment: "")
      }

      /// en translation: Institution
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func institution(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institution", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institution"
        }

        return NSLocalizedString("institution", bundle: bundle, comment: "")
      }

      /// en translation: Institution Account
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func institution_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institution_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institution_account"
        }

        return NSLocalizedString("institution_account", bundle: bundle, comment: "")
      }

      /// en translation: Invalid CVV
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func invalidCVV(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InvalidCVV", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InvalidCVV"
        }

        return NSLocalizedString("InvalidCVV", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Expiry Date
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func invalidExp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InvalidExp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InvalidExp"
        }

        return NSLocalizedString("InvalidExp", bundle: bundle, comment: "")
      }

      /// en translation: Invalid card number
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func invaildCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InvaildCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InvaildCard"
        }

        return NSLocalizedString("InvaildCard", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invoice"
        }

        return NSLocalizedString("invoice", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderInvoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Invoice"
        }

        return NSLocalizedString("Order.Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Issue wth OrderID
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func issueWthOrderID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issue wth OrderID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issue wth OrderID"
        }

        return NSLocalizedString("Issue wth OrderID", bundle: bundle, comment: "")
      }

      /// en translation: It looks like your privacy settings are preventing us from accessing your camera.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func itLooksLikeYourPrivacySettingsArePreventingUsFromAccessingYourCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("It looks like your privacy settings are preventing us from accessing your camera.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "It looks like your privacy settings are preventing us from accessing your camera."
        }

        return NSLocalizedString("It looks like your privacy settings are preventing us from accessing your camera.", bundle: bundle, comment: "")
      }

      /// en translation: Italian
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func languageNameItalian(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Italian", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Italian"
        }

        return NSLocalizedString("LanguageName.Italian", bundle: bundle, comment: "")
      }

      /// en translation: Item Detail
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func itemDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Item Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Item Detail"
        }

        return NSLocalizedString("Item Detail", bundle: bundle, comment: "")
      }

      /// en translation: Japanese
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, sq
      static func languageNameJapanese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Japanese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Japanese"
        }

        return NSLocalizedString("LanguageName.Japanese", bundle: bundle, comment: "")
      }

      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func userProfileVCJustSomeMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserProfileVC.JustSomeMore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserProfileVC.JustSomeMore"
        }

        return NSLocalizedString("UserProfileVC.JustSomeMore", bundle: bundle, comment: "")
      }

      /// en translation: Ladies Beauty Salon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func ladiesBeautySalon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ladies Beauty Salon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ladies Beauty Salon"
        }

        return NSLocalizedString("Ladies Beauty Salon", bundle: bundle, comment: "")
      }

      /// en translation: Landmark
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func landmark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Landmark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Landmark"
        }

        return NSLocalizedString("Landmark", bundle: bundle, comment: "")
      }

      /// en translation: Laundry
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func laundry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Laundry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Laundry"
        }

        return NSLocalizedString("Laundry", bundle: bundle, comment: "")
      }

      /// en translation: Leave a comment
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatRatingCommentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.rating.comment.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.rating.comment.title"
        }

        return NSLocalizedString("ios.ZDCChat.rating.comment.title", bundle: bundle, comment: "")
      }

      /// en translation: Leave a comment
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatRatingCommentPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.rating.comment.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.rating.comment.placeholder"
        }

        return NSLocalizedString("ios.ZDCChat.rating.comment.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Leave a comment...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatRatingCommentButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.rating.commentButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.rating.commentButton"
        }

        return NSLocalizedString("ios.ZDCChat.rating.commentButton", bundle: bundle, comment: "")
      }

      /// en translation: Leave a message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatNoAgentsButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.noAgentsButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.noAgentsButton"
        }

        return NSLocalizedString("ios.ZDCChat.noAgentsButton", bundle: bundle, comment: "")
      }

      /// en translation: Like Buraq 24?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func referralText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Referral.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Referral.Text"
        }

        return NSLocalizedString("Referral.Text", bundle: bundle, comment: "")
      }

      /// en translation: Like Buraq24? Share with the friends.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func like_buraq24_n_nshare_with_the_friends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("like_buraq24_n_nshare_with_the_friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "like_buraq24_n_nshare_with_the_friends"
        }

        return NSLocalizedString("like_buraq24_n_nshare_with_the_friends", bundle: bundle, comment: "")
      }

      /// en translation: Live Tracking
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func liveTracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Live Tracking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Live Tracking"
        }

        return NSLocalizedString("Live Tracking", bundle: bundle, comment: "")
      }

      /// en translation: Live support
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func liveSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Live support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Live support"
        }

        return NSLocalizedString("Live support", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func navigationTitleLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NavigationTitle.Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NavigationTitle.Location"
        }

        return NSLocalizedString("NavigationTitle.Location", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location"
        }

        return NSLocalizedString("location", bundle: bundle, comment: "")
      }

      /// en translation: Location Unavailable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func locationUnavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location Unavailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location Unavailable"
        }

        return NSLocalizedString("Location Unavailable", bundle: bundle, comment: "")
      }

      /// en translation: Log out!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LogOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LogOut"
        }

        return NSLocalizedString("LogOut", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// en translation: Login to
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func loginTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loginTo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loginTo"
        }

        return NSLocalizedString("loginTo", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Looks like your order has been delivered. Would you like to rate your order?
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func looksLikeYourOrderHasBeenDeliveredWouldYouLikeToRateYourOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Looks like your order has been delivered Would you like to rate your order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Looks like your order has been delivered Would you like to rate your order"
        }

        return NSLocalizedString("Looks like your order has been delivered Would you like to rate your order", bundle: bundle, comment: "")
      }

      /// en translation: Loyality points
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func loyalityPoints(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loyality points", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loyality points"
        }

        return NSLocalizedString("Loyality points", bundle: bundle, comment: "")
      }

      /// en translation: Loyalty Points Type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func loyaltyPointsType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loyalty Points Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loyalty Points Type"
        }

        return NSLocalizedString("Loyalty Points Type", bundle: bundle, comment: "")
      }

      /// en translation: Main2Activity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func title_activity_main2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_activity_main2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_activity_main2"
        }

        return NSLocalizedString("title_activity_main2", bundle: bundle, comment: "")
      }

      /// en translation: Manage Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func manageAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Address"
        }

        return NSLocalizedString("Manage Address", bundle: bundle, comment: "")
      }

      /// en translation: Map
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func title_activity_maps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_activity_maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_activity_maps"
        }

        return NSLocalizedString("title_activity_maps", bundle: bundle, comment: "")
      }

      /// en translation: Medicines
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func medicines(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Medicines", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Medicines"
        }

        return NSLocalizedString("Medicines", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormMessagePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.messagePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.messagePlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.messagePlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatMessageButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.messageButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.messageButton"
        }

        return NSLocalizedString("ios.ZDCChat.messageButton", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatChatTextEntryPlaceholderText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatTextEntry.placeholderText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatTextEntry.placeholderText"
        }

        return NSLocalizedString("ios.ZDCChat.chatTextEntry.placeholderText", bundle: bundle, comment: "")
      }

      /// en translation: Min
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderTimeLeftMin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.TimeLeftMin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.TimeLeftMin"
        }

        return NSLocalizedString("Order.TimeLeftMin", bundle: bundle, comment: "")
      }

      /// en translation: Min. Delivery Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func minDeliveryTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min. Delivery Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min. Delivery Time"
        }

        return NSLocalizedString("Min. Delivery Time", bundle: bundle, comment: "")
      }

      /// en translation: Min. Delviery Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func minDelvieryTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min. Delviery Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min. Delviery Time"
        }

        return NSLocalizedString("Min. Delviery Time", bundle: bundle, comment: "")
      }

      /// en translation: Min. Order Amount
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func minOrderAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min. Order Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min. Order Amount"
        }

        return NSLocalizedString("Min. Order Amount", bundle: bundle, comment: "")
      }

      /// en translation: Min. Service Time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func minServiceTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min. Service Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min. Service Time"
        }

        return NSLocalizedString("Min. Service Time", bundle: bundle, comment: "")
      }

      /// en translation: Mins
      ///
      /// Locales: en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func orderTimeLeftMins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.TimeLeftMins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.TimeLeftMins"
        }

        return NSLocalizedString("Order.TimeLeftMins", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func mon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon"
        }

        return NSLocalizedString("Mon", bundle: bundle, comment: "")
      }

      /// en translation: Month & Year
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func monthyearLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monthyearLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "monthyearLbl"
        }

        return NSLocalizedString("monthyearLbl", bundle: bundle, comment: "")
      }

      /// en translation: Monthly
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func monthly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Monthly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Monthly"
        }

        return NSLocalizedString("Monthly", bundle: bundle, comment: "")
      }

      /// en translation: My Account
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func myAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Account"
        }

        return NSLocalizedString("My Account", bundle: bundle, comment: "")
      }

      /// en translation: My Addresses
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func myAddresses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Addresses", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Addresses"
        }

        return NSLocalizedString("My Addresses", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingMyBooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking.MyBooking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking.MyBooking"
        }

        return NSLocalizedString("Booking.MyBooking", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func myBookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Bookings"
        }

        return NSLocalizedString("My Bookings", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuMy_Bookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.My_Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.My_Bookings"
        }

        return NSLocalizedString("SideMenu.My_Bookings", bundle: bundle, comment: "")
      }

      /// en translation: My Orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func myOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Orders"
        }

        return NSLocalizedString("My Orders", bundle: bundle, comment: "")
      }

      /// en translation: My favorites
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func myFavorites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My favorites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My favorites"
        }

        return NSLocalizedString("My favorites", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func noBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noBtn"
        }

        return NSLocalizedString("noBtn", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormNamePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.namePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.namePlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.namePlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Navigation header
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func nav_header_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nav_header_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nav_header_desc"
        }

        return NSLocalizedString("nav_header_desc", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New"
        }

        return NSLocalizedString("New", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: New Password must not be same as old password
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func newPasswordMustNotBeSameAsOldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password must not be same as old password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password must not be same as old password"
        }

        return NSLocalizedString("New Password must not be same as old password", bundle: bundle, comment: "")
      }

      /// en translation: New Services - Coming soon
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuNew_Services_Coming_soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.New_Services_Coming_soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.New_Services_Coming_soon"
        }

        return NSLocalizedString("SideMenu.New_Services_Coming_soon", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Next"
        }

        return NSLocalizedString("Order.Next", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatNextButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.nextButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.nextButton"
        }

        return NSLocalizedString("ios.ZDCChat.nextButton", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.no"
        }

        return NSLocalizedString("ios.ZDCChat.no", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// en translation: No Bookings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_bookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_bookings"
        }

        return NSLocalizedString("no_bookings", bundle: bundle, comment: "")
      }

      /// en translation: No Internet connection. Please try again when connected
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatNoConnectionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.noConnectionMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.noConnectionMessage"
        }

        return NSLocalizedString("ios.ZDCChat.noConnectionMessage", bundle: bundle, comment: "")
      }

      /// en translation: No Product Found!
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func noProductFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Product Found!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Product Found!"
        }

        return NSLocalizedString("No Product Found!", bundle: bundle, comment: "")
      }

      /// en translation: No Remarks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func noRemarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Remarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Remarks"
        }

        return NSLocalizedString("No Remarks", bundle: bundle, comment: "")
      }

      /// en translation: No agents available
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatNoAgentsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.noAgentsTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.noAgentsTitle"
        }

        return NSLocalizedString("ios.ZDCChat.noAgentsTitle", bundle: bundle, comment: "")
      }

      /// en translation: No connection
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatNoConnectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.noConnectionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.noConnectionTitle"
        }

        return NSLocalizedString("ios.ZDCChat.noConnectionTitle", bundle: bundle, comment: "")
      }

      /// en translation: No connection
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatNetworkConnectionError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.network.connectionError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.network.connectionError"
        }

        return NSLocalizedString("ios.ZDCChat.network.connectionError", bundle: bundle, comment: "")
      }

      /// en translation: No connection, please check the internet connection
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func internetConnectionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internetConnectionMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internetConnectionMessage"
        }

        return NSLocalizedString("internetConnectionMessage", bundle: bundle, comment: "")
      }

      /// en translation: No contacts
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_contacts"
        }

        return NSLocalizedString("no_contacts", bundle: bundle, comment: "")
      }

      /// en translation: No file added!
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func noFileAdded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No file added!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No file added!"
        }

        return NSLocalizedString("No file added!", bundle: bundle, comment: "")
      }

      /// en translation: No offers available
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_offers_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_offers_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_offers_available"
        }

        return NSLocalizedString("no_offers_available", bundle: bundle, comment: "")
      }

      /// en translation: No route exists
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_route_exits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_route_exits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_route_exits"
        }

        return NSLocalizedString("no_route_exits", bundle: bundle, comment: "")
      }

      /// en translation: No services available
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_services(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_services"
        }

        return NSLocalizedString("no_services", bundle: bundle, comment: "")
      }

      /// en translation: No supplier found!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func noSupplierFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No supplier found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No supplier found"
        }

        return NSLocalizedString("No supplier found", bundle: bundle, comment: "")
      }

      /// en translation: Normal
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "normal"
        }

        return NSLocalizedString("normal", bundle: bundle, comment: "")
      }

      /// en translation: Not rated yet
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func notRatedYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not rated yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not rated yet"
        }

        return NSLocalizedString("Not rated yet", bundle: bundle, comment: "")
      }

      /// en translation: Notification Language Changed Successfully
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static func notificationLanguageChangedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification Language Changed Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification Language Changed Successfully"
        }

        return NSLocalizedString("Notification Language Changed Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuNotifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Notifications"
        }

        return NSLocalizedString("SideMenu.Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Notifications Language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func notificationsLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications Language"
        }

        return NSLocalizedString("Notifications Language", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buttonTitleOK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Title.OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button.Title.OK"
        }

        return NSLocalizedString("Button.Title.OK", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.ok"
        }

        return NSLocalizedString("ios.ZDCChat.ok", bundle: bundle, comment: "")
      }

      /// en translation: OTP Sent.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otpSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTP Sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTP Sent"
        }

        return NSLocalizedString("OTP Sent", bundle: bundle, comment: "")
      }

      /// en translation: OTP resent successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otp_resent_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp_resent_successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "otp_resent_successfully"
        }

        return NSLocalizedString("otp_resent_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offers"
        }

        return NSLocalizedString("Offers", bundle: bundle, comment: "")
      }

      /// en translation: Offers available near you
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buyTokenOffersNearYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BuyToken.OffersNearYou", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BuyToken.OffersNearYou"
        }

        return NSLocalizedString("BuyToken.OffersNearYou", bundle: bundle, comment: "")
      }

      /// en translation: Offers available near you
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func offers_available_near_you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offers_available_near_you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "offers_available_near_you"
        }

        return NSLocalizedString("offers_available_near_you", bundle: bundle, comment: "")
      }

      /// en translation: Offline
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offline"
        }

        return NSLocalizedString("Offline", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func okBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("okBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "okBtn"
        }

        return NSLocalizedString("okBtn", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func oldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Old Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Old Password"
        }

        return NSLocalizedString("Old Password", bundle: bundle, comment: "")
      }

      /// en translation: On The Way
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func nearbY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NEARBY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NEARBY"
        }

        return NSLocalizedString("NEARBY", bundle: bundle, comment: "")
      }

      /// en translation: On hold
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func onHold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("On hold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "On hold"
        }

        return NSLocalizedString("On hold", bundle: bundle, comment: "")
      }

      /// en translation: One order is waiting for your approval in upcoming bookings.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenOrderWaitingConfirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.orderWaitingConfirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.orderWaitingConfirmation"
        }

        return NSLocalizedString("eToken.orderWaitingConfirmation", bundle: bundle, comment: "")
      }

      /// en translation: One order is waiting for your approval in upcoming bookings.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenOrderTimeOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.orderTimeOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.orderTimeOut"
        }

        return NSLocalizedString("etoken.orderTimeOut", bundle: bundle, comment: "")
      }

      /// en translation: Ongoing
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusOngoing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.Ongoing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.Ongoing"
        }

        return NSLocalizedString("OrderStatus.Ongoing", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func online(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Online", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Online"
        }

        return NSLocalizedString("Online", bundle: bundle, comment: "")
      }

      /// en translation: Online payment not available yet.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenOnlinePayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.onlinePayment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.onlinePayment"
        }

        return NSLocalizedString("eToken.onlinePayment", bundle: bundle, comment: "")
      }

      /// en translation: Oops, you can only schedule booking 1 hour after now.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func schedule_time_selection_validation_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("schedule_time_selection_validation_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "schedule_time_selection_validation_msg"
        }

        return NSLocalizedString("schedule_time_selection_validation_msg", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open"
        }

        return NSLocalizedString("Open", bundle: bundle, comment: "")
      }

      /// en translation: Open navigation drawer
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func navigation_drawer_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("navigation_drawer_open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "navigation_drawer_open"
        }

        return NSLocalizedString("navigation_drawer_open", bundle: bundle, comment: "")
      }

      /// en translation: Opens at 
      ///
      /// Locales: en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func opensAt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Opens at ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Opens at "
        }

        return NSLocalizedString("Opens at ", bundle: bundle, comment: "")
      }

      /// en translation: Order Confirmed Successfully
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func orderConfirmedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Confirmed Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Confirmed Successfully"
        }

        return NSLocalizedString("Order Confirmed Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Details"
        }

        return NSLocalizedString("Order Details", bundle: bundle, comment: "")
      }

      /// en translation: Order Now
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Now"
        }

        return NSLocalizedString("Order Now", bundle: bundle, comment: "")
      }

      /// en translation: Order history
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order history"
        }

        return NSLocalizedString("Order history", bundle: bundle, comment: "")
      }

      /// en translation: Order placed successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order placed successfully"
        }

        return NSLocalizedString("Order placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Other"
        }

        return NSLocalizedString("Other", bundle: bundle, comment: "")
      }

      /// en translation: Other Services
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Support"
        }

        return NSLocalizedString("LeftMenuOption.Support", bundle: bundle, comment: "")
      }

      /// en translation: Other Services
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "support"
        }

        return NSLocalizedString("support", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func share_SHEET_EDIT_SECTION_TITLE_OTHER(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHARE_SHEET_EDIT_SECTION_TITLE_OTHER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHARE_SHEET_EDIT_SECTION_TITLE_OTHER"
        }

        return NSLocalizedString("SHARE_SHEET_EDIT_SECTION_TITLE_OTHER", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, sq
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Others"
        }

        return NSLocalizedString("Others", bundle: bundle, comment: "")
      }

      /// en translation: PROCEED
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func proceeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PROCEED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PROCEED"
        }

        return NSLocalizedString("PROCEED", bundle: bundle, comment: "")
      }

      /// en translation: Packages
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func packages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Packages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Packages"
        }

        return NSLocalizedString("Packages", bundle: bundle, comment: "")
      }

      /// en translation: Packages details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func packagesDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Packages details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Packages details"
        }

        return NSLocalizedString("Packages details", bundle: bundle, comment: "")
      }

      /// en translation: Party
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func party(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Party", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Party"
        }

        return NSLocalizedString("Party", bundle: bundle, comment: "")
      }

      /// en translation: Password Changed Successfully
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func passwordChangedSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PasswordChangedSuccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PasswordChangedSuccess"
        }

        return NSLocalizedString("PasswordChangedSuccess", bundle: bundle, comment: "")
      }

      /// en translation: Password recovery has been sent to your email id
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func passwordRecoveryHasBeenSentToYourEmailId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password recovery has been sent to your email id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password recovery has been sent to your email id"
        }

        return NSLocalizedString("Password recovery has been sent to your email id", bundle: bundle, comment: "")
      }

      /// en translation: Password should be minimum 6 characters.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func passwordShouldBeMinimum6Characters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password should be minimum 6 characters.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password should be minimum 6 characters."
        }

        return NSLocalizedString("Password should be minimum 6 characters.", bundle: bundle, comment: "")
      }

      /// en translation: Passwords do not match
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func passwordsDoNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Passwords do not match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Passwords do not match"
        }

        return NSLocalizedString("Passwords do not match", bundle: bundle, comment: "")
      }

      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingPast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking.Past", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking.Past"
        }

        return NSLocalizedString("Booking.Past", bundle: bundle, comment: "")
      }

      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingsPast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bookings.Past", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bookings.Past"
        }

        return NSLocalizedString("Bookings.Past", bundle: bundle, comment: "")
      }

      /// en translation: Past
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func past(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("past", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "past"
        }

        return NSLocalizedString("past", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func payBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PayBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PayBtn"
        }

        return NSLocalizedString("PayBtn", bundle: bundle, comment: "")
      }

      /// en translation: Pay 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pay"
        }

        return NSLocalizedString("Pay", bundle: bundle, comment: "")
      }

      /// en translation: Payment History
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuPayment_History(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Payment_History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Payment_History"
        }

        return NSLocalizedString("SideMenu.Payment_History", bundle: bundle, comment: "")
      }

      /// en translation: Payment Methods
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuPayment_Methods(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Payment_Methods", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Payment_Methods"
        }

        return NSLocalizedString("SideMenu.Payment_Methods", bundle: bundle, comment: "")
      }

      /// en translation: Payments
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionPayments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Payments"
        }

        return NSLocalizedString("LeftMenuOption.Payments", bundle: bundle, comment: "")
      }

      /// en translation: Payments
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payments"
        }

        return NSLocalizedString("payments", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pendinG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PENDING", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PENDING"
        }

        return NSLocalizedString("PENDING", bundle: bundle, comment: "")
      }

      /// en translation: Pending Orders
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pendingOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pending Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pending Orders"
        }

        return NSLocalizedString("Pending Orders", bundle: bundle, comment: "")
      }

      /// en translation: Permission required to select image
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func permission_required_to_select_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_required_to_select_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_required_to_select_image"
        }

        return NSLocalizedString("permission_required_to_select_image", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone"
        }

        return NSLocalizedString("phone", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatPreChatFormPhonePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.phonePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.phonePlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.phonePlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Photo Library
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func photoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photo Library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photo Library"
        }

        return NSLocalizedString("Photo Library", bundle: bundle, comment: "")
      }

      /// en translation: Photo library
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatUploadSourceGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.upload.source.gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.upload.source.gallery"
        }

        return NSLocalizedString("ios.ZDCChat.upload.source.gallery", bundle: bundle, comment: "")
      }

      /// en translation: Photography
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func photography(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photography", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photography"
        }

        return NSLocalizedString("Photography", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pickup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pickup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pickup"
        }

        return NSLocalizedString("Pickup", bundle: bundle, comment: "")
      }

      /// en translation: Pickup location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pickupLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pickup location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pickup location"
        }

        return NSLocalizedString("Pickup location", bundle: bundle, comment: "")
      }

      /// en translation: Pincode
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pincode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pincode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pincode"
        }

        return NSLocalizedString("Pincode", bundle: bundle, comment: "")
      }

      /// en translation: Place Booking
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func placeBooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Place Booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Place Booking"
        }

        return NSLocalizedString("Place Booking", bundle: bundle, comment: "")
      }

      /// en translation: Plaese enter username or email.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func username_email_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username_email_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "username_email_validation"
        }

        return NSLocalizedString("username_email_validation", bundle: bundle, comment: "")
      }

      /// en translation: Platinum
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func platinum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Platinum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Platinum"
        }

        return NSLocalizedString("Platinum", bundle: bundle, comment: "")
      }

      /// en translation: Please add image.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func institutional_cred_Image_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institutional_cred_Image_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institutional_cred_Image_validation"
        }

        return NSLocalizedString("institutional_cred_Image_validation", bundle: bundle, comment: "")
      }

      /// en translation: Please agree to our terms and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func terms_and_conditions_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms_and_conditions_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms_and_conditions_validation_message"
        }

        return NSLocalizedString("terms_and_conditions_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please check to see if you have enabled location services.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pleaseCheckToSeeIfYouHaveEnabledLocationServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check to see if you have enabled location services.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check to see if you have enabled location services."
        }

        return NSLocalizedString("Please check to see if you have enabled location services.", bundle: bundle, comment: "")
      }

      /// en translation: Please check your internet connection.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseCheckYourInternetConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check your internet connection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check your internet connection"
        }

        return NSLocalizedString("Please check your internet connection", bundle: bundle, comment: "")
      }

      /// en translation: Please enter Item to be picked up.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func materialType2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("materialType2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "materialType2"
        }

        return NSLocalizedString("materialType2", bundle: bundle, comment: "")
      }

      /// en translation: Please enter Item weight.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func approxWeight2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approxWeight2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "approxWeight2"
        }

        return NSLocalizedString("approxWeight2", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a landmark name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterALandmarkName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a landmark name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a landmark name"
        }

        return NSLocalizedString("Please enter a landmark name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid OTP.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otp_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "otp_validation_message"
        }

        return NSLocalizedString("otp_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid email address
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormInvalidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.invalidEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.invalidEmail"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.invalidEmail", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid email address
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterAValidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid email address"
        }

        return NSLocalizedString("Please enter a valid email address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid phone number
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func phone_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_validation_message"
        }

        return NSLocalizedString("phone_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid phone number
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatPreChatFormInvalidPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.invalidPhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.invalidPhone"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.invalidPhone", bundle: bundle, comment: "")
      }

      /// en translation: Please enter additional information.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func additionalInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("additionalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "additionalInformation"
        }

        return NSLocalizedString("additionalInformation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter address
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static func pleaseEnterAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter address"
        }

        return NSLocalizedString("Please enter address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter approx. weight.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func approxWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approxWeight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "approxWeight"
        }

        return NSLocalizedString("approxWeight", bundle: bundle, comment: "")
      }

      /// en translation: Please enter cancellation reason.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func cancellation_reason_validation_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancellation_reason_validation_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancellation_reason_validation_text"
        }

        return NSLocalizedString("cancellation_reason_validation_text", bundle: bundle, comment: "")
      }

      /// en translation: Please enter cancelling reason.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderCancellingReasonValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.CancellingReasonValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.CancellingReasonValidation"
        }

        return NSLocalizedString("Order.CancellingReasonValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter confirm password.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func confirm_password_empty_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_password_empty_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_password_empty_validation_message"
        }

        return NSLocalizedString("confirm_password_empty_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter drop at location
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func dropAtLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropAtLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dropAtLocation"
        }

        return NSLocalizedString("dropAtLocation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter first name
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static func pleaseEnterFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter first name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter first name"
        }

        return NSLocalizedString("Please enter first name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter full name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.UserName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.UserName"
        }

        return NSLocalizedString("Validation.UserName", bundle: bundle, comment: "")
      }

      /// en translation: Please enter institution id number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func institution_id_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institution_id_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institution_id_validation"
        }

        return NSLocalizedString("institution_id_validation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter institutional email.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func empty_institutional_email_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_institutional_email_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_institutional_email_validation"
        }

        return NSLocalizedString("empty_institutional_email_validation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter last name
      ///
      /// Locales: ar, en, es, fr, it, nl, zh-Hans, ja, si-LK, sq
      static func pleaseEnterLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter last name"
        }

        return NSLocalizedString("Please enter last name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter material Type.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func materialType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("materialType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "materialType"
        }

        return NSLocalizedString("materialType", bundle: bundle, comment: "")
      }

      /// en translation: Please enter message
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func please_enter_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_enter_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_enter_message"
        }

        return NSLocalizedString("please_enter_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter name of contact person at dropoff location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func receiverName2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiverName2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receiverName2"
        }

        return NSLocalizedString("receiverName2", bundle: bundle, comment: "")
      }

      /// en translation: Please enter name of contact person at pickup location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func senderName2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("senderName2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "senderName2"
        }

        return NSLocalizedString("senderName2", bundle: bundle, comment: "")
      }

      /// en translation: Please enter name to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func name_empty_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name_empty_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name_empty_validation_message"
        }

        return NSLocalizedString("name_empty_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter order details.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func aletEnterDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alet.enterDetails", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alet.enterDetails"
        }

        return NSLocalizedString("alet.enterDetails", bundle: bundle, comment: "")
      }

      /// en translation: Please enter order details.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderDetailValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.DetailValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.DetailValidation"
        }

        return NSLocalizedString("Order.DetailValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter otp.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationOTPValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.OTPValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.OTPValidation"
        }

        return NSLocalizedString("Validation.OTPValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter password.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func password_empty_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_empty_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_empty_validation_message"
        }

        return NSLocalizedString("password_empty_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter phone number of contact person at pickup location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func phoneNumber2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneNumber2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneNumber2"
        }

        return NSLocalizedString("phoneNumber2", bundle: bundle, comment: "")
      }

      /// en translation: Please enter phone number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationPhoneNumberMissed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.PhoneNumberMissed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.PhoneNumberMissed"
        }

        return NSLocalizedString("Validation.PhoneNumberMissed", bundle: bundle, comment: "")
      }

      /// en translation: Please enter phone number.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneNumber"
        }

        return NSLocalizedString("phoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Please enter pickup at location.
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pickupAtLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pickupAtLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pickupAtLocation"
        }

        return NSLocalizedString("pickupAtLocation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter promo code to continue.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func promoCode_empty_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PromoCode_empty_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PromoCode_empty_validation_message"
        }

        return NSLocalizedString("PromoCode_empty_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter receiver name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func receiverName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiverName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receiverName"
        }

        return NSLocalizedString("receiverName", bundle: bundle, comment: "")
      }

      /// en translation: Please enter sender name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func senderName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("senderName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "senderName"
        }

        return NSLocalizedString("senderName", bundle: bundle, comment: "")
      }

      /// en translation: Please enter valid Pincode
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterValidPincode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter valid Pincode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter valid Pincode"
        }

        return NSLocalizedString("Please enter valid Pincode", bundle: bundle, comment: "")
      }

      /// en translation: Please enter valid country code followed by phone number
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterValidCountryCodeFollowedByPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter valid country code followed by phone number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter valid country code followed by phone number"
        }

        return NSLocalizedString("Please enter valid country code followed by phone number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter valid phone number.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationPhoneNumberLength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.PhoneNumberLength", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.PhoneNumberLength"
        }

        return NSLocalizedString("Validation.PhoneNumberLength", bundle: bundle, comment: "")
      }

      /// en translation: Please enter verification code.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationVerificationValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.VerificationValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.VerificationValidation"
        }

        return NSLocalizedString("Validation.VerificationValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your building name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourBuildingName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your building name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your building name"
        }

        return NSLocalizedString("Please enter your building name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your city
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your city"
        }

        return NSLocalizedString("Please enter your city", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your counrty
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourCounrty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your counrty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your counrty"
        }

        return NSLocalizedString("Please enter your counrty", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your email address"
        }

        return NSLocalizedString("Please enter your email address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your house no.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourHouseNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your house no.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your house no."
        }

        return NSLocalizedString("Please enter your house no.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your name.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your name"
        }

        return NSLocalizedString("Please enter your name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your password
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseEnterYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your password"
        }

        return NSLocalizedString("Please enter your password", bundle: bundle, comment: "")
      }

      /// en translation: Please fill all details
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseFillAllDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please fill all details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please fill all details"
        }

        return NSLocalizedString("Please fill all details", bundle: bundle, comment: "")
      }

      /// en translation: Please maintain a minimum balance of
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func walletPlease_maintain_minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet.Please_maintain_minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet.Please_maintain_minimum"
        }

        return NSLocalizedString("Wallet.Please_maintain_minimum", bundle: bundle, comment: "")
      }

      /// en translation: Please select a booking schedule and time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectABookingScheduleAndTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select a booking schedule and time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select a booking schedule and time"
        }

        return NSLocalizedString("Please select a booking schedule and time", bundle: bundle, comment: "")
      }

      /// en translation: Please select a city
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectACity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select a city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select a city"
        }

        return NSLocalizedString("Please select a city", bundle: bundle, comment: "")
      }

      /// en translation: Please select a country
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectACountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select a country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select a country"
        }

        return NSLocalizedString("Please select a country", bundle: bundle, comment: "")
      }

      /// en translation: Please select a valid dropoff address.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func dropoff_address_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropoff_address_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dropoff_address_validation_message"
        }

        return NSLocalizedString("dropoff_address_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please select a valid pickup address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pickup_address_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pickup_address_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pickup_address_validation_message"
        }

        return NSLocalizedString("pickup_address_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: Please select address.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenSelectAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.selectAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.selectAddress"
        }

        return NSLocalizedString("eToken.selectAddress", bundle: bundle, comment: "")
      }

      /// en translation: Please select all fields above.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectAllFieldsAbove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select all fields above", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select all fields above"
        }

        return NSLocalizedString("Please select all fields above", bundle: bundle, comment: "")
      }

      /// en translation: Please select an Address
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectAnAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select an Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select an Address"
        }

        return NSLocalizedString("Please select an Address", bundle: bundle, comment: "")
      }

      /// en translation: Please select dates to schedule.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectDatesToSchedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select dates to schedule.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select dates to schedule."
        }

        return NSLocalizedString("Please select dates to schedule.", bundle: bundle, comment: "")
      }

      /// en translation: Please select dropoff level.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func dropLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dropLevel"
        }

        return NSLocalizedString("dropLevel", bundle: bundle, comment: "")
      }

      /// en translation: Please select institution name.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func institution_name_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institution_name_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institution_name_validation"
        }

        return NSLocalizedString("institution_name_validation", bundle: bundle, comment: "")
      }

      /// en translation: Please select institution type.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func institution_type_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("institution_type_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "institution_type_validation"
        }

        return NSLocalizedString("institution_type_validation", bundle: bundle, comment: "")
      }

      /// en translation: Please select pickup level.
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pickupLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pickupLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pickupLevel"
        }

        return NSLocalizedString("pickupLevel", bundle: bundle, comment: "")
      }

      /// en translation: Please select produts from same supplier
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectProdutsFromSameSupplier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select produts from same supplier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select produts from same supplier"
        }

        return NSLocalizedString("Select produts from same supplier", bundle: bundle, comment: "")
      }

      /// en translation: Please select rating to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func rating_validation_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rating_validation_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rating_validation_msg"
        }

        return NSLocalizedString("rating_validation_msg", bundle: bundle, comment: "")
      }

      /// en translation: Please select terms and conditions.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationTermsConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.TermsConditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.TermsConditions"
        }

        return NSLocalizedString("Validation.TermsConditions", bundle: bundle, comment: "")
      }

      /// en translation: Please select your location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectYourLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select your location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select your location"
        }

        return NSLocalizedString("Please select your location", bundle: bundle, comment: "")
      }

      /// en translation: Please select your option
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectOption(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select option"
        }

        return NSLocalizedString("Please select option", bundle: bundle, comment: "")
      }

      /// en translation: Please select your profile picture.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseSelectYourProfilePicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select your profile picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select your profile picture"
        }

        return NSLocalizedString("Please select your profile picture", bundle: bundle, comment: "")
      }

      /// en translation: Please wait for an agent. There are currently %@ visitor(s) waiting to be served.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatVisitorQueue(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ios.ZDCChat.visitorQueue", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.visitorQueue"
        }

        let format = NSLocalizedString("ios.ZDCChat.visitorQueue", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please wait. we'll contact you shortly.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func pleaseWaitWeLlContactYouShortly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please wait. we'll contact you shortly.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please wait. we'll contact you shortly."
        }

        return NSLocalizedString("Please wait. we'll contact you shortly.", bundle: bundle, comment: "")
      }

      /// en translation: Please write something first.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contactUSValidationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactUS.ValidationMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactUS.ValidationMessage"
        }

        return NSLocalizedString("ContactUS.ValidationMessage", bundle: bundle, comment: "")
      }

      /// en translation: Points
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func points(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Points", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Points"
        }

        return NSLocalizedString("Points", bundle: bundle, comment: "")
      }

      /// en translation: Popular Restaurants
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func popularRestaurants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Popular Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Popular Restaurants"
        }

        return NSLocalizedString("Popular Restaurants", bundle: bundle, comment: "")
      }

      /// en translation: Prefer not to say
      ///
      /// Locales: en, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func preferNotToSay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Prefer not to say", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Prefer not to say"
        }

        return NSLocalizedString("Prefer not to say", bundle: bundle, comment: "")
      }

      /// en translation: Press back again to exit.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func press_back_again_to_exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("press_back_again_to_exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "press_back_again_to_exit"
        }

        return NSLocalizedString("press_back_again_to_exit", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privacy"
        }

        return NSLocalizedString("privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func settingPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Privacy"
        }

        return NSLocalizedString("Setting.Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func landingVCProceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LandingVC.Proceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LandingVC.Proceed"
        }

        return NSLocalizedString("LandingVC.Proceed", bundle: bundle, comment: "")
      }

      /// en translation: Profile updated successfully!
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func profile_updated_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_updated_successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_updated_successfully"
        }

        return NSLocalizedString("profile_updated_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Promo
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func promo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("promo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "promo"
        }

        return NSLocalizedString("promo", bundle: bundle, comment: "")
      }

      /// en translation: Promo
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderPromo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Promo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Promo"
        }

        return NSLocalizedString("Order.Promo", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionPromotions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Promotions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Promotions"
        }

        return NSLocalizedString("LeftMenuOption.Promotions", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuPromotions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Promotions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Promotions"
        }

        return NSLocalizedString("SideMenu.Promotions", bundle: bundle, comment: "")
      }

      /// en translation: Purchased
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buyTokenPurchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BuyToken.Purchased", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BuyToken.Purchased"
        }

        return NSLocalizedString("BuyToken.Purchased", bundle: bundle, comment: "")
      }

      /// en translation: Purchased
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func purchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchased", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchased"
        }

        return NSLocalizedString("purchased", bundle: bundle, comment: "")
      }

      /// en translation: Push Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func push_notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push_notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "push_notifications"
        }

        return NSLocalizedString("push_notifications", bundle: bundle, comment: "")
      }

      /// en translation: Push Notifications
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func settingPush(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Push", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Push"
        }

        return NSLocalizedString("Setting.Push", bundle: bundle, comment: "")
      }

      /// en translation: Quantity : 
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func quantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Quantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Quantity"
        }

        return NSLocalizedString("Quantity", bundle: bundle, comment: "")
      }

      /// en translation: REFERRAL CODE
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func userProfileVCReferalCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserProfileVC.ReferalCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserProfileVC.ReferalCode"
        }

        return NSLocalizedString("UserProfileVC.ReferalCode", bundle: bundle, comment: "")
      }

      /// en translation: REORDER
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func reordeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REORDER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REORDER"
        }

        return NSLocalizedString("REORDER", bundle: bundle, comment: "")
      }

      /// en translation: Rate
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderRate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Rate"
        }

        return NSLocalizedString("Order.Rate", bundle: bundle, comment: "")
      }

      /// en translation: Rate
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rate"
        }

        return NSLocalizedString("rate", bundle: bundle, comment: "")
      }

      /// en translation: Rate Order
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func rateOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate Order"
        }

        return NSLocalizedString("Rate Order", bundle: bundle, comment: "")
      }

      /// en translation: Rate my order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func rateMyOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate my order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate my order"
        }

        return NSLocalizedString("Rate my order", bundle: bundle, comment: "")
      }

      /// en translation: Rate this chat
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatRatingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.rating.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.rating.title"
        }

        return NSLocalizedString("ios.ZDCChat.rating.title", bundle: bundle, comment: "")
      }

      /// en translation: Rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func nav_header_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nav_header_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nav_header_subtitle"
        }

        return NSLocalizedString("nav_header_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func rating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating"
        }

        return NSLocalizedString("Rating", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via email
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contactUsReachByEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactUs.ReachByEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactUs.ReachByEmail"
        }

        return NSLocalizedString("ContactUs.ReachByEmail", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via mail
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func reach_us_via_mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reach_us_via_mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reach_us_via_mail"
        }

        return NSLocalizedString("reach_us_via_mail", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contactUsReachByPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactUs.ReachByPhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactUs.ReachByPhone"
        }

        return NSLocalizedString("ContactUs.ReachByPhone", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via phone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func reach_us_via_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reach_us_via_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reach_us_via_phone"
        }

        return NSLocalizedString("reach_us_via_phone", bundle: bundle, comment: "")
      }

      /// en translation: Reached
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusReached(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.Reached", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.Reached"
        }

        return NSLocalizedString("OrderStatus.Reached", bundle: bundle, comment: "")
      }

      /// en translation: Recent Locations
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeRecent_Locations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Recent_Locations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Recent_Locations"
        }

        return NSLocalizedString("Home.Recent_Locations", bundle: bundle, comment: "")
      }

      /// en translation: Recommended
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func recommended(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recommended", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recommended"
        }

        return NSLocalizedString("Recommended", bundle: bundle, comment: "")
      }

      /// en translation: Reconnecting...
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatReconnecting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.reconnecting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.reconnecting"
        }

        return NSLocalizedString("ios.ZDCChat.reconnecting", bundle: bundle, comment: "")
      }

      /// en translation: Refer & Earn
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuRefer_Earn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Refer_Earn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Refer_Earn"
        }

        return NSLocalizedString("SideMenu.Refer_Earn", bundle: bundle, comment: "")
      }

      /// en translation: Referral
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionReferral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Referral", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Referral"
        }

        return NSLocalizedString("LeftMenuOption.Referral", bundle: bundle, comment: "")
      }

      /// en translation: Referral
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func referral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("referral", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "referral"
        }

        return NSLocalizedString("referral", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenRejected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.rejected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.rejected"
        }

        return NSLocalizedString("eToken.rejected", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenRejected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.Rejected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.Rejected"
        }

        return NSLocalizedString("etoken.Rejected", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusSerReject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.SerReject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.SerReject"
        }

        return NSLocalizedString("OrderStatus.SerReject", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func rejecteD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REJECTED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REJECTED"
        }

        return NSLocalizedString("REJECTED", bundle: bundle, comment: "")
      }

      /// en translation: Reordering will clear you cart. Press OK to continue.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func reOrderingWillClearYouCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ReOrdering will clear you cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ReOrdering will clear you cart"
        }

        return NSLocalizedString("ReOrdering will clear you cart", bundle: bundle, comment: "")
      }

      /// en translation: Required field,cannot be left empty
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pf_cancel_required_field(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pf_cancel_required_field", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pf_cancel_required_field"
        }

        return NSLocalizedString("pf_cancel_required_field", bundle: bundle, comment: "")
      }

      /// en translation: Resend OTP
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otpvcResendOTP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPVC.ResendOTP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTPVC.ResendOTP"
        }

        return NSLocalizedString("OTPVC.ResendOTP", bundle: bundle, comment: "")
      }

      /// en translation: Resend otp
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func resend_otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resend_otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend_otp"
        }

        return NSLocalizedString("resend_otp", bundle: bundle, comment: "")
      }

      /// en translation: Results for 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static func resultsFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Results for ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Results for "
        }

        return NSLocalizedString("Results for ", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "retry"
        }

        return NSLocalizedString("retry", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatRetry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.retry"
        }

        return NSLocalizedString("ios.ZDCChat.retry", bundle: bundle, comment: "")
      }

      /// en translation: Review
      ///
      /// Locales: ar, en, fr, it, de, zh-Hans, ja, si-LK, sq
      static func review(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Review"
        }

        return NSLocalizedString("Review", bundle: bundle, comment: "")
      }

      /// en translation: Ride Share
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func ride_Share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ride_Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ride_Share"
        }

        return NSLocalizedString("Ride_Share", bundle: bundle, comment: "")
      }

      /// en translation: Rs
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderOMR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.OMR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.OMR"
        }

        return NSLocalizedString("Order.OMR", bundle: bundle, comment: "")
      }

      /// en translation: SAVE THIS CARD
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func saveCarLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saveCarLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saveCarLbl"
        }

        return NSLocalizedString("saveCarLbl", bundle: bundle, comment: "")
      }

      /// en translation: Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Sad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Sad"
        }

        return NSLocalizedString("Order.Sad", bundle: bundle, comment: "")
      }

      /// en translation: Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sad"
        }

        return NSLocalizedString("sad", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat"
        }

        return NSLocalizedString("Sat", bundle: bundle, comment: "")
      }

      /// en translation: Satellite
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func satellite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("satellite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "satellite"
        }

        return NSLocalizedString("satellite", bundle: bundle, comment: "")
      }

      /// en translation: Save image
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatImageViewerSaveButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.imageViewer.saveButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.imageViewer.saveButton"
        }

        return NSLocalizedString("ios.ZDCChat.imageViewer.saveButton", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func buttonTitleSchedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Title.Schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button.Title.Schedule"
        }

        return NSLocalizedString("Button.Title.Schedule", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusScheduled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.Scheduled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.Scheduled"
        }

        return NSLocalizedString("OrderStatus.Scheduled", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderUIStatusScheduled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderUI.Status.Scheduled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderUI.Status.Scheduled"
        }

        return NSLocalizedString("OrderUI.Status.Scheduled", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func scheduleD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SCHEDULED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SCHEDULED"
        }

        return NSLocalizedString("SCHEDULED", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func scheduled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scheduled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scheduled"
        }

        return NSLocalizedString("Scheduled", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled Orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func scheduledOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scheduled Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scheduled Orders"
        }

        return NSLocalizedString("Scheduled Orders", bundle: bundle, comment: "")
      }

      /// en translation: School Rides
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuSchool_Rides(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.School_Rides", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.School_Rides"
        }

        return NSLocalizedString("SideMenu.School_Rides", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search for product
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func searchForProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search for product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search for product"
        }

        return NSLocalizedString("Search for product", bundle: bundle, comment: "")
      }

      /// en translation: Searching
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderStatusSearching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderStatus.Searching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderStatus.Searching"
        }

        return NSLocalizedString("OrderStatus.Searching", bundle: bundle, comment: "")
      }

      /// en translation: Seating capacity
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func seatingCapacity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Seating capacity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Seating capacity"
        }

        return NSLocalizedString("Seating capacity", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func dialog_select_your_choice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_select_your_choice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_select_your_choice"
        }

        return NSLocalizedString("dialog_select_your_choice", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func navigationButtonSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NavigationButton.Select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NavigationButton.Select"
        }

        return NSLocalizedString("NavigationButton.Select", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select"
        }

        return NSLocalizedString("select", bundle: bundle, comment: "")
      }

      /// en translation: Select Area
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Area"
        }

        return NSLocalizedString("Select Area", bundle: bundle, comment: "")
      }

      /// en translation: Select City
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select City", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select City"
        }

        return NSLocalizedString("Select City", bundle: bundle, comment: "")
      }

      /// en translation: Select Country
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Country"
        }

        return NSLocalizedString("Select Country", bundle: bundle, comment: "")
      }

      /// en translation: Select E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_e_token(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_e_token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_e_token"
        }

        return NSLocalizedString("select_e_token", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_location"
        }

        return NSLocalizedString("select_location", bundle: bundle, comment: "")
      }

      /// en translation: Select Time and Date
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectTimeAndDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Time and Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Time and Date"
        }

        return NSLocalizedString("Select Time and Date", bundle: bundle, comment: "")
      }

      /// en translation: Select Zone
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectZone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Zone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Zone"
        }

        return NSLocalizedString("Select Zone", bundle: bundle, comment: "")
      }

      /// en translation: Select an issue we can help you with
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func support_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("support_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "support_msg"
        }

        return NSLocalizedString("support_msg", bundle: bundle, comment: "")
      }

      /// en translation: Select booking time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectBookingTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select booking time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select booking time"
        }

        return NSLocalizedString("Select booking time", bundle: bundle, comment: "")
      }

      /// en translation: Select brand
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSelectBrand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.SelectBrand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.SelectBrand"
        }

        return NSLocalizedString("Order.SelectBrand", bundle: bundle, comment: "")
      }

      /// en translation: Select brand
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_branch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_branch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_branch"
        }

        return NSLocalizedString("select_branch", bundle: bundle, comment: "")
      }

      /// en translation: Select capacity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSelectCapacity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.SelectCapacity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.SelectCapacity"
        }

        return NSLocalizedString("Order.SelectCapacity", bundle: bundle, comment: "")
      }

      /// en translation: Select capacity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_capacity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_capacity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_capacity"
        }

        return NSLocalizedString("select_capacity", bundle: bundle, comment: "")
      }

      /// en translation: Select notification language
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectNotificationLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select notification language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select notification language"
        }

        return NSLocalizedString("Select notification language", bundle: bundle, comment: "")
      }

      /// en translation: Select pickup date and time
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectPickupDateAndTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select pickup date and time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select pickup date and time"
        }

        return NSLocalizedString("Select pickup date and time", bundle: bundle, comment: "")
      }

      /// en translation: Select picture
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectPicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select picture"
        }

        return NSLocalizedString("Select picture", bundle: bundle, comment: "")
      }

      /// en translation: Select quantity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSelectQuantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.SelectQuantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.SelectQuantity"
        }

        return NSLocalizedString("Order.SelectQuantity", bundle: bundle, comment: "")
      }

      /// en translation: Select quantity
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_quantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_quantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_quantity"
        }

        return NSLocalizedString("select_quantity", bundle: bundle, comment: "")
      }

      /// en translation: Select service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func selectService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select service"
        }

        return NSLocalizedString("Select service", bundle: bundle, comment: "")
      }

      /// en translation: Select sub model
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_sub_model(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_sub_model", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_sub_model"
        }

        return NSLocalizedString("select_sub_model", bundle: bundle, comment: "")
      }

      /// en translation: Select vehicle type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func select_vehicle_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_vehicle_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_vehicle_type"
        }

        return NSLocalizedString("select_vehicle_type", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatSendOfflineMessageErrorSendButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.sendButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.sendOfflineMessageError.sendButton"
        }

        return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.sendButton", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatTranscriptEmailAlertSendButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.sendButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.transcriptEmailAlert.sendButton"
        }

        return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.sendButton", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatChatTextEntrySendButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatTextEntry.sendButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatTextEntry.sendButton"
        }

        return NSLocalizedString("ios.ZDCChat.chatTextEntry.sendButton", bundle: bundle, comment: "")
      }

      /// en translation: Send mail to Buraq24
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func send_mail_to_buraq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send_mail_to_buraq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send_mail_to_buraq"
        }

        return NSLocalizedString("send_mail_to_buraq", bundle: bundle, comment: "")
      }

      /// en translation: Service
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func default_category_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default_category_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "default_category_name"
        }

        return NSLocalizedString("default_category_name", bundle: bundle, comment: "")
      }

      /// en translation: Service Charge
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceCharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service Charge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service Charge"
        }

        return NSLocalizedString("Service Charge", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func action_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_settings"
        }

        return NSLocalizedString("action_settings", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Settings"
        }

        return NSLocalizedString("SideMenu.Settings", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Settings"
        }

        return NSLocalizedString("LeftMenuOption.Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share"
        }

        return NSLocalizedString("share", bundle: bundle, comment: "")
      }

      /// en translation: Share Parcel Location
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func share_Parcel_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share_Parcel_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share_Parcel_Location"
        }

        return NSLocalizedString("Share_Parcel_Location", bundle: bundle, comment: "")
      }

      /// en translation: Share app
      ///
      /// Locales: en, nl, si-LK
      static func shareApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share app"
        }

        return NSLocalizedString("Share app", bundle: bundle, comment: "")
      }

      /// en translation: Share with friends
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuGet_Discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Get_Discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Get_Discount"
        }

        return NSLocalizedString("SideMenu.Get_Discount", bundle: bundle, comment: "")
      }

      /// en translation: Share with the friends
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func referralShareWithFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Referral.ShareWithFriends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Referral.ShareWithFriends"
        }

        return NSLocalizedString("Referral.ShareWithFriends", bundle: bundle, comment: "")
      }

      /// en translation: Shipped
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func shipped(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shipped", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shipped"
        }

        return NSLocalizedString("Shipped", bundle: bundle, comment: "")
      }

      /// en translation: Shipped
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func shippeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHIPPED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHIPPED"
        }

        return NSLocalizedString("SHIPPED", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Status
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func shippingStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shipping Status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shipping Status"
        }

        return NSLocalizedString("Shipping Status", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Apple
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sign_IN_WITH_APPLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SIGN_IN_WITH_APPLE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SIGN_IN_WITH_APPLE"
        }

        return NSLocalizedString("SIGN_IN_WITH_APPLE", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func leftMenuOptionSignout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LeftMenuOption.Signout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LeftMenuOption.Signout"
        }

        return NSLocalizedString("LeftMenuOption.Signout", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuSign_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Sign_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Sign_out"
        }

        return NSLocalizedString("SideMenu.Sign_out", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sign_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_out"
        }

        return NSLocalizedString("sign_out", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK
      static func signup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup"
        }

        return NSLocalizedString("signup", bundle: bundle, comment: "")
      }

      /// en translation: Sign up for
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func signup_for(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup_for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup_for"
        }

        return NSLocalizedString("signup_for", bundle: bundle, comment: "")
      }

      /// en translation: Sign up for
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func signupfor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Signupfor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Signupfor"
        }

        return NSLocalizedString("Signupfor", bundle: bundle, comment: "")
      }

      /// en translation: Silver
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func silver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Silver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Silver"
        }

        return NSLocalizedString("Silver", bundle: bundle, comment: "")
      }

      /// en translation: Some charges may be apply when you cancel the ride. Are you sure you want to continue?
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func cancel_ride_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_ride_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_ride_confirmation"
        }

        return NSLocalizedString("cancel_ride_confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Somewhere, Somehow, Something Went Wrong
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func somewhereSomehowSomethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Somewhere Somehow Something Went Wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Somewhere Somehow Something Went Wrong"
        }

        return NSLocalizedString("Somewhere Somehow Something Went Wrong", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, not enough points to redeem.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sorryNotEnoughPointsToRedeem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry not enough points to redeem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry not enough points to redeem"
        }

        return NSLocalizedString("Sorry not enough points to redeem", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, something went wrong please try again!
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func general_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_error"
        }

        return NSLocalizedString("general_error", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, there are no agents available to chat. Please try again later or leave us a message.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatNoAgentsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.noAgentsMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.noAgentsMessage"
        }

        return NSLocalizedString("ios.ZDCChat.noAgentsMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, we can't connect you right now. Please try again later.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatCantConnectMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.cantConnectMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.cantConnectMessage"
        }

        return NSLocalizedString("ios.ZDCChat.cantConnectMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, you can only schedule booking 1 hour after now.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSchedulingAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Scheduling.Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Scheduling.Alert"
        }

        return NSLocalizedString("Order.Scheduling.Alert", bundle: bundle, comment: "")
      }

      /// en translation: Sorry… Your Order is Below Minimum Order Price.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sorryYourOrderIsBelowMinimumOrderPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry… Your Order is Below Minimum Order Price.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry… Your Order is Below Minimum Order Price."
        }

        return NSLocalizedString("Sorry… Your Order is Below Minimum Order Price.", bundle: bundle, comment: "")
      }

      /// en translation: Sort
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort"
        }

        return NSLocalizedString("Sort", bundle: bundle, comment: "")
      }

      /// en translation: Spanish
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameSpanish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Spanish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Spanish"
        }

        return NSLocalizedString("LanguageName.Spanish", bundle: bundle, comment: "")
      }

      /// en translation: Started at
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func started_at(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("started_at", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "started_at"
        }

        return NSLocalizedString("started_at", bundle: bundle, comment: "")
      }

      /// en translation: Starting chat...
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatChatStartingChatMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chat.startingChatMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chat.startingChatMessage"
        }

        return NSLocalizedString("ios.ZDCChat.chat.startingChatMessage", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Status"
        }

        return NSLocalizedString("Status", bundle: bundle, comment: "")
      }

      /// en translation: Sub Total
      ///
      /// Locales: en, fr, it, de, zh-Hans, ja, si-LK, sq
      static func subTotal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sub Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sub Total"
        }

        return NSLocalizedString("Sub Total", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func userProfileVCSubmit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserProfileVC.Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserProfileVC.Submit"
        }

        return NSLocalizedString("UserProfileVC.Submit", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "submit"
        }

        return NSLocalizedString("submit", bundle: bundle, comment: "")
      }

      /// en translation: Submit rating
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderSubmitRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.SubmitRating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.SubmitRating"
        }

        return NSLocalizedString("Order.SubmitRating", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Success"
        }

        return NSLocalizedString("Success", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.Success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.Success"
        }

        return NSLocalizedString("Validation.Success", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun"
        }

        return NSLocalizedString("Sun", bundle: bundle, comment: "")
      }

      /// en translation: Supplier
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func supplier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Supplier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Supplier"
        }

        return NSLocalizedString("Supplier", bundle: bundle, comment: "")
      }

      /// en translation: Supplier Rated Successfully
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func supplierRatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Supplier Rated Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Supplier Rated Successfully"
        }

        return NSLocalizedString("Supplier Rated Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Supplier Type
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func supplierType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Supplier Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Supplier Type"
        }

        return NSLocalizedString("Supplier Type", bundle: bundle, comment: "")
      }

      /// en translation: Suppliers
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK, sq
      static func suppliers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suppliers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suppliers"
        }

        return NSLocalizedString("Suppliers", bundle: bundle, comment: "")
      }

      /// en translation: Switch Rider
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func homeSwitch_Rider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.Switch_Rider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.Switch_Rider"
        }

        return NSLocalizedString("Home.Switch_Rider", bundle: bundle, comment: "")
      }

      /// en translation: TRACK
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func tracK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TRACK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TRACK"
        }

        return NSLocalizedString("TRACK", bundle: bundle, comment: "")
      }

      /// en translation: Take photo
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatUploadSourceCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.upload.source.camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.upload.source.camera"
        }

        return NSLocalizedString("ios.ZDCChat.upload.source.camera", bundle: bundle, comment: "")
      }

      /// en translation: Tax
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderTax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Tax", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Tax"
        }

        return NSLocalizedString("Order.Tax", bundle: bundle, comment: "")
      }

      /// en translation: Tax
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func tax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tax", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tax"
        }

        return NSLocalizedString("tax", bundle: bundle, comment: "")
      }

      /// en translation: Termes and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func settingTerm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Term", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Term"
        }

        return NSLocalizedString("Setting.Term", bundle: bundle, comment: "")
      }

      /// en translation: Terms & Conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func termsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and Conditions"
        }

        return NSLocalizedString("Terms and Conditions", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func terms_and_conditions_caps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms_and_conditions_caps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms_and_conditions_caps"
        }

        return NSLocalizedString("terms_and_conditions_caps", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func landingVCTermsConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LandingVC.Terms&Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LandingVC.Terms&Conditions"
        }

        return NSLocalizedString("LandingVC.Terms&Conditions", bundle: bundle, comment: "")
      }

      /// en translation: Terms and conditions
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms_and_conditions"
        }

        return NSLocalizedString("terms_and_conditions", bundle: bundle, comment: "")
      }

      /// en translation: Terms and conditions.
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func termsAndConditionsSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and conditionsSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and conditionsSignUp"
        }

        return NSLocalizedString("Terms and conditionsSignUp", bundle: bundle, comment: "")
      }

      /// en translation: The entered credit card type does not match the selected payment option.
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func pf_errors_card_number_mismatch_po(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pf_errors_card_number_mismatch_po", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pf_errors_card_number_mismatch_po"
        }

        return NSLocalizedString("pf_errors_card_number_mismatch_po", bundle: bundle, comment: "")
      }

      /// en translation: The first Food Delivery application in Venezuela! They have everything: https://itunes.apple.com/us/app/%@/id?ls=1&mt=8
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func theLeadingOnlineHomeServicesInUAE(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("The Leading Online Home Services In UAE", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The Leading Online Home Services In UAE"
        }

        let format = NSLocalizedString("The Leading Online Home Services In UAE", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: There are currently no agents online. Would you like to send a message?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatAccountOfflineMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.accountOffline.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.accountOffline.message"
        }

        return NSLocalizedString("ios.ZDCChat.accountOffline.message", bundle: bundle, comment: "")
      }

      /// en translation: There are no agents currently online.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatAgentsOfflineMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.agentsOffline.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.agentsOffline.message"
        }

        return NSLocalizedString("ios.ZDCChat.agentsOffline.message", bundle: bundle, comment: "")
      }

      /// en translation: There are no email clients installed.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func no_email_app_installed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_email_app_installed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_email_app_installed"
        }

        return NSLocalizedString("no_email_app_installed", bundle: bundle, comment: "")
      }

      /// en translation: There is no currently ongoing ride
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func noOngoigRide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoOngoigRide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoOngoigRide"
        }

        return NSLocalizedString("NoOngoigRide", bundle: bundle, comment: "")
      }

      /// en translation: Thought you might like this app to make life more simpler:  https://itunes.apple.com/us/app/%@/id?ls=1&mt=8
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func shareAppYummy(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ShareAppYummy", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShareAppYummy"
        }

        let format = NSLocalizedString("ShareAppYummy", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Thu
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func thu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu"
        }

        return NSLocalizedString("Thu", bundle: bundle, comment: "")
      }

      /// en translation: Timeout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenTimeOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.timeOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.timeOut"
        }

        return NSLocalizedString("eToken.timeOut", bundle: bundle, comment: "")
      }

      /// en translation: Timeout
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenTimeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.Timeout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.Timeout"
        }

        return NSLocalizedString("etoken.Timeout", bundle: bundle, comment: "")
      }

      /// en translation: To be Make Sure, if you are add a stop in current ride then you wouldn't be able to delete them. Are you sure you want to continue?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func ongoing_AddStop_Confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ongoing_AddStop_Confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ongoing_AddStop_Confirmation"
        }

        return NSLocalizedString("Ongoing_AddStop_Confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Token purchased successfully.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenTokenPurchasedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.tokenPurchasedSuccessfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.tokenPurchasedSuccessfully"
        }

        return NSLocalizedString("eToken.tokenPurchasedSuccessfully", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderTotal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Total"
        }

        return NSLocalizedString("Order.Total", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total"
        }

        return NSLocalizedString("total", bundle: bundle, comment: "")
      }

      /// en translation: Track my order
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func trackMyOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Track my order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Track my order"
        }

        return NSLocalizedString("Track my order", bundle: bundle, comment: "")
      }

      /// en translation: Tracked
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func trackeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TRACKED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TRACKED"
        }

        return NSLocalizedString("TRACKED", bundle: bundle, comment: "")
      }

      /// en translation: Tracking not available yet. Please wait.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenTrackingNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.trackingNotAvailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.trackingNotAvailable"
        }

        return NSLocalizedString("eToken.trackingNotAvailable", bundle: bundle, comment: "")
      }

      /// en translation: Travel Packages
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuTravel_Packages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Travel_Packages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Travel_Packages"
        }

        return NSLocalizedString("SideMenu.Travel_Packages", bundle: bundle, comment: "")
      }

      /// en translation: Travel packages
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func travelPackages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Travel packages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Travel packages"
        }

        return NSLocalizedString("Travel packages", bundle: bundle, comment: "")
      }

      /// en translation: Trucks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func freight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("freight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "freight"
        }

        return NSLocalizedString("freight", bundle: bundle, comment: "")
      }

      /// en translation: Trucks
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceFreight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.Freight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.Freight"
        }

        return NSLocalizedString("Service.Freight", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func tue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue"
        }

        return NSLocalizedString("Tue", bundle: bundle, comment: "")
      }

      /// en translation: Type your reason for cancellation
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func type_reason_for_cancellation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type_reason_for_cancellation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type_reason_for_cancellation"
        }

        return NSLocalizedString("type_reason_for_cancellation", bundle: bundle, comment: "")
      }

      /// en translation: Typing
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func typing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Typing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Typing"
        }

        return NSLocalizedString("Typing", bundle: bundle, comment: "")
      }

      /// en translation: USD 
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func usD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "USD"
        }

        return NSLocalizedString("USD", bundle: bundle, comment: "")
      }

      /// en translation: Unable to send message.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatOfflineMessageFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.offlineMessageFailed.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.offlineMessageFailed.message"
        }

        return NSLocalizedString("ios.ZDCChat.offlineMessageFailed.message", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingUpcoming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking.Upcoming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking.Upcoming"
        }

        return NSLocalizedString("Booking.Upcoming", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func bookingsUpcoming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bookings.Upcoming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bookings.Upcoming"
        }

        return NSLocalizedString("Bookings.Upcoming", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func uncoming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uncoming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uncoming"
        }

        return NSLocalizedString("uncoming", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming orders
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func upcomingOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upcoming orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upcoming orders"
        }

        return NSLocalizedString("Upcoming orders", bundle: bundle, comment: "")
      }

      /// en translation: Upload images
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func upload_images(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload_images", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upload_images"
        }

        return NSLocalizedString("upload_images", bundle: bundle, comment: "")
      }

      /// en translation: Use current location
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func useCurrentLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use current location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use current location"
        }

        return NSLocalizedString("Use current location", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func nav_header_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nav_header_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nav_header_title"
        }

        return NSLocalizedString("nav_header_title", bundle: bundle, comment: "")
      }

      /// en translation: Valid for
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Valid for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Valid for"
        }

        return NSLocalizedString("Valid for", bundle: bundle, comment: "")
      }

      /// en translation: Validation success
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validations_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validations_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validations_success"
        }

        return NSLocalizedString("validations_success", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: ar, en, es, fr, it, nl, de, ja, si-LK, sq
      static func otpvcVerificationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPVC.VerificationCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTPVC.VerificationCode"
        }

        return NSLocalizedString("OTPVC.VerificationCode", bundle: bundle, comment: "")
      }

      /// en translation: Version : 
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "version"
        }

        return NSLocalizedString("version", bundle: bundle, comment: "")
      }

      /// en translation: Very Good
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func very_good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("very_good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "very_good"
        }

        return NSLocalizedString("very_good", bundle: bundle, comment: "")
      }

      /// en translation: Very Sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func very_sad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("very_sad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "very_sad"
        }

        return NSLocalizedString("very_sad", bundle: bundle, comment: "")
      }

      /// en translation: Very sad
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderVerySad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.VerySad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.VerySad"
        }

        return NSLocalizedString("Order.VerySad", bundle: bundle, comment: "")
      }

      /// en translation: View E-Tokens
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func view_e_tokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_e_tokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_e_tokens"
        }

        return NSLocalizedString("view_e_tokens", bundle: bundle, comment: "")
      }

      /// en translation: View Package
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func viewPackage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Package", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Package"
        }

        return NSLocalizedString("View Package", bundle: bundle, comment: "")
      }

      /// en translation: Visiting Charges
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func visitingCharges(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Visiting Charges", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Visiting Charges"
        }

        return NSLocalizedString("Visiting Charges", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func sideMenuWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SideMenu.Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SideMenu.Wallet"
        }

        return NSLocalizedString("SideMenu.Wallet", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning"
        }

        return NSLocalizedString("Warning", bundle: bundle, comment: "")
      }

      /// en translation: Water Tanker
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceWaterTanker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service.WaterTanker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service.WaterTanker"
        }

        return NSLocalizedString("Service.WaterTanker", bundle: bundle, comment: "")
      }

      /// en translation: Water Tanker
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func water_tanker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_tanker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water_tanker"
        }

        return NSLocalizedString("water_tanker", bundle: bundle, comment: "")
      }

      /// en translation: Water delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func waterDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Water delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Water delivery"
        }

        return NSLocalizedString("Water delivery", bundle: bundle, comment: "")
      }

      /// en translation: We are processing your request
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func we_are_requesting_your_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("we_are_requesting_your_request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "we_are_requesting_your_request"
        }

        return NSLocalizedString("we_are_requesting_your_request", bundle: bundle, comment: "")
      }

      /// en translation: We are processing your request
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderProcessingRequestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.ProcessingRequestTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.ProcessingRequestTitle"
        }

        return NSLocalizedString("Order.ProcessingRequestTitle", bundle: bundle, comment: "")
      }

      /// en translation: We got your message. We will reach you soon.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func we_will_reach_soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("we_will_reach_soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "we_will_reach_soon"
        }

        return NSLocalizedString("we_will_reach_soon", bundle: bundle, comment: "")
      }

      /// en translation: We have been unable to reconnect. Do you wish to continue trying?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatChatConnectionLostMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.chatConnectionLost.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.chatConnectionLost.message"
        }

        return NSLocalizedString("ios.ZDCChat.chatConnectionLost.message", bundle: bundle, comment: "")
      }

      /// en translation: We sent you a code to
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func otp_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "otp_text"
        }

        return NSLocalizedString("otp_text", bundle: bundle, comment: "")
      }

      /// en translation: We're transfering your booking to another driver.
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func transferRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transferRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transferRequest"
        }

        return NSLocalizedString("transferRequest", bundle: bundle, comment: "")
      }

      /// en translation: We've not heard from you for a while so this chat session has been closed. Please start a new chat if you still have questions.
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatTimeoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.timeoutMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.timeoutMessage"
        }

        return NSLocalizedString("ios.ZDCChat.timeoutMessage", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func wed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed"
        }

        return NSLocalizedString("Wed", bundle: bundle, comment: "")
      }

      /// en translation: Weekly
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func weekly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly"
        }

        return NSLocalizedString("Weekly", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome"
        }

        return NSLocalizedString("Welcome", bundle: bundle, comment: "")
      }

      /// en translation: What can we help you with?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatPreChatFormDepartmentPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.preChatForm.departmentPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.preChatForm.departmentPlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.preChatForm.departmentPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: When do you want the service?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func whenDoYouWantTheService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("When do you want the service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "When do you want the service"
        }

        return NSLocalizedString("When do you want the service", bundle: bundle, comment: "")
      }

      /// en translation: Where you want to deliver
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func serviceViewWhere_you_want_to_deliver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ServiceView.Where_you_want_to_deliver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ServiceView.Where_you_want_to_deliver"
        }

        return NSLocalizedString("ServiceView.Where_you_want_to_deliver", bundle: bundle, comment: "")
      }

      /// en translation: Work
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func work(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Work", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Work"
        }

        return NSLocalizedString("Work", bundle: bundle, comment: "")
      }

      /// en translation: Would you like to retry?
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK, sq
      static func iosZDCChatSendOfflineMessageErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.sendOfflineMessageError.message"
        }

        return NSLocalizedString("ios.ZDCChat.sendOfflineMessageError.message", bundle: bundle, comment: "")
      }

      /// en translation: Write a cancelling reason.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderPlaceHolderCancelReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.PlaceHolderCancelReason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.PlaceHolderCancelReason"
        }

        return NSLocalizedString("Order.PlaceHolderCancelReason", bundle: bundle, comment: "")
      }

      /// en translation: Write a message here directly to reach us..
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contactUsPlaceHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ContactUs.PlaceHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ContactUs.PlaceHolder"
        }

        return NSLocalizedString("ContactUs.PlaceHolder", bundle: bundle, comment: "")
      }

      /// en translation: Write a message here directly to reach us…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func contact_us_msg_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_us_msg_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact_us_msg_hint"
        }

        return NSLocalizedString("contact_us_msg_hint", bundle: bundle, comment: "")
      }

      /// en translation: Write a message here…
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func write_your_msg_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_your_msg_here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_your_msg_here"
        }

        return NSLocalizedString("write_your_msg_here", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func yesBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yesBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yesBtn"
        }

        return NSLocalizedString("yesBtn", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: ar, en, es, fr, it, zh-Hans, ja, si-LK
      static func iosZDCChatYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.yes"
        }

        return NSLocalizedString("ios.ZDCChat.yes", bundle: bundle, comment: "")
      }

      /// en translation: You are successfully logged out
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func youAreSuccessfullyLoggedOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You are successfully logged out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You are successfully logged out"
        }

        return NSLocalizedString("You are successfully logged out", bundle: bundle, comment: "")
      }

      /// en translation: You can add maximum 2 images
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func max_images_validation_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("max_images_validation_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "max_images_validation_msg"
        }

        return NSLocalizedString("max_images_validation_msg", bundle: bundle, comment: "")
      }

      /// en translation: You can add only 
      ///
      /// Locales: ar, en, es, fr, de, zh-Hans, ja, si-LK
      static func youCanAddOnly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can add only ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can add only "
        }

        return NSLocalizedString("You can add only ", bundle: bundle, comment: "")
      }

      /// en translation: You can't use credit points for cash payment
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func canT_use_credit_point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can't_use_credit_point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can't_use_credit_point"
        }

        return NSLocalizedString("can't_use_credit_point", bundle: bundle, comment: "")
      }

      /// en translation: You cannot select E-Tokens as a default payment method.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func default_selecting_token_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default_selecting_token_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "default_selecting_token_error"
        }

        return NSLocalizedString("default_selecting_token_error", bundle: bundle, comment: "")
      }

      /// en translation: You have cancelled your order successfully
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func youHaveCancelledYourOrderSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have cancelled your order successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have cancelled your order successfully"
        }

        return NSLocalizedString("You have cancelled your order successfully", bundle: bundle, comment: "")
      }

      /// en translation: You haven't earned any loyalty points yet.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func youHavenTEarnedAnyLoyaltyPointsYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You haven't earned any loyalty points yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You haven't earned any loyalty points yet"
        }

        return NSLocalizedString("You haven't earned any loyalty points yet", bundle: bundle, comment: "")
      }

      /// en translation: You must have to update latest verison of the app.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func alertVersionUpdateText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.VersionUpdateText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.VersionUpdateText"
        }

        return NSLocalizedString("Alert.VersionUpdateText", bundle: bundle, comment: "")
      }

      /// en translation: You need to enable internet connection.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func validationInternetNotWorking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation.InternetNotWorking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation.InternetNotWorking"
        }

        return NSLocalizedString("Validation.InternetNotWorking", bundle: bundle, comment: "")
      }

      /// en translation: You session has been expired. Please login again
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func session_expired_please_login_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("session_expired_please_login_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "session_expired_please_login_again"
        }

        return NSLocalizedString("session_expired_please_login_again", bundle: bundle, comment: "")
      }

      /// en translation: Your Cart has no items.Please add items to cart to Proceed.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func yourCartHasNoItemsPleaseAddItemsToCartToProceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Cart has no items.Please add items to cart to Proceed.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Cart has no items.Please add items to cart to Proceed."
        }

        return NSLocalizedString("Your Cart has no items.Please add items to cart to Proceed.", bundle: bundle, comment: "")
      }

      /// en translation: Your Order will be confirmed during next supplier working hours/day.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func yourOrderWillBeConfirmedDuringNextSupplierWorkingHoursDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Order will be confirmed during next supplier working hours/day.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Order will be confirmed during next supplier working hours/day."
        }

        return NSLocalizedString("Your Order will be confirmed during next supplier working hours/day.", bundle: bundle, comment: "")
      }

      /// en translation: Your Receipt
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func yourReceiptLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YourReceiptLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YourReceiptLbl"
        }

        return NSLocalizedString("YourReceiptLbl", bundle: bundle, comment: "")
      }

      /// en translation: Your booking is not completed because the service update is under process. Please contact our customer support for assistance.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func work_in_progress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("work_in_progress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "work_in_progress"
        }

        return NSLocalizedString("work_in_progress", bundle: bundle, comment: "")
      }

      /// en translation: Your driver is picking to you long distance root. You may pay extra charged for this. Are you sure you want to continue?
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func long_distance_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("long_distance_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "long_distance_confirmation"
        }

        return NSLocalizedString("long_distance_confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Your journey distance is more than Package distance. You may charge extra for this. Would you like to procced?
      ///
      /// Locales: en, es, fr, it, nl, de, ja, si-LK, sq
      static func package_distance_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_distance_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_distance_confirmation"
        }

        return NSLocalizedString("package_distance_confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Your ongoing request has been cancelled by the driver.
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func ongoing_request_cancelled_by_driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ongoing_request_cancelled_by_driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ongoing_request_cancelled_by_driver"
        }

        return NSLocalizedString("ongoing_request_cancelled_by_driver", bundle: bundle, comment: "")
      }

      /// en translation: Your order has been cancelled
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func order_cancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_cancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_cancelled"
        }

        return NSLocalizedString("order_cancelled", bundle: bundle, comment: "")
      }

      /// en translation: Your order has been confirmed for delivery.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func eTokenOrderConfirmed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eToken.orderConfirmed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eToken.orderConfirmed"
        }

        return NSLocalizedString("eToken.orderConfirmed", bundle: bundle, comment: "")
      }

      /// en translation: Your order has been out for delivery.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func etokenOrderOutForDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etoken.orderOutForDelivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "etoken.orderOutForDelivery"
        }

        return NSLocalizedString("etoken.orderOutForDelivery", bundle: bundle, comment: "")
      }

      /// en translation: Your order has been placed successfully.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func yourOrderHaveBeenPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your order have been placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your order have been placed successfully"
        }

        return NSLocalizedString("Your order have been placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Your order has been scheduled successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func yourOrderHaveBeenSheduledSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your order have been sheduled successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your order have been sheduled successfully"
        }

        return NSLocalizedString("Your order have been sheduled successfully", bundle: bundle, comment: "")
      }

      /// en translation: Your order is on the way for delivery
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func truck_driver_is_on_the_way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("truck_driver_is_on_the_way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "truck_driver_is_on_the_way"
        }

        return NSLocalizedString("truck_driver_is_on_the_way", bundle: bundle, comment: "")
      }

      /// en translation: Your request has been cancelled.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func request_cancelled_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_cancelled_successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_cancelled_successfully"
        }

        return NSLocalizedString("request_cancelled_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Your ride has been accepted and its pending from approval.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func your_ride_has_been_accepted_and_its_pending_from_approval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your_ride_has_been_accepted_and_its_pending_from_approval.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your_ride_has_been_accepted_and_its_pending_from_approval."
        }

        return NSLocalizedString("Your_ride_has_been_accepted_and_its_pending_from_approval.", bundle: bundle, comment: "")
      }

      /// en translation: Your service has been booked successfully
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func service_booked_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_booked_successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_booked_successfully"
        }

        return NSLocalizedString("service_booked_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Your service has been booked.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func popUpScheduledBookedConfirmationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PopUpScheduledBooked.ConfirmationMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PopUpScheduledBooked.ConfirmationMessage"
        }

        return NSLocalizedString("PopUpScheduledBooked.ConfirmationMessage", bundle: bundle, comment: "")
      }

      /// en translation: Your service has been started
      ///
      /// Locales: en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func driver_is_on_the_way_DriveStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("driver_is_on_the_way_DriveStarted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "driver_is_on_the_way_DriveStarted"
        }

        return NSLocalizedString("driver_is_on_the_way_DriveStarted", bundle: bundle, comment: "")
      }

      /// en translation: available
      ///
      /// Locales: ar, en, es, fr, nl, de, zh-Hans, ja, si-LK, sq
      static func available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "available"
        }

        return NSLocalizedString("available", bundle: bundle, comment: "")
      }

      /// en translation: credit
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func credit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("credit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "credit"
        }

        return NSLocalizedString("credit", bundle: bundle, comment: "")
      }

      /// en translation: customisable
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func customisable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("customisable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "customisable"
        }

        return NSLocalizedString("customisable", bundle: bundle, comment: "")
      }

      /// en translation: day
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day"
        }

        return NSLocalizedString("day", bundle: bundle, comment: "")
      }

      /// en translation: days
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "days"
        }

        return NSLocalizedString("days", bundle: bundle, comment: "")
      }

      /// en translation: email@address.com
      ///
      /// Locales: ar, en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func iosZDCChatTranscriptEmailAlertEmailPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.emailPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDCChat.transcriptEmailAlert.emailPlaceholder"
        }

        return NSLocalizedString("ios.ZDCChat.transcriptEmailAlert.emailPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: hour
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hour"
        }

        return NSLocalizedString("hour", bundle: bundle, comment: "")
      }

      /// en translation: in the wallet in order to receive the booking request.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func walletReceive_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet.Receive_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet.Receive_money"
        }

        return NSLocalizedString("Wallet.Receive_money", bundle: bundle, comment: "")
      }

      /// en translation: items
      ///
      /// Locales: en, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "items"
        }

        return NSLocalizedString("items", bundle: bundle, comment: "")
      }

      /// en translation: left
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left"
        }

        return NSLocalizedString("left", bundle: bundle, comment: "")
      }

      /// en translation: month
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month"
        }

        return NSLocalizedString("month", bundle: bundle, comment: "")
      }

      /// en translation: months
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func months(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("months", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "months"
        }

        return NSLocalizedString("months", bundle: bundle, comment: "")
      }

      /// en translation: password and confirm password should match.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func password_confirmPassword_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_confirmPassword_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_confirmPassword_validation"
        }

        return NSLocalizedString("password_confirmPassword_validation", bundle: bundle, comment: "")
      }

      /// en translation: password should be atleast 6 characters.
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func password_length_validation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_length_validation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_length_validation_message"
        }

        return NSLocalizedString("password_length_validation_message", bundle: bundle, comment: "")
      }

      /// en translation: technical problem
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func technicalIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TechnicalIssue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TechnicalIssue"
        }

        return NSLocalizedString("TechnicalIssue", bundle: bundle, comment: "")
      }

      /// en translation: the date in the past
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func past_DATE_MSG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PAST_DATE_MSG", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PAST_DATE_MSG"
        }

        return NSLocalizedString("PAST_DATE_MSG", bundle: bundle, comment: "")
      }

      /// en translation: token
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.Token"
        }

        return NSLocalizedString("Order.Token", bundle: bundle, comment: "")
      }

      /// en translation: token left
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func orderTokenLeft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order.TokenLeft", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order.TokenLeft"
        }

        return NSLocalizedString("Order.TokenLeft", bundle: bundle, comment: "")
      }

      /// en translation: via Sneni
      ///
      /// Locales: en, es, fr, it, de, zh-Hans, ja, si-LK, sq
      static func viaClikat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("via Clikat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "via Clikat"
        }

        return NSLocalizedString("via Clikat", bundle: bundle, comment: "")
      }

      /// en translation: view deals available via companies
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func view_deals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_deals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_deals"
        }

        return NSLocalizedString("view_deals", bundle: bundle, comment: "")
      }

      /// en translation: with Phone or Email
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func withPhoneEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withPhoneEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withPhoneEmail"
        }

        return NSLocalizedString("withPhoneEmail", bundle: bundle, comment: "")
      }

      /// en translation: اردو
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameUrdu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Urdu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Urdu"
        }

        return NSLocalizedString("LanguageName.Urdu", bundle: bundle, comment: "")
      }

      /// en translation: اردو
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func urdu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("urdu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "urdu"
        }

        return NSLocalizedString("urdu", bundle: bundle, comment: "")
      }

      /// en translation: عربى
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameArabic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Arabic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Arabic"
        }

        return NSLocalizedString("LanguageName.Arabic", bundle: bundle, comment: "")
      }

      /// en translation: हिंदी
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func hindi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hindi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hindi"
        }

        return NSLocalizedString("hindi", bundle: bundle, comment: "")
      }

      /// en translation: हिंदी
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameHindi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Hindi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Hindi"
        }

        return NSLocalizedString("LanguageName.Hindi", bundle: bundle, comment: "")
      }

      /// en translation: 中文
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func chinese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chinese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chinese"
        }

        return NSLocalizedString("chinese", bundle: bundle, comment: "")
      }

      /// en translation: 中文
      ///
      /// Locales: ar, en, es, fr, it, nl, de, zh-Hans, ja, si-LK, sq
      static func languageNameChinese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LanguageName.Chinese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LanguageName.Chinese"
        }

        return NSLocalizedString("LanguageName.Chinese", bundle: bundle, comment: "")
      }

      /// es translation:  Comentarios
      ///
      /// Locales: es, nl
      static func reviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reviews"
        }

        return NSLocalizedString("reviews", bundle: bundle, comment: "")
      }

      /// nl translation: Geannuleerd
      ///
      /// Locales: nl
      static func cancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelled"
        }

        return NSLocalizedString("cancelled", bundle: bundle, comment: "")
      }

      /// sq translation: العربية
      ///
      /// Locales: sq
      static func arabic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("arabic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "arabic"
        }

        return NSLocalizedString("arabic", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: 卡
      ///
      /// Locales: zh-Hans
      static func card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card"
        }

        return NSLocalizedString("Card", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.mainCab` struct is generated, and contains static references to 50 localization keys.
    struct mainCab {
      /// en translation: Female
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fMrVdSGeText = Rswift.StringResource(key: "fMr-Vd-SGe.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ecWMySkHText = Rswift.StringResource(key: "EcW-My-SkH.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let uNJ49EZtText = Rswift.StringResource(key: "uNJ-49-eZt.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 01 : 59
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let uw0XsQ1OText = Rswift.StringResource(key: "Uw0-Xs-Q1O.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 911
      ///
      /// Locales: en, ar, si-LK
      static let wjMaXjCText = Rswift.StringResource(key: "2wj-Ma-XjC.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "si-LK"], comment: nil)
      /// en translation: ADDRESS
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let seQqDGYText = Rswift.StringResource(key: "8SE-Qq-dGY.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: BOOK A SERVICE
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mcHX9QHYText = Rswift.StringResource(key: "mcH-X9-QHY.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eJgYYRvGNormalTitle = Rswift.StringResource(key: "EJg-yY-rvG.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gGyZIEWDNormalTitle = Rswift.StringResource(key: "GGy-ZI-EWD.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book a cab instantly or schedule it according to your needs. to your needs. 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ySc8MGText = Rswift.StringResource(key: "61Y-sc-8MG.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book or Schedule a Taxi
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jmH31XkText = Rswift.StringResource(key: "6jm-H3-1Xk.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Buraq 24
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let tlaBnFumText = Rswift.StringResource(key: "TLA-bn-Fum.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: COMING SOON
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fgQVv8UlText = Rswift.StringResource(key: "fgQ-vv-8Ul.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: COMING SOON
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let j4PMvS2dText = Rswift.StringResource(key: "J4P-mv-s2d.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Change langauge
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qGyYTC2UText = Rswift.StringResource(key: "qGy-YT-C2U.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Complete your profile
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cdeYfUBYText = Rswift.StringResource(key: "CDE-yf-UBY.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Connecting your needs in seconds
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gl4IfMQnText = Rswift.StringResource(key: "gl4-if-mQn.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Delivery care free at your doorstep
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let zkS4vUBQText = Rswift.StringResource(key: "ZkS-4v-UBQ.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Delivery care free at your doorstep
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ltJIKPNnText = Rswift.StringResource(key: "ltJ-IK-pNn.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Didn’t receive your code?
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gSG541FText = Rswift.StringResource(key: "8gS-G5-41F.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Eg. Jane
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pPNpZN2Placeholder = Rswift.StringResource(key: "7pP-np-zN2.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Eg. doe
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let teGWOQJSPlaceholder = Rswift.StringResource(key: "TeG-wO-QJS.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let drfTF9K3NormalTitle = Rswift.StringResource(key: "Drf-TF-9K3.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter drop off location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yeQDi9ijPlaceholder = Rswift.StringResource(key: "yeQ-di-9ij.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter location pickup location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let v6aIq6HPPlaceholder = Rswift.StringResource(key: "V6a-Iq-6HP.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter the code sent on +1 7392874901
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let p3gTMVOgText = Rswift.StringResource(key: "P3g-TM-VOg.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter your mobile no.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let a6VzKz2Placeholder = Rswift.StringResource(key: "4A6-Vz-Kz2.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter your number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fVxBW8a5Placeholder = Rswift.StringResource(key: "fVx-BW-8a5.placeholder", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter your number to get started
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qkfX1Yz8Text = Rswift.StringResource(key: "qkf-x1-Yz8.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: FIRST NAME
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yvLUAUnTText = Rswift.StringResource(key: "yvL-UA-unT.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ye1AGFfUText = Rswift.StringResource(key: "Ye1-aG-FfU.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let y5fQU3cTText = Rswift.StringResource(key: "y5f-QU-3cT.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Hey Welcome, Avinash
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let aQ87KGmText = Rswift.StringResource(key: "0aQ-87-kGm.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: I agree to the
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hezSmJV0Text = Rswift.StringResource(key: "hez-sm-JV0.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: I’M A 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ctprq4ExText = Rswift.StringResource(key: "CTP-rQ-4Ex.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wb399YGkText = Rswift.StringResource(key: "Wb3-99-YGk.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: LAST NAME
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nAgR4A4eText = Rswift.StringResource(key: "NAg-r4-A4e.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, si-LK
      static let xycR44yEText = Rswift.StringResource(key: "Xyc-R4-4yE.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rsPEd7vkText = Rswift.StringResource(key: "RsP-Ed-7vk.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vUbGiT6RText = Rswift.StringResource(key: "VUb-Gi-T6R.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pfW1jV2PNormalTitle = Rswift.StringResource(key: "PfW-1j-V2P.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jXCQnU72Text = Rswift.StringResource(key: "jXC-qn-u72.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let oQsCdN2ANormalTitle = Rswift.StringResource(key: "OQs-Cd-N2A.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Resend otp
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nePYFPQRNormalTitle = Rswift.StringResource(key: "neP-YF-PQR.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vbBAXhcText = Rswift.StringResource(key: "9Vb-bA-xhc.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select your service to continue further
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vhF8LFnsText = Rswift.StringResource(key: "vhF-8L-Fns.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let bQe4h4ASNormalTitle = Rswift.StringResource(key: "BQe-4h-4AS.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let stCUFMUzNormalTitle = Rswift.StringResource(key: "stC-uF-MUz.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let e8x8IHzrText = Rswift.StringResource(key: "e8x-8I-hzr.text", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Verify
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vycoXjINormalTitle = Rswift.StringResource(key: "9VY-cO-xjI.normalTitle", tableName: "MainCab", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)

      /// en translation: Female
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fMrVdSGeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fMr-Vd-SGe.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "fMr-Vd-SGe.text"
        }

        return NSLocalizedString("fMr-Vd-SGe.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ecWMySkHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EcW-My-SkH.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "EcW-My-SkH.text"
        }

        return NSLocalizedString("EcW-My-SkH.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func uNJ49EZtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uNJ-49-eZt.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "uNJ-49-eZt.text"
        }

        return NSLocalizedString("uNJ-49-eZt.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: 01 : 59
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func uw0XsQ1OText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uw0-Xs-Q1O.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "Uw0-Xs-Q1O.text"
        }

        return NSLocalizedString("Uw0-Xs-Q1O.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: 911
      ///
      /// Locales: en, ar, si-LK
      static func wjMaXjCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2wj-Ma-XjC.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "2wj-Ma-XjC.text"
        }

        return NSLocalizedString("2wj-Ma-XjC.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func seQqDGYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8SE-Qq-dGY.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "8SE-Qq-dGY.text"
        }

        return NSLocalizedString("8SE-Qq-dGY.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: BOOK A SERVICE
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mcHX9QHYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mcH-X9-QHY.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "mcH-X9-QHY.text"
        }

        return NSLocalizedString("mcH-X9-QHY.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eJgYYRvGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EJg-yY-rvG.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "EJg-yY-rvG.normalTitle"
        }

        return NSLocalizedString("EJg-yY-rvG.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gGyZIEWDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GGy-ZI-EWD.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "GGy-ZI-EWD.normalTitle"
        }

        return NSLocalizedString("GGy-ZI-EWD.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Book a cab instantly or schedule it according to your needs. to your needs. 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ySc8MGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("61Y-sc-8MG.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "61Y-sc-8MG.text"
        }

        return NSLocalizedString("61Y-sc-8MG.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Book or Schedule a Taxi
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jmH31XkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6jm-H3-1Xk.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "6jm-H3-1Xk.text"
        }

        return NSLocalizedString("6jm-H3-1Xk.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Buraq 24
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func tlaBnFumText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TLA-bn-Fum.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "TLA-bn-Fum.text"
        }

        return NSLocalizedString("TLA-bn-Fum.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: COMING SOON
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fgQVv8UlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fgQ-vv-8Ul.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "fgQ-vv-8Ul.text"
        }

        return NSLocalizedString("fgQ-vv-8Ul.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: COMING SOON
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func j4PMvS2dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J4P-mv-s2d.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "J4P-mv-s2d.text"
        }

        return NSLocalizedString("J4P-mv-s2d.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Change langauge
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qGyYTC2UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qGy-YT-C2U.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "qGy-YT-C2U.text"
        }

        return NSLocalizedString("qGy-YT-C2U.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Complete your profile
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cdeYfUBYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CDE-yf-UBY.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "CDE-yf-UBY.text"
        }

        return NSLocalizedString("CDE-yf-UBY.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Connecting your needs in seconds
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gl4IfMQnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gl4-if-mQn.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "gl4-if-mQn.text"
        }

        return NSLocalizedString("gl4-if-mQn.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Delivery care free at your doorstep
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func zkS4vUBQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZkS-4v-UBQ.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "ZkS-4v-UBQ.text"
        }

        return NSLocalizedString("ZkS-4v-UBQ.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Delivery care free at your doorstep
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ltJIKPNnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ltJ-IK-pNn.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "ltJ-IK-pNn.text"
        }

        return NSLocalizedString("ltJ-IK-pNn.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Didn’t receive your code?
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gSG541FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8gS-G5-41F.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "8gS-G5-41F.text"
        }

        return NSLocalizedString("8gS-G5-41F.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Eg. Jane
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pPNpZN2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7pP-np-zN2.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "7pP-np-zN2.placeholder"
        }

        return NSLocalizedString("7pP-np-zN2.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Eg. doe
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func teGWOQJSPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TeG-wO-QJS.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "TeG-wO-QJS.placeholder"
        }

        return NSLocalizedString("TeG-wO-QJS.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func drfTF9K3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Drf-TF-9K3.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "Drf-TF-9K3.normalTitle"
        }

        return NSLocalizedString("Drf-TF-9K3.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter drop off location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yeQDi9ijPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yeQ-di-9ij.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "yeQ-di-9ij.placeholder"
        }

        return NSLocalizedString("yeQ-di-9ij.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter location pickup location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func v6aIq6HPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V6a-Iq-6HP.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "V6a-Iq-6HP.placeholder"
        }

        return NSLocalizedString("V6a-Iq-6HP.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter the code sent on +1 7392874901
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func p3gTMVOgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P3g-TM-VOg.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "P3g-TM-VOg.text"
        }

        return NSLocalizedString("P3g-TM-VOg.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter your mobile no.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func a6VzKz2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4A6-Vz-Kz2.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "4A6-Vz-Kz2.placeholder"
        }

        return NSLocalizedString("4A6-Vz-Kz2.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter your number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fVxBW8a5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fVx-BW-8a5.placeholder", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "fVx-BW-8a5.placeholder"
        }

        return NSLocalizedString("fVx-BW-8a5.placeholder", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Enter your number to get started
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qkfX1Yz8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qkf-x1-Yz8.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "qkf-x1-Yz8.text"
        }

        return NSLocalizedString("qkf-x1-Yz8.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: FIRST NAME
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yvLUAUnTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yvL-UA-unT.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "yvL-UA-unT.text"
        }

        return NSLocalizedString("yvL-UA-unT.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ye1AGFfUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ye1-aG-FfU.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "Ye1-aG-FfU.text"
        }

        return NSLocalizedString("Ye1-aG-FfU.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Freight delivery is just one tap away
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func y5fQU3cTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y5f-QU-3cT.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "y5f-QU-3cT.text"
        }

        return NSLocalizedString("y5f-QU-3cT.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Hey Welcome, Avinash
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func aQ87KGmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0aQ-87-kGm.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "0aQ-87-kGm.text"
        }

        return NSLocalizedString("0aQ-87-kGm.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: I agree to the
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hezSmJV0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hez-sm-JV0.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "hez-sm-JV0.text"
        }

        return NSLocalizedString("hez-sm-JV0.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: I’M A 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ctprq4ExText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CTP-rQ-4Ex.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "CTP-rQ-4Ex.text"
        }

        return NSLocalizedString("CTP-rQ-4Ex.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Just some more information to fill up :)
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wb399YGkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wb3-99-YGk.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "Wb3-99-YGk.text"
        }

        return NSLocalizedString("Wb3-99-YGk.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: LAST NAME
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nAgR4A4eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NAg-r4-A4e.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "NAg-r4-A4e.text"
        }

        return NSLocalizedString("NAg-r4-A4e.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, si-LK
      static func xycR44yEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xyc-R4-4yE.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "Xyc-R4-4yE.text"
        }

        return NSLocalizedString("Xyc-R4-4yE.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rsPEd7vkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RsP-Ed-7vk.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "RsP-Ed-7vk.text"
        }

        return NSLocalizedString("RsP-Ed-7vk.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vUbGiT6RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VUb-Gi-T6R.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "VUb-Gi-T6R.text"
        }

        return NSLocalizedString("VUb-Gi-T6R.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pfW1jV2PNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PfW-1j-V2P.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "PfW-1j-V2P.normalTitle"
        }

        return NSLocalizedString("PfW-1j-V2P.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jXCQnU72Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jXC-qn-u72.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "jXC-qn-u72.text"
        }

        return NSLocalizedString("jXC-qn-u72.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func oQsCdN2ANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OQs-Cd-N2A.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "OQs-Cd-N2A.normalTitle"
        }

        return NSLocalizedString("OQs-Cd-N2A.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Resend otp
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nePYFPQRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("neP-YF-PQR.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "neP-YF-PQR.normalTitle"
        }

        return NSLocalizedString("neP-YF-PQR.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vbBAXhcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Vb-bA-xhc.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "9Vb-bA-xhc.text"
        }

        return NSLocalizedString("9Vb-bA-xhc.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Select your service to continue further
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vhF8LFnsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vhF-8L-Fns.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "vhF-8L-Fns.text"
        }

        return NSLocalizedString("vhF-8L-Fns.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func bQe4h4ASNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BQe-4h-4AS.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "BQe-4h-4AS.normalTitle"
        }

        return NSLocalizedString("BQe-4h-4AS.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func stCUFMUzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stC-uF-MUz.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "stC-uF-MUz.normalTitle"
        }

        return NSLocalizedString("stC-uF-MUz.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func e8x8IHzrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e8x-8I-hzr.text", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "e8x-8I-hzr.text"
        }

        return NSLocalizedString("e8x-8I-hzr.text", tableName: "MainCab", bundle: bundle, comment: "")
      }

      /// en translation: Verify
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vycoXjINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9VY-cO-xjI.normalTitle", tableName: "MainCab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MainCab", preferredLanguages: preferredLanguages) else {
          return "9VY-cO-xjI.normalTitle"
        }

        return NSLocalizedString("9VY-cO-xjI.normalTitle", tableName: "MainCab", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 273 localization keys.
    struct main {
      /// en translation: 0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aqHHlSKUText = Rswift.StringResource(key: "AqH-hl-sKU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let adjlh4Text = Rswift.StringResource(key: "58A-dJ-lH4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fgwBGLkrText = Rswift.StringResource(key: "Fgw-BG-lkr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lc0UVYgpText = Rswift.StringResource(key: "lc0-uV-ygp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zesF2KccText = Rswift.StringResource(key: "Zes-f2-Kcc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fKxM0OTNText = Rswift.StringResource(key: "FKx-m0-oTN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jc9Og0KuText = Rswift.StringResource(key: "JC9-og-0Ku.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bkMESKaAText = Rswift.StringResource(key: "bkM-ES-kaA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0 result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let tyPVvMzcText = Rswift.StringResource(key: "tyP-Vv-mzc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bifXcHecText = Rswift.StringResource(key: "BIF-Xc-hec.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dwaHdHDUText = Rswift.StringResource(key: "DWA-Hd-hDU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let g53I1SiText = Rswift.StringResource(key: "2G5-3I-1Si.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let twAK78afText = Rswift.StringResource(key: "twA-K7-8af.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yn4GuFC6Text = Rswift.StringResource(key: "YN4-gu-fC6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ncGY7VK2Text = Rswift.StringResource(key: "NcG-Y7-vK2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 10 AED
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dakKsOaLText = Rswift.StringResource(key: "dak-Ks-oaL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 123
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let eaKSwS7JText = Rswift.StringResource(key: "eaK-Sw-s7J.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 123
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kAW0yOIrText = Rswift.StringResource(key: "kAW-0y-oIr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 12333
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let nkGSB0dText = Rswift.StringResource(key: "5nk-gS-B0d.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 18 Jan, 2019
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let pSjTEFnQText = Rswift.StringResource(key: "PSj-tE-fnQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 2201, Tabuk St , Riyadh
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zPFiJ0hNormalTitle = Rswift.StringResource(key: "0zP-Fi-J0h.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let d1hV5L28Text = Rswift.StringResource(key: "d1h-V5-L28.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sbSkBcHText = Rswift.StringResource(key: "6sb-Sk-BcH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xqO3q7pcText = Rswift.StringResource(key: "xqO-3q-7pc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 344 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xnU4vBcfText = Rswift.StringResource(key: "XnU-4v-Bcf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sIQ8m9HoText = Rswift.StringResource(key: "sIQ-8m-9Ho.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vxgBuOPWText = Rswift.StringResource(key: "VXG-bu-oPW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yev6oKpIText = Rswift.StringResource(key: "Yev-6o-KpI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 4.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let qmNJWSKyText = Rswift.StringResource(key: "qmN-JW-SKy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 5
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rHqWqQghText = Rswift.StringResource(key: "RHq-Wq-Qgh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 56 Likes
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fKFBJ3QrText = Rswift.StringResource(key: "fKF-bJ-3Qr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 56 Likes
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jbh60AJbText = Rswift.StringResource(key: "Jbh-60-aJb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: ABOUT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bo7OXUM9NormalTitle = Rswift.StringResource(key: "Bo7-oX-UM9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: ABOUT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let o8STdYL2NormalTitle = Rswift.StringResource(key: "O8S-Td-YL2.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: AED 1000 - AED 5000 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bmE5y2D0Text = Rswift.StringResource(key: "bmE-5y-2D0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: AED 120
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zykJGRYiText = Rswift.StringResource(key: "zyk-jG-rYi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: AED 250
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xt1SOSaeText = Rswift.StringResource(key: "Xt1-sO-Sae.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: AED 7.5/EACH
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xyBzWodText = Rswift.StringResource(key: "7Xy-bz-Wod.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let uxvrlgGdText = Rswift.StringResource(key: "UXV-RL-gGd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add to Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kxAGsFtYNormalTitle = Rswift.StringResource(key: "kxA-gs-FtY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add to Wish List
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aYYY2L2MNormalTitle = Rswift.StringResource(key: "aYY-y2-l2M.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Additional Remarks
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mQ2B1GoLText = Rswift.StringResource(key: "mQ2-b1-goL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kwrSaSb4Text = Rswift.StringResource(key: "Kwr-Sa-sb4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Amazonia
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vbSMbGmqTitle = Rswift.StringResource(key: "VbS-mb-gmq.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Awesome Deals Unlocked Everyday
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let p2yCgX6DText = Rswift.StringResource(key: "p2y-cg-X6D.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Awesome Deals Unlocked Everyday
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vbeH2HFGText = Rswift.StringResource(key: "Vbe-H2-hFG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Awesome Product
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mzMwFSCText = Rswift.StringResource(key: "9mz-Mw-fSC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Became a patient or caregiver
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hLjXP0iqNormalTitle = Rswift.StringResource(key: "HLj-xP-0iq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kFgL5XLcText = Rswift.StringResource(key: "KFg-L5-XLc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let o9bMHVnuText = Rswift.StringResource(key: "o9b-mH-vnu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let so1LpO9cText = Rswift.StringResource(key: "SO1-Lp-O9c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let u6BfKBtNormalTitle = Rswift.StringResource(key: "0u6-bf-kBt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Buy Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let tvTT4ZEtNormalTitle = Rswift.StringResource(key: "TvT-T4-zEt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Buy Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let v7jDiHG7NormalTitle = Rswift.StringResource(key: "V7j-di-hG7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let a2sNm0yuText = Rswift.StringResource(key: "a2s-Nm-0yu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let uRmFqGvgText = Rswift.StringResource(key: "uRm-Fq-Gvg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wN5FrTSdText = Rswift.StringResource(key: "wN5-Fr-TSd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let x5RZ4CoTText = Rswift.StringResource(key: "x5R-Z4-CoT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xBkFhMsMText = Rswift.StringResource(key: "xBk-fh-MsM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gPZQ4UMKText = Rswift.StringResource(key: "gPZ-Q4-UMK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By India Gate
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let oicLGQSfText = Rswift.StringResource(key: "Oic-lG-qSf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Categories
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jvup9UM5Text = Rswift.StringResource(key: "JVU-p9-UM5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose your Drop-off location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bwBnCpsPlaceholder = Rswift.StringResource(key: "1BW-bn-cps.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose your Pick-up location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fSvJjP5bPlaceholder = Rswift.StringResource(key: "fSv-jj-p5b.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Coca Cola Coke Zero
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let pExCUMYJText = Rswift.StringResource(key: "PEx-cU-MYJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Coffe/Tea,Juice,Soda
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gDiTo1ggText = Rswift.StringResource(key: "gDi-to-1gg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Coffe/Tea,Juice,Soda
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xdxJlXrYText = Rswift.StringResource(key: "Xdx-jl-XrY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let nzt21H7NormalTitle = Rswift.StringResource(key: "3NZ-t2-1H7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: DROP-OFF TIME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let g2FCOHEoText = Rswift.StringResource(key: "g2F-cO-hEo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let iltHwBXVNormalTitle = Rswift.StringResource(key: "Ilt-Hw-bXV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let js3F5YRTNormalTitle = Rswift.StringResource(key: "Js3-f5-YRT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let axqNWVacText = Rswift.StringResource(key: "Axq-nW-Vac.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dze7O7flText = Rswift.StringResource(key: "Dze-7O-7fl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rwyYjPZAText = Rswift.StringResource(key: "RWY-Yj-PZA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bp9WxHPpText = Rswift.StringResource(key: "Bp9-Wx-HPp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bbNFmV8tNormalTitle = Rswift.StringResource(key: "bbN-fm-V8t.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let id5WyShsNormalTitle = Rswift.StringResource(key: "id5-Wy-shs.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let n9J4yJMlNormalTitle = Rswift.StringResource(key: "N9J-4y-jMl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sWpK6X68NormalTitle = Rswift.StringResource(key: "sWp-K6-X68.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Dubai
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let iv9RnNMbNormalTitle = Rswift.StringResource(key: "IV9-rn-nMb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Dubai 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vxW4P5yNormalTitle = Rswift.StringResource(key: "9Vx-w4-p5y.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: FILTERS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ebJBRPMNormalTitle = Rswift.StringResource(key: "7eb-jB-RPM.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: FIlter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bqjq5CDText = Rswift.StringResource(key: "5BQ-JQ-5CD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Favourites
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wmKYtESxText = Rswift.StringResource(key: "WmK-Yt-ESx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let he50QTGBText = Rswift.StringResource(key: "He5-0Q-TGB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kmCX5EtUNormalTitle = Rswift.StringResource(key: "kmC-X5-etU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wOvR4BUZNormalTitle = Rswift.StringResource(key: "wOv-R4-BUZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Grand Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let pOkXOA2uText = Rswift.StringResource(key: "pOk-XO-a2u.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vNCVYJauTitle = Rswift.StringResource(key: "vNC-vY-Jau.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: House no. / Flat no. / Floor / Building
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lusNmJXQPlaceholder = Rswift.StringResource(key: "LUS-nm-JXQ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: In business since
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let q2gFSBKnText = Rswift.StringResource(key: "Q2g-fS-BKn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: In business since
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vwzD32BiText = Rswift.StringResource(key: "vwz-d3-2Bi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: In publishing and graphic design, lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document without relying on meaningful content. Replacing the actual content with 
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let brGWHUh4Text = Rswift.StringResource(key: "BrG-WH-uh4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: John Doe
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yKgKaXsqText = Rswift.StringResource(key: "YKg-Ka-Xsq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ezJpI6BText = Rswift.StringResource(key: "4Ez-jp-I6B.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let linVc3NfText = Rswift.StringResource(key: "Lin-vc-3Nf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let t5LB8azText = Rswift.StringResource(key: "5t5-lB-8az.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let b2H1FMDwText = Rswift.StringResource(key: "B2H-1F-MDw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let e7nZUAdrText = Rswift.StringResource(key: "E7n-ZU-adr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let eOkGEGdaText = Rswift.StringResource(key: "EOk-GE-Gda.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fULXKTYuText = Rswift.StringResource(key: "fUL-xK-TYu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gIUEbNRnText = Rswift.StringResource(key: "gIU-eb-nRn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gJEPgJUqText = Rswift.StringResource(key: "gJE-pg-jUq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jUxOfImDText = Rswift.StringResource(key: "jUx-of-imD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kd2KrZ5IText = Rswift.StringResource(key: "Kd2-kr-z5I.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mvZBNBsqText = Rswift.StringResource(key: "MvZ-bN-bsq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rG6RK7pKText = Rswift.StringResource(key: "rG6-RK-7pK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let tn334KRbText = Rswift.StringResource(key: "tn3-34-KRb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let u0GYdVhnText = Rswift.StringResource(key: "U0G-yd-Vhn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let upsXnP5dText = Rswift.StringResource(key: "UPS-xn-P5d.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yE7W4UAZText = Rswift.StringResource(key: "yE7-w4-UAZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let d0QZ6JZZText = Rswift.StringResource(key: "d0Q-z6-jZZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Lable
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jc0FiJDMText = Rswift.StringResource(key: "JC0-fi-jDM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Laundry
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xLlJpYV8Text = Rswift.StringResource(key: "XLl-Jp-yV8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let paNHETiCText = Rswift.StringResource(key: "paN-HE-tiC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yaYM57cCText = Rswift.StringResource(key: "yaY-m5-7cC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zkG3WDA3Text = Rswift.StringResource(key: "zkG-3W-dA3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Log in And Sign Up
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bbNQ0I23NormalTitle = Rswift.StringResource(key: "BbN-Q0-i23.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Looking for food delivery?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ns7VKZCqText = Rswift.StringResource(key: "NS7-vK-ZCq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: MAP
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gl02KHQdNormalTitle = Rswift.StringResource(key: "gl0-2K-HQd.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: MENU
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let e2fE0IjPNormalTitle = Rswift.StringResource(key: "e2f-E0-ijP.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Min Delivery Time
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aIpYoGvAText = Rswift.StringResource(key: "aIp-Yo-gvA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Min Delivery Time
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sqq1NUslText = Rswift.StringResource(key: "sqq-1N-usl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Minimum booking : 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let baf2ZQText = Rswift.StringResource(key: "63B-aF-2ZQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Minimum order
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let qNVJYRMJText = Rswift.StringResource(key: "qNV-jY-RMJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Minimum order
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wED5VFkhText = Rswift.StringResource(key: "wED-5V-Fkh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: More
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let btfAiUDoText = Rswift.StringResource(key: "btf-ai-uDo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: My review
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aMgJoDtJText = Rswift.StringResource(key: "aMg-jo-DtJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: My review
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kcJDNQVNText = Rswift.StringResource(key: "kcJ-DN-qVN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let cnR3MDQxText = Rswift.StringResource(key: "CnR-3M-dQx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fPEGBF4dText = Rswift.StringResource(key: "fPE-gB-f4d.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gh3Ph0h9Text = Rswift.StringResource(key: "Gh3-ph-0h9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gup3kOoTText = Rswift.StringResource(key: "Gup-3k-ooT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gxCESCm6Text = Rswift.StringResource(key: "GxC-ES-Cm6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let h1pE3WWEText = Rswift.StringResource(key: "h1p-E3-WWE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let iYSDcDeBText = Rswift.StringResource(key: "iYS-Dc-deB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jFJfKjcText = Rswift.StringResource(key: "9jF-Jf-kjc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kBqAfMOgText = Rswift.StringResource(key: "kBq-af-MOg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let m74AsG8fText = Rswift.StringResource(key: "M74-as-g8f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mM7SZZJcText = Rswift.StringResource(key: "mM7-SZ-zJc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let phaLJVgKText = Rswift.StringResource(key: "pha-lJ-vgK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let psfAiENvText = Rswift.StringResource(key: "Psf-Ai-eNv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let r2kIkF1jNormalTitle = Rswift.StringResource(key: "R2k-Ik-F1j.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let r47ODDpTText = Rswift.StringResource(key: "R47-OD-DpT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rbwIrPAcText = Rswift.StringResource(key: "RBW-ir-pAc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let s09TL1XNText = Rswift.StringResource(key: "s09-tL-1XN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let su5A3FO3Text = Rswift.StringResource(key: "su5-a3-fO3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let uzhxkAmkText = Rswift.StringResource(key: "UZH-xK-amk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xCz285ajText = Rswift.StringResource(key: "xCz-28-5aj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xgsEYSz5Text = Rswift.StringResource(key: "xgs-EY-Sz5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let y3RZkZdRText = Rswift.StringResource(key: "Y3R-zk-ZdR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yf8LgJF3Text = Rswift.StringResource(key: "yf8-Lg-JF3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yshCnXg1Text = Rswift.StringResource(key: "Ysh-cn-xg1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let eYzK8GQKText = Rswift.StringResource(key: "EYz-k8-GQK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Data Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ecYPQTRsText = Rswift.StringResource(key: "EcY-PQ-tRs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Data Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let r8FKxUQEText = Rswift.StringResource(key: "R8F-Kx-UQE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Data Found!
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ppsNbQXgText = Rswift.StringResource(key: "pps-nb-QXg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Suppliers Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fjZ6w76fText = Rswift.StringResource(key: "FjZ-6w-76f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Suppliers Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let h2vHpKvwText = Rswift.StringResource(key: "h2v-Hp-Kvw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: North Indian, Chinese, Rolls, South Indian
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let nu7I5LSDText = Rswift.StringResource(key: "nu7-i5-lSD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: North Indian, Chinese, Rolls, South Indian
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let o6HG3X4pText = Rswift.StringResource(key: "o6H-G3-x4p.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let cufTPDYzText = Rswift.StringResource(key: "cuf-TP-dYz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rA9ZJJWjText = Rswift.StringResource(key: "rA9-ZJ-JWj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zUsV5J7kText = Rswift.StringResource(key: "ZUs-v5-J7k.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order food online from Sagar Ratna to enjoy food at your home.
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gIzDZO6yText = Rswift.StringResource(key: "gIz-DZ-o6y.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Orders done so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let h2C9qDqeText = Rswift.StringResource(key: "h2C-9q-dqe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Orders done so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let if0pUvnText = Rswift.StringResource(key: "4If-0p-Uvn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Other Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dIVo1RuText = Rswift.StringResource(key: "1dI-vo-1Ru.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Other Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let emdTaUMNText = Rswift.StringResource(key: "emd-Ta-uMN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dntKGScMText = Rswift.StringResource(key: "dnt-kG-scM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Out Of Stock
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rFH6cDfqText = Rswift.StringResource(key: "rFH-6c-Dfq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PICK-UP TIME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fTVFw5sFText = Rswift.StringResource(key: "fTV-Fw-5sF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PLACE ORDER
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let v4gOJMKLNormalTitle = Rswift.StringResource(key: "v4g-oJ-mKL.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PRODUCT DETAIL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let tfrVhKSiText = Rswift.StringResource(key: "TFR-vh-kSi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Packages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gxO6GgUText = Rswift.StringResource(key: "7gx-o6-ggU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pay Using
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ljzUbQipText = Rswift.StringResource(key: "LJZ-Ub-qip.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment Summary
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kVgEKyText = Rswift.StringResource(key: "18K-Vg-eKy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment methods
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let oahPqQdCText = Rswift.StringResource(key: "Oah-pq-qdC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment methods
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ve2FvFwmText = Rswift.StringResource(key: "Ve2-fv-Fwm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let qAeVVCLnNormalTitle = Rswift.StringResource(key: "qAe-VV-cLn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pickup Detail
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vnqArBsAText = Rswift.StringResource(key: "Vnq-ar-BsA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Plato
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let n6qWe6goNormalTitle = Rswift.StringResource(key: "n6q-we-6go.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Posted 2 days ago
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bqu58k2Text = Rswift.StringResource(key: "5BQ-u5-8k2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let atuS9PzWText = Rswift.StringResource(key: "atu-s9-PzW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sQCScUQyText = Rswift.StringResource(key: "sQC-sc-uQy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let uNbJ6LqWText = Rswift.StringResource(key: "UNb-j6-lqW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ufNFET3nText = Rswift.StringResource(key: "ufN-fE-T3n.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Price Range 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hIpZgJ29Text = Rswift.StringResource(key: "HIp-Zg-j29.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Product Description
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let oWUKN3ZTText = Rswift.StringResource(key: "oWU-KN-3ZT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Product Detail
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let svOKPPWxText = Rswift.StringResource(key: "SvO-kP-pWx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Products
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let w2sE5CQBNormalTitle = Rswift.StringResource(key: "w2s-E5-CQB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: REVIEWS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ct5BdWSeNormalTitle = Rswift.StringResource(key: "ct5-bd-wSe.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: REVIEWS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let o4kQtCjiNormalTitle = Rswift.StringResource(key: "o4k-Qt-Cji.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Product
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wjwypk7ENormalTitle = Rswift.StringResource(key: "WJW-yP-K7E.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Supplier
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hUOAhFAINormalTitle = Rswift.StringResource(key: "hUO-ah-fAI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Supplier
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let v3kVpD7rNormalTitle = Rswift.StringResource(key: "V3k-vp-D7r.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rating & Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let y4IRU7KbText = Rswift.StringResource(key: "y4I-rU-7Kb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Remove from Wish List
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aYYY2L2MSelectedTitle = Rswift.StringResource(key: "aYY-y2-l2M.selectedTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rental Policy
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let u17Bz7aCText = Rswift.StringResource(key: "u17-Bz-7aC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let pLn0U8sHNormalTitle = Rswift.StringResource(key: "PLn-0U-8sH.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SUPPLIER DETAILS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bTmKpTStText = Rswift.StringResource(key: "BTm-Kp-tSt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Save & Proceed
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rZdJkJyuNormalTitle = Rswift.StringResource(key: "RZd-jk-Jyu.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let c0MWCrQText = Rswift.StringResource(key: "6C0-MW-CrQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fXdLuZoaPlaceholder = Rswift.StringResource(key: "FXd-lu-Zoa.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yCwClD7gNormalTitle = Rswift.StringResource(key: "yCw-cl-D7g.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let cTBOf5cnPlaceholder = Rswift.StringResource(key: "cTB-of-5cn.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ejeUz4slNormalTitle = Rswift.StringResource(key: "Eje-Uz-4sl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let qTqNu1pFText = Rswift.StringResource(key: "qTq-nu-1pF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search for your location...
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ioFPMUJ8Placeholder = Rswift.StringResource(key: "ioF-pM-uJ8.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let a0gR8P0JText = Rswift.StringResource(key: "a0g-R8-p0J.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let d5VBTKLAText = Rswift.StringResource(key: "d5V-bT-kLA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select location
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fuOKQE78NormalTitle = Rswift.StringResource(key: "fuO-kQ-e78.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Self Pickup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let xIsNDJzdNormalTitle = Rswift.StringResource(key: "xIs-nD-Jzd.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Shop By Type
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wtu6O6bxText = Rswift.StringResource(key: "Wtu-6O-6bx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Size Chart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let waJMONE1Text = Rswift.StringResource(key: "WaJ-MO-nE1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Soretd By
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let me0mCYRText = Rswift.StringResource(key: "4Me-0m-cYR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Soretd By
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yoCD2ZJNText = Rswift.StringResource(key: "YoC-d2-zJN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Sort & Filter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yP9BOGwMText = Rswift.StringResource(key: "yP9-bO-GwM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Steve Jons
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lwAK0E6cText = Rswift.StringResource(key: "lwA-K0-e6c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Suppliers
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let djxUwOvhText = Rswift.StringResource(key: "Djx-uw-ovh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Suppliers
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let plUiTa7Text = Rswift.StringResource(key: "9Pl-ui-Ta7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Suppliers
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let q4zJiFeENormalTitle = Rswift.StringResource(key: "q4z-Ji-feE.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dUeC38UpText = Rswift.StringResource(key: "dUe-c3-8Up.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: UNIQUENESS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bI9TRR0nNormalTitle = Rswift.StringResource(key: "bI9-TR-R0n.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: UNIQUENESS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let k4pFFXfMNormalTitle = Rswift.StringResource(key: "K4p-fF-XfM.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: USD 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let yBRLzLsaText = Rswift.StringResource(key: "yBR-lz-lsa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aEGW8FdrNormalTitle = Rswift.StringResource(key: "aEG-w8-Fdr.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let dceNyOKrNormalTitle = Rswift.StringResource(key: "dce-Ny-oKr.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gYvFohNormalTitle = Rswift.StringResource(key: "07g-Yv-foh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lTtQtDH9NormalTitle = Rswift.StringResource(key: "LTt-Qt-DH9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rSMYoA10NormalTitle = Rswift.StringResource(key: "rSM-yo-A10.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rUhFQMRHNormalTitle = Rswift.StringResource(key: "rUh-FQ-MRH.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: View Detail
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bs1UjRhlNormalTitle = Rswift.StringResource(key: "bs1-Uj-rhl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: View Menu
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let cRgFrqNormalTitle = Rswift.StringResource(key: "96C-Rg-frq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: View food items as
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let rpjhvxgrText = Rswift.StringResource(key: "RPJ-hV-xGR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: View products as
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hzhWgAm3Text = Rswift.StringResource(key: "Hzh-Wg-am3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: We're not quite where you are yet, please change the location to see Marketplace!
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let kEB2d9GoText = Rswift.StringResource(key: "kEB-2d-9Go.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bo6RR2bText = Rswift.StringResource(key: "0BO-6R-r2b.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bhW2YZaPlaceholder = Rswift.StringResource(key: "7bh-W2-yZa.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bmAYFSefPlaceholder = Rswift.StringResource(key: "BmA-yF-Sef.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ebYPnDNRPlaceholder = Rswift.StringResource(key: "EbY-pn-DNR.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let j9eAcJsvPlaceholder = Rswift.StringResource(key: "J9e-Ac-jsv.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lKFf0FSPlaceholder = Rswift.StringResource(key: "7lK-Ff-0FS.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wjiT4BP6Placeholder = Rswift.StringResource(key: "wji-t4-BP6.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Wishlist
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hij5R98tText = Rswift.StringResource(key: "hij-5R-98t.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: With Driver
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let jp4BJ6EgNormalTitle = Rswift.StringResource(key: "Jp4-bJ-6Eg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Without Driver
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let raoEZRR8NormalTitle = Rswift.StringResource(key: "rao-EZ-rR8.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: YOUR LOCATION
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let oZcRuPvNText = Rswift.StringResource(key: "oZc-Ru-pvN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: desc
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ezONmKYIText = Rswift.StringResource(key: "ezO-nm-KYI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dfgdf
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let elT9ZQHEText = Rswift.StringResource(key: "elT-9Z-qHE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let bINUeWoGText = Rswift.StringResource(key: "bIN-Ue-woG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let gFWEHY6xText = Rswift.StringResource(key: "gFW-eH-Y6x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ik5PnYuRText = Rswift.StringResource(key: "Ik5-Pn-YuR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wkvSwDssText = Rswift.StringResource(key: "WKV-Sw-dss.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: dsadadasd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let ws3UMsaText = Rswift.StringResource(key: "2Ws-3U-Msa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fdsaf adsf ds f ads fds af asd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mxsYEHCIText = Rswift.StringResource(key: "mxs-YE-hCI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fdsaf s f asf ds f dsf ds f dsf ds fd sf ds f ds fs
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let hNBFVHhfText = Rswift.StringResource(key: "hNB-FV-Hhf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fdsffdsfsd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let nxkMOXIVText = Rswift.StringResource(key: "nxk-MO-XIV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fdsfsdf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let wDHY685bText = Rswift.StringResource(key: "wDH-y6-85b.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fff
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let zyenb48CText = Rswift.StringResource(key: "ZYE-NB-48C.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fgdgfsdg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let fSMWCWhText = Rswift.StringResource(key: "2fS-MW-CWh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fgdgfsdg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let qmYGnOMVText = Rswift.StringResource(key: "qmY-gn-oMV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: fgdgfsdg
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let k4MkHUIText = Rswift.StringResource(key: "7k4-mk-hUI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let aHOUSZfbText = Rswift.StringResource(key: "aHO-uS-Zfb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let mWxXsJVGText = Rswift.StringResource(key: "MWx-Xs-JVG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let uJSY2cVText = Rswift.StringResource(key: "0uJ-sY-2cV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let sMnGd0f0Text = Rswift.StringResource(key: "SMn-Gd-0f0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let cUcWKSQpText = Rswift.StringResource(key: "CUc-wK-SQp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let msVGfXuPText = Rswift.StringResource(key: "msV-gf-xuP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let n9SEFRUUText = Rswift.StringResource(key: "N9S-eF-RUU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let lqj6aWaGText = Rswift.StringResource(key: "lqj-6a-WaG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: sadfsfdsfsdfsdfjsd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vpFVOUWpText = Rswift.StringResource(key: "VpF-vO-UWp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: sdsadasdasd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static let vsBd2A9Text = Rswift.StringResource(key: "2Vs-bd-2A9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "zh-Hans", "si-LK", "sq"], comment: nil)

      /// en translation: 0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aqHHlSKUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AqH-hl-sKU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AqH-hl-sKU.text"
        }

        return NSLocalizedString("AqH-hl-sKU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func adjlh4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("58A-dJ-lH4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "58A-dJ-lH4.text"
        }

        return NSLocalizedString("58A-dJ-lH4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fgwBGLkrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fgw-BG-lkr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Fgw-BG-lkr.text"
        }

        return NSLocalizedString("Fgw-BG-lkr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lc0UVYgpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lc0-uV-ygp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lc0-uV-ygp.text"
        }

        return NSLocalizedString("lc0-uV-ygp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zesF2KccText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zes-f2-Kcc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Zes-f2-Kcc.text"
        }

        return NSLocalizedString("Zes-f2-Kcc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fKxM0OTNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FKx-m0-oTN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FKx-m0-oTN.text"
        }

        return NSLocalizedString("FKx-m0-oTN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jc9Og0KuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JC9-og-0Ku.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JC9-og-0Ku.text"
        }

        return NSLocalizedString("JC9-og-0Ku.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bkMESKaAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bkM-ES-kaA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bkM-ES-kaA.text"
        }

        return NSLocalizedString("bkM-ES-kaA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func tyPVvMzcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tyP-Vv-mzc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tyP-Vv-mzc.text"
        }

        return NSLocalizedString("tyP-Vv-mzc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bifXcHecText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BIF-Xc-hec.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BIF-Xc-hec.text"
        }

        return NSLocalizedString("BIF-Xc-hec.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dwaHdHDUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DWA-Hd-hDU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DWA-Hd-hDU.text"
        }

        return NSLocalizedString("DWA-Hd-hDU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func g53I1SiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2G5-3I-1Si.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2G5-3I-1Si.text"
        }

        return NSLocalizedString("2G5-3I-1Si.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func twAK78afText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twA-K7-8af.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "twA-K7-8af.text"
        }

        return NSLocalizedString("twA-K7-8af.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yn4GuFC6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YN4-gu-fC6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YN4-gu-fC6.text"
        }

        return NSLocalizedString("YN4-gu-fC6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ncGY7VK2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NcG-Y7-vK2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NcG-Y7-vK2.text"
        }

        return NSLocalizedString("NcG-Y7-vK2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 10 AED
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dakKsOaLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dak-Ks-oaL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dak-Ks-oaL.text"
        }

        return NSLocalizedString("dak-Ks-oaL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 123
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func eaKSwS7JText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eaK-Sw-s7J.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eaK-Sw-s7J.text"
        }

        return NSLocalizedString("eaK-Sw-s7J.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 123
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kAW0yOIrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kAW-0y-oIr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kAW-0y-oIr.text"
        }

        return NSLocalizedString("kAW-0y-oIr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 12333
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func nkGSB0dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5nk-gS-B0d.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5nk-gS-B0d.text"
        }

        return NSLocalizedString("5nk-gS-B0d.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 18 Jan, 2019
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func pSjTEFnQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PSj-tE-fnQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PSj-tE-fnQ.text"
        }

        return NSLocalizedString("PSj-tE-fnQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2201, Tabuk St , Riyadh
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zPFiJ0hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0zP-Fi-J0h.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0zP-Fi-J0h.normalTitle"
        }

        return NSLocalizedString("0zP-Fi-J0h.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func d1hV5L28Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d1h-V5-L28.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "d1h-V5-L28.text"
        }

        return NSLocalizedString("d1h-V5-L28.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sbSkBcHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6sb-Sk-BcH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6sb-Sk-BcH.text"
        }

        return NSLocalizedString("6sb-Sk-BcH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 23 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xqO3q7pcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xqO-3q-7pc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xqO-3q-7pc.text"
        }

        return NSLocalizedString("xqO-3q-7pc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 344 Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xnU4vBcfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XnU-4v-Bcf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XnU-4v-Bcf.text"
        }

        return NSLocalizedString("XnU-4v-Bcf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sIQ8m9HoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sIQ-8m-9Ho.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sIQ-8m-9Ho.text"
        }

        return NSLocalizedString("sIQ-8m-9Ho.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vxgBuOPWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VXG-bu-oPW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VXG-bu-oPW.text"
        }

        return NSLocalizedString("VXG-bu-oPW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 4
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yev6oKpIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yev-6o-KpI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Yev-6o-KpI.text"
        }

        return NSLocalizedString("Yev-6o-KpI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 4.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func qmNJWSKyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qmN-JW-SKy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qmN-JW-SKy.text"
        }

        return NSLocalizedString("qmN-JW-SKy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 5
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rHqWqQghText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RHq-Wq-Qgh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RHq-Wq-Qgh.text"
        }

        return NSLocalizedString("RHq-Wq-Qgh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 56 Likes
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fKFBJ3QrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fKF-bJ-3Qr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fKF-bJ-3Qr.text"
        }

        return NSLocalizedString("fKF-bJ-3Qr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 56 Likes
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jbh60AJbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jbh-60-aJb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Jbh-60-aJb.text"
        }

        return NSLocalizedString("Jbh-60-aJb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ABOUT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bo7OXUM9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bo7-oX-UM9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Bo7-oX-UM9.normalTitle"
        }

        return NSLocalizedString("Bo7-oX-UM9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ABOUT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func o8STdYL2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O8S-Td-YL2.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "O8S-Td-YL2.normalTitle"
        }

        return NSLocalizedString("O8S-Td-YL2.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: AED 1000 - AED 5000 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bmE5y2D0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bmE-5y-2D0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bmE-5y-2D0.text"
        }

        return NSLocalizedString("bmE-5y-2D0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: AED 120
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zykJGRYiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zyk-jG-rYi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zyk-jG-rYi.text"
        }

        return NSLocalizedString("zyk-jG-rYi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: AED 250
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xt1SOSaeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xt1-sO-Sae.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xt1-sO-Sae.text"
        }

        return NSLocalizedString("Xt1-sO-Sae.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: AED 7.5/EACH
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xyBzWodText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Xy-bz-Wod.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7Xy-bz-Wod.text"
        }

        return NSLocalizedString("7Xy-bz-Wod.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func uxvrlgGdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UXV-RL-gGd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UXV-RL-gGd.text"
        }

        return NSLocalizedString("UXV-RL-gGd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add to Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kxAGsFtYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kxA-gs-FtY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kxA-gs-FtY.normalTitle"
        }

        return NSLocalizedString("kxA-gs-FtY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add to Wish List
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aYYY2L2MNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aYY-y2-l2M.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aYY-y2-l2M.normalTitle"
        }

        return NSLocalizedString("aYY-y2-l2M.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Additional Remarks
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mQ2B1GoLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mQ2-b1-goL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mQ2-b1-goL.text"
        }

        return NSLocalizedString("mQ2-b1-goL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kwrSaSb4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kwr-Sa-sb4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kwr-Sa-sb4.text"
        }

        return NSLocalizedString("Kwr-Sa-sb4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Amazonia
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vbSMbGmqTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VbS-mb-gmq.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VbS-mb-gmq.title"
        }

        return NSLocalizedString("VbS-mb-gmq.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Awesome Deals Unlocked Everyday
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func p2yCgX6DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2y-cg-X6D.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "p2y-cg-X6D.text"
        }

        return NSLocalizedString("p2y-cg-X6D.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Awesome Deals Unlocked Everyday
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vbeH2HFGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vbe-H2-hFG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vbe-H2-hFG.text"
        }

        return NSLocalizedString("Vbe-H2-hFG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Awesome Product
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mzMwFSCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9mz-Mw-fSC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9mz-Mw-fSC.text"
        }

        return NSLocalizedString("9mz-Mw-fSC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Became a patient or caregiver
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hLjXP0iqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HLj-xP-0iq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HLj-xP-0iq.normalTitle"
        }

        return NSLocalizedString("HLj-xP-0iq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kFgL5XLcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KFg-L5-XLc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KFg-L5-XLc.text"
        }

        return NSLocalizedString("KFg-L5-XLc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func o9bMHVnuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o9b-mH-vnu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o9b-mH-vnu.text"
        }

        return NSLocalizedString("o9b-mH-vnu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Beverages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func so1LpO9cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SO1-Lp-O9c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SO1-Lp-O9c.text"
        }

        return NSLocalizedString("SO1-Lp-O9c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func u6BfKBtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0u6-bf-kBt.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0u6-bf-kBt.normalTitle"
        }

        return NSLocalizedString("0u6-bf-kBt.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Buy Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func tvTT4ZEtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TvT-T4-zEt.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TvT-T4-zEt.normalTitle"
        }

        return NSLocalizedString("TvT-T4-zEt.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Buy Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func v7jDiHG7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V7j-di-hG7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "V7j-di-hG7.normalTitle"
        }

        return NSLocalizedString("V7j-di-hG7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func a2sNm0yuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a2s-Nm-0yu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "a2s-Nm-0yu.text"
        }

        return NSLocalizedString("a2s-Nm-0yu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func uRmFqGvgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uRm-Fq-Gvg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uRm-Fq-Gvg.text"
        }

        return NSLocalizedString("uRm-Fq-Gvg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wN5FrTSdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wN5-Fr-TSd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wN5-Fr-TSd.text"
        }

        return NSLocalizedString("wN5-Fr-TSd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func x5RZ4CoTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("x5R-Z4-CoT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "x5R-Z4-CoT.text"
        }

        return NSLocalizedString("x5R-Z4-CoT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xBkFhMsMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xBk-fh-MsM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xBk-fh-MsM.text"
        }

        return NSLocalizedString("xBk-fh-MsM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gPZQ4UMKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gPZ-Q4-UMK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gPZ-Q4-UMK.text"
        }

        return NSLocalizedString("gPZ-Q4-UMK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: By India Gate
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func oicLGQSfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oic-lG-qSf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Oic-lG-qSf.text"
        }

        return NSLocalizedString("Oic-lG-qSf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Categories
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jvup9UM5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JVU-p9-UM5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JVU-p9-UM5.text"
        }

        return NSLocalizedString("JVU-p9-UM5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose your Drop-off location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bwBnCpsPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1BW-bn-cps.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1BW-bn-cps.placeholder"
        }

        return NSLocalizedString("1BW-bn-cps.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose your Pick-up location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fSvJjP5bPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fSv-jj-p5b.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fSv-jj-p5b.placeholder"
        }

        return NSLocalizedString("fSv-jj-p5b.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Coca Cola Coke Zero
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func pExCUMYJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PEx-cU-MYJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PEx-cU-MYJ.text"
        }

        return NSLocalizedString("PEx-cU-MYJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Coffe/Tea,Juice,Soda
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gDiTo1ggText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gDi-to-1gg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gDi-to-1gg.text"
        }

        return NSLocalizedString("gDi-to-1gg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Coffe/Tea,Juice,Soda
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xdxJlXrYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xdx-jl-XrY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xdx-jl-XrY.text"
        }

        return NSLocalizedString("Xdx-jl-XrY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func nzt21H7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3NZ-t2-1H7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3NZ-t2-1H7.normalTitle"
        }

        return NSLocalizedString("3NZ-t2-1H7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: DROP-OFF TIME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func g2FCOHEoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g2F-cO-hEo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g2F-cO-hEo.text"
        }

        return NSLocalizedString("g2F-cO-hEo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func iltHwBXVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ilt-Hw-bXV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ilt-Hw-bXV.normalTitle"
        }

        return NSLocalizedString("Ilt-Hw-bXV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func js3F5YRTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Js3-f5-YRT.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Js3-f5-YRT.normalTitle"
        }

        return NSLocalizedString("Js3-f5-YRT.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func axqNWVacText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Axq-nW-Vac.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Axq-nW-Vac.text"
        }

        return NSLocalizedString("Axq-nW-Vac.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dze7O7flText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dze-7O-7fl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Dze-7O-7fl.text"
        }

        return NSLocalizedString("Dze-7O-7fl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rwyYjPZAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RWY-Yj-PZA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RWY-Yj-PZA.text"
        }

        return NSLocalizedString("RWY-Yj-PZA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bp9WxHPpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bp9-Wx-HPp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Bp9-Wx-HPp.text"
        }

        return NSLocalizedString("Bp9-Wx-HPp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bbNFmV8tNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bbN-fm-V8t.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bbN-fm-V8t.normalTitle"
        }

        return NSLocalizedString("bbN-fm-V8t.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func id5WyShsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("id5-Wy-shs.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "id5-Wy-shs.normalTitle"
        }

        return NSLocalizedString("id5-Wy-shs.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func n9J4yJMlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N9J-4y-jMl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N9J-4y-jMl.normalTitle"
        }

        return NSLocalizedString("N9J-4y-jMl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sWpK6X68NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sWp-K6-X68.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sWp-K6-X68.normalTitle"
        }

        return NSLocalizedString("sWp-K6-X68.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Dubai
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func iv9RnNMbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IV9-rn-nMb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IV9-rn-nMb.normalTitle"
        }

        return NSLocalizedString("IV9-rn-nMb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Dubai 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vxW4P5yNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Vx-w4-p5y.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9Vx-w4-p5y.normalTitle"
        }

        return NSLocalizedString("9Vx-w4-p5y.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: FILTERS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ebJBRPMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7eb-jB-RPM.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7eb-jB-RPM.normalTitle"
        }

        return NSLocalizedString("7eb-jB-RPM.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: FIlter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bqjq5CDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5BQ-JQ-5CD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5BQ-JQ-5CD.text"
        }

        return NSLocalizedString("5BQ-JQ-5CD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Favourites
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wmKYtESxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WmK-Yt-ESx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WmK-Yt-ESx.text"
        }

        return NSLocalizedString("WmK-Yt-ESx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func he50QTGBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("He5-0Q-TGB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "He5-0Q-TGB.text"
        }

        return NSLocalizedString("He5-0Q-TGB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kmCX5EtUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kmC-X5-etU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kmC-X5-etU.normalTitle"
        }

        return NSLocalizedString("kmC-X5-etU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wOvR4BUZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wOv-R4-BUZ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wOv-R4-BUZ.normalTitle"
        }

        return NSLocalizedString("wOv-R4-BUZ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Grand Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func pOkXOA2uText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pOk-XO-a2u.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pOk-XO-a2u.text"
        }

        return NSLocalizedString("pOk-XO-a2u.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vNCVYJauTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vNC-vY-Jau.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vNC-vY-Jau.title"
        }

        return NSLocalizedString("vNC-vY-Jau.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: House no. / Flat no. / Floor / Building
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lusNmJXQPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LUS-nm-JXQ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LUS-nm-JXQ.placeholder"
        }

        return NSLocalizedString("LUS-nm-JXQ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: In business since
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func q2gFSBKnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q2g-fS-BKn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q2g-fS-BKn.text"
        }

        return NSLocalizedString("Q2g-fS-BKn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: In business since
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vwzD32BiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vwz-d3-2Bi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vwz-d3-2Bi.text"
        }

        return NSLocalizedString("vwz-d3-2Bi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: In publishing and graphic design, lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document without relying on meaningful content. Replacing the actual content with 
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func brGWHUh4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BrG-WH-uh4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BrG-WH-uh4.text"
        }

        return NSLocalizedString("BrG-WH-uh4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: John Doe
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yKgKaXsqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YKg-Ka-Xsq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YKg-Ka-Xsq.text"
        }

        return NSLocalizedString("YKg-Ka-Xsq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ezJpI6BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ez-jp-I6B.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4Ez-jp-I6B.text"
        }

        return NSLocalizedString("4Ez-jp-I6B.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func linVc3NfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lin-vc-3Nf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lin-vc-3Nf.text"
        }

        return NSLocalizedString("Lin-vc-3Nf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func t5LB8azText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5t5-lB-8az.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5t5-lB-8az.text"
        }

        return NSLocalizedString("5t5-lB-8az.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func b2H1FMDwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B2H-1F-MDw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "B2H-1F-MDw.text"
        }

        return NSLocalizedString("B2H-1F-MDw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func e7nZUAdrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E7n-ZU-adr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "E7n-ZU-adr.text"
        }

        return NSLocalizedString("E7n-ZU-adr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func eOkGEGdaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EOk-GE-Gda.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EOk-GE-Gda.text"
        }

        return NSLocalizedString("EOk-GE-Gda.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fULXKTYuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fUL-xK-TYu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fUL-xK-TYu.text"
        }

        return NSLocalizedString("fUL-xK-TYu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gIUEbNRnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gIU-eb-nRn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gIU-eb-nRn.text"
        }

        return NSLocalizedString("gIU-eb-nRn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gJEPgJUqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gJE-pg-jUq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gJE-pg-jUq.text"
        }

        return NSLocalizedString("gJE-pg-jUq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jUxOfImDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jUx-of-imD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jUx-of-imD.text"
        }

        return NSLocalizedString("jUx-of-imD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kd2KrZ5IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kd2-kr-z5I.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kd2-kr-z5I.text"
        }

        return NSLocalizedString("Kd2-kr-z5I.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mvZBNBsqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MvZ-bN-bsq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MvZ-bN-bsq.text"
        }

        return NSLocalizedString("MvZ-bN-bsq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rG6RK7pKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rG6-RK-7pK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rG6-RK-7pK.text"
        }

        return NSLocalizedString("rG6-RK-7pK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func tn334KRbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tn3-34-KRb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tn3-34-KRb.text"
        }

        return NSLocalizedString("tn3-34-KRb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func u0GYdVhnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("U0G-yd-Vhn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "U0G-yd-Vhn.text"
        }

        return NSLocalizedString("U0G-yd-Vhn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func upsXnP5dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UPS-xn-P5d.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UPS-xn-P5d.text"
        }

        return NSLocalizedString("UPS-xn-P5d.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yE7W4UAZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yE7-w4-UAZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yE7-w4-UAZ.text"
        }

        return NSLocalizedString("yE7-w4-UAZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func d0QZ6JZZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d0Q-z6-jZZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "d0Q-z6-jZZ.text"
        }

        return NSLocalizedString("d0Q-z6-jZZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Lable
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jc0FiJDMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JC0-fi-jDM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JC0-fi-jDM.text"
        }

        return NSLocalizedString("JC0-fi-jDM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Laundry
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xLlJpYV8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XLl-Jp-yV8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XLl-Jp-yV8.text"
        }

        return NSLocalizedString("XLl-Jp-yV8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func paNHETiCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paN-HE-tiC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "paN-HE-tiC.text"
        }

        return NSLocalizedString("paN-HE-tiC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yaYM57cCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yaY-m5-7cC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yaY-m5-7cC.text"
        }

        return NSLocalizedString("yaY-m5-7cC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zkG3WDA3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zkG-3W-dA3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zkG-3W-dA3.text"
        }

        return NSLocalizedString("zkG-3W-dA3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Log in And Sign Up
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bbNQ0I23NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BbN-Q0-i23.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BbN-Q0-i23.normalTitle"
        }

        return NSLocalizedString("BbN-Q0-i23.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Looking for food delivery?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ns7VKZCqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NS7-vK-ZCq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NS7-vK-ZCq.text"
        }

        return NSLocalizedString("NS7-vK-ZCq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: MAP
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gl02KHQdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gl0-2K-HQd.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gl0-2K-HQd.normalTitle"
        }

        return NSLocalizedString("gl0-2K-HQd.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: MENU
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func e2fE0IjPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e2f-E0-ijP.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e2f-E0-ijP.normalTitle"
        }

        return NSLocalizedString("e2f-E0-ijP.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Min Delivery Time
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aIpYoGvAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aIp-Yo-gvA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aIp-Yo-gvA.text"
        }

        return NSLocalizedString("aIp-Yo-gvA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Min Delivery Time
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sqq1NUslText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sqq-1N-usl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sqq-1N-usl.text"
        }

        return NSLocalizedString("sqq-1N-usl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Minimum booking : 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func baf2ZQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("63B-aF-2ZQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "63B-aF-2ZQ.text"
        }

        return NSLocalizedString("63B-aF-2ZQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Minimum order
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func qNVJYRMJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qNV-jY-RMJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qNV-jY-RMJ.text"
        }

        return NSLocalizedString("qNV-jY-RMJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Minimum order
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wED5VFkhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wED-5V-Fkh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wED-5V-Fkh.text"
        }

        return NSLocalizedString("wED-5V-Fkh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: More
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func btfAiUDoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btf-ai-uDo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "btf-ai-uDo.text"
        }

        return NSLocalizedString("btf-ai-uDo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My review
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aMgJoDtJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aMg-jo-DtJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aMg-jo-DtJ.text"
        }

        return NSLocalizedString("aMg-jo-DtJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My review
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kcJDNQVNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kcJ-DN-qVN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kcJ-DN-qVN.text"
        }

        return NSLocalizedString("kcJ-DN-qVN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func cnR3MDQxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CnR-3M-dQx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CnR-3M-dQx.text"
        }

        return NSLocalizedString("CnR-3M-dQx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fPEGBF4dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fPE-gB-f4d.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fPE-gB-f4d.text"
        }

        return NSLocalizedString("fPE-gB-f4d.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gh3Ph0h9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gh3-ph-0h9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gh3-ph-0h9.text"
        }

        return NSLocalizedString("Gh3-ph-0h9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gup3kOoTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gup-3k-ooT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gup-3k-ooT.text"
        }

        return NSLocalizedString("Gup-3k-ooT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gxCESCm6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GxC-ES-Cm6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GxC-ES-Cm6.text"
        }

        return NSLocalizedString("GxC-ES-Cm6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func h1pE3WWEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h1p-E3-WWE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h1p-E3-WWE.text"
        }

        return NSLocalizedString("h1p-E3-WWE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func iYSDcDeBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iYS-Dc-deB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iYS-Dc-deB.text"
        }

        return NSLocalizedString("iYS-Dc-deB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jFJfKjcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9jF-Jf-kjc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9jF-Jf-kjc.text"
        }

        return NSLocalizedString("9jF-Jf-kjc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kBqAfMOgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kBq-af-MOg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kBq-af-MOg.text"
        }

        return NSLocalizedString("kBq-af-MOg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func m74AsG8fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M74-as-g8f.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "M74-as-g8f.text"
        }

        return NSLocalizedString("M74-as-g8f.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mM7SZZJcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mM7-SZ-zJc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mM7-SZ-zJc.text"
        }

        return NSLocalizedString("mM7-SZ-zJc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func phaLJVgKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pha-lJ-vgK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pha-lJ-vgK.text"
        }

        return NSLocalizedString("pha-lJ-vgK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func psfAiENvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Psf-Ai-eNv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Psf-Ai-eNv.text"
        }

        return NSLocalizedString("Psf-Ai-eNv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func r2kIkF1jNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R2k-Ik-F1j.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "R2k-Ik-F1j.normalTitle"
        }

        return NSLocalizedString("R2k-Ik-F1j.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func r47ODDpTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R47-OD-DpT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "R47-OD-DpT.text"
        }

        return NSLocalizedString("R47-OD-DpT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rbwIrPAcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RBW-ir-pAc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RBW-ir-pAc.text"
        }

        return NSLocalizedString("RBW-ir-pAc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func s09TL1XNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s09-tL-1XN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "s09-tL-1XN.text"
        }

        return NSLocalizedString("s09-tL-1XN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func su5A3FO3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("su5-a3-fO3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "su5-a3-fO3.text"
        }

        return NSLocalizedString("su5-a3-fO3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func uzhxkAmkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UZH-xK-amk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UZH-xK-amk.text"
        }

        return NSLocalizedString("UZH-xK-amk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xCz285ajText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xCz-28-5aj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xCz-28-5aj.text"
        }

        return NSLocalizedString("xCz-28-5aj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xgsEYSz5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xgs-EY-Sz5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xgs-EY-Sz5.text"
        }

        return NSLocalizedString("xgs-EY-Sz5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func y3RZkZdRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y3R-zk-ZdR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y3R-zk-ZdR.text"
        }

        return NSLocalizedString("Y3R-zk-ZdR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yf8LgJF3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yf8-Lg-JF3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yf8-Lg-JF3.text"
        }

        return NSLocalizedString("yf8-Lg-JF3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yshCnXg1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ysh-cn-xg1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ysh-cn-xg1.text"
        }

        return NSLocalizedString("Ysh-cn-xg1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func eYzK8GQKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EYz-k8-GQK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EYz-k8-GQK.text"
        }

        return NSLocalizedString("EYz-k8-GQK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No Data Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ecYPQTRsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EcY-PQ-tRs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EcY-PQ-tRs.text"
        }

        return NSLocalizedString("EcY-PQ-tRs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No Data Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func r8FKxUQEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R8F-Kx-UQE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "R8F-Kx-UQE.text"
        }

        return NSLocalizedString("R8F-Kx-UQE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No Data Found!
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ppsNbQXgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pps-nb-QXg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pps-nb-QXg.text"
        }

        return NSLocalizedString("pps-nb-QXg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No Suppliers Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fjZ6w76fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FjZ-6w-76f.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FjZ-6w-76f.text"
        }

        return NSLocalizedString("FjZ-6w-76f.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: No Suppliers Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func h2vHpKvwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h2v-Hp-Kvw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h2v-Hp-Kvw.text"
        }

        return NSLocalizedString("h2v-Hp-Kvw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: North Indian, Chinese, Rolls, South Indian
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func nu7I5LSDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nu7-i5-lSD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nu7-i5-lSD.text"
        }

        return NSLocalizedString("nu7-i5-lSD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: North Indian, Chinese, Rolls, South Indian
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func o6HG3X4pText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o6H-G3-x4p.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o6H-G3-x4p.text"
        }

        return NSLocalizedString("o6H-G3-x4p.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func cufTPDYzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cuf-TP-dYz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cuf-TP-dYz.text"
        }

        return NSLocalizedString("cuf-TP-dYz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rA9ZJJWjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rA9-ZJ-JWj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rA9-ZJ-JWj.text"
        }

        return NSLocalizedString("rA9-ZJ-JWj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Nothing Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zUsV5J7kText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZUs-v5-J7k.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZUs-v5-J7k.text"
        }

        return NSLocalizedString("ZUs-v5-J7k.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order food online from Sagar Ratna to enjoy food at your home.
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gIzDZO6yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gIz-DZ-o6y.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gIz-DZ-o6y.text"
        }

        return NSLocalizedString("gIz-DZ-o6y.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Orders done so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func h2C9qDqeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h2C-9q-dqe.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h2C-9q-dqe.text"
        }

        return NSLocalizedString("h2C-9q-dqe.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Orders done so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func if0pUvnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4If-0p-Uvn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4If-0p-Uvn.text"
        }

        return NSLocalizedString("4If-0p-Uvn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Other Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dIVo1RuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1dI-vo-1Ru.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1dI-vo-1Ru.text"
        }

        return NSLocalizedString("1dI-vo-1Ru.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Other Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func emdTaUMNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emd-Ta-uMN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "emd-Ta-uMN.text"
        }

        return NSLocalizedString("emd-Ta-uMN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dntKGScMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dnt-kG-scM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dnt-kG-scM.text"
        }

        return NSLocalizedString("dnt-kG-scM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Out Of Stock
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rFH6cDfqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rFH-6c-Dfq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rFH-6c-Dfq.text"
        }

        return NSLocalizedString("rFH-6c-Dfq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: PICK-UP TIME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fTVFw5sFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fTV-Fw-5sF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fTV-Fw-5sF.text"
        }

        return NSLocalizedString("fTV-Fw-5sF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: PLACE ORDER
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func v4gOJMKLNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v4g-oJ-mKL.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v4g-oJ-mKL.normalTitle"
        }

        return NSLocalizedString("v4g-oJ-mKL.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: PRODUCT DETAIL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func tfrVhKSiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TFR-vh-kSi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TFR-vh-kSi.text"
        }

        return NSLocalizedString("TFR-vh-kSi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Packages
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gxO6GgUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7gx-o6-ggU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7gx-o6-ggU.text"
        }

        return NSLocalizedString("7gx-o6-ggU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pay Using
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ljzUbQipText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LJZ-Ub-qip.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LJZ-Ub-qip.text"
        }

        return NSLocalizedString("LJZ-Ub-qip.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Payment Summary
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kVgEKyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("18K-Vg-eKy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "18K-Vg-eKy.text"
        }

        return NSLocalizedString("18K-Vg-eKy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Payment methods
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func oahPqQdCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oah-pq-qdC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Oah-pq-qdC.text"
        }

        return NSLocalizedString("Oah-pq-qdC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Payment methods
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ve2FvFwmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ve2-fv-Fwm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ve2-fv-Fwm.text"
        }

        return NSLocalizedString("Ve2-fv-Fwm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func qAeVVCLnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qAe-VV-cLn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qAe-VV-cLn.normalTitle"
        }

        return NSLocalizedString("qAe-VV-cLn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pickup Detail
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vnqArBsAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vnq-ar-BsA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vnq-ar-BsA.text"
        }

        return NSLocalizedString("Vnq-ar-BsA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Plato
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func n6qWe6goNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n6q-we-6go.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "n6q-we-6go.normalTitle"
        }

        return NSLocalizedString("n6q-we-6go.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Posted 2 days ago
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bqu58k2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5BQ-u5-8k2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5BQ-u5-8k2.text"
        }

        return NSLocalizedString("5BQ-u5-8k2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func atuS9PzWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("atu-s9-PzW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "atu-s9-PzW.text"
        }

        return NSLocalizedString("atu-s9-PzW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sQCScUQyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sQC-sc-uQy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sQC-sc-uQy.text"
        }

        return NSLocalizedString("sQC-sc-uQy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func uNbJ6LqWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UNb-j6-lqW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UNb-j6-lqW.text"
        }

        return NSLocalizedString("UNb-j6-lqW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Low High 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ufNFET3nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ufN-fE-T3n.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ufN-fE-T3n.text"
        }

        return NSLocalizedString("ufN-fE-T3n.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Range 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hIpZgJ29Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HIp-Zg-j29.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HIp-Zg-j29.text"
        }

        return NSLocalizedString("HIp-Zg-j29.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Description
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func oWUKN3ZTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oWU-KN-3ZT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "oWU-KN-3ZT.text"
        }

        return NSLocalizedString("oWU-KN-3ZT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Detail
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func svOKPPWxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SvO-kP-pWx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SvO-kP-pWx.text"
        }

        return NSLocalizedString("SvO-kP-pWx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Products
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func w2sE5CQBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w2s-E5-CQB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "w2s-E5-CQB.normalTitle"
        }

        return NSLocalizedString("w2s-E5-CQB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: REVIEWS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ct5BdWSeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ct5-bd-wSe.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ct5-bd-wSe.normalTitle"
        }

        return NSLocalizedString("ct5-bd-wSe.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: REVIEWS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func o4kQtCjiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o4k-Qt-Cji.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o4k-Qt-Cji.normalTitle"
        }

        return NSLocalizedString("o4k-Qt-Cji.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rate Product
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wjwypk7ENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WJW-yP-K7E.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WJW-yP-K7E.normalTitle"
        }

        return NSLocalizedString("WJW-yP-K7E.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rate Supplier
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hUOAhFAINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hUO-ah-fAI.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hUO-ah-fAI.normalTitle"
        }

        return NSLocalizedString("hUO-ah-fAI.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rate Supplier
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func v3kVpD7rNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V3k-vp-D7r.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "V3k-vp-D7r.normalTitle"
        }

        return NSLocalizedString("V3k-vp-D7r.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rating & Reviews
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func y4IRU7KbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y4I-rU-7Kb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "y4I-rU-7Kb.text"
        }

        return NSLocalizedString("y4I-rU-7Kb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Remove from Wish List
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aYYY2L2MSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aYY-y2-l2M.selectedTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aYY-y2-l2M.selectedTitle"
        }

        return NSLocalizedString("aYY-y2-l2M.selectedTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rental Policy
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func u17Bz7aCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("u17-Bz-7aC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "u17-Bz-7aC.text"
        }

        return NSLocalizedString("u17-Bz-7aC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func pLn0U8sHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PLn-0U-8sH.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PLn-0U-8sH.normalTitle"
        }

        return NSLocalizedString("PLn-0U-8sH.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SUPPLIER DETAILS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bTmKpTStText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BTm-Kp-tSt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BTm-Kp-tSt.text"
        }

        return NSLocalizedString("BTm-Kp-tSt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save & Proceed
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rZdJkJyuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RZd-jk-Jyu.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RZd-jk-Jyu.normalTitle"
        }

        return NSLocalizedString("RZd-jk-Jyu.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func c0MWCrQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6C0-MW-CrQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6C0-MW-CrQ.text"
        }

        return NSLocalizedString("6C0-MW-CrQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fXdLuZoaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FXd-lu-Zoa.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FXd-lu-Zoa.placeholder"
        }

        return NSLocalizedString("FXd-lu-Zoa.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yCwClD7gNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yCw-cl-D7g.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yCw-cl-D7g.normalTitle"
        }

        return NSLocalizedString("yCw-cl-D7g.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func cTBOf5cnPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cTB-of-5cn.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cTB-of-5cn.placeholder"
        }

        return NSLocalizedString("cTB-of-5cn.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ejeUz4slNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eje-Uz-4sl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Eje-Uz-4sl.normalTitle"
        }

        return NSLocalizedString("Eje-Uz-4sl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func qTqNu1pFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qTq-nu-1pF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qTq-nu-1pF.text"
        }

        return NSLocalizedString("qTq-nu-1pF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search for your location...
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ioFPMUJ8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ioF-pM-uJ8.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ioF-pM-uJ8.placeholder"
        }

        return NSLocalizedString("ioF-pM-uJ8.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func a0gR8P0JText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a0g-R8-p0J.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "a0g-R8-p0J.text"
        }

        return NSLocalizedString("a0g-R8-p0J.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func d5VBTKLAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d5V-bT-kLA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "d5V-bT-kLA.text"
        }

        return NSLocalizedString("d5V-bT-kLA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select location
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fuOKQE78NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fuO-kQ-e78.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fuO-kQ-e78.normalTitle"
        }

        return NSLocalizedString("fuO-kQ-e78.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Self Pickup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func xIsNDJzdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xIs-nD-Jzd.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xIs-nD-Jzd.normalTitle"
        }

        return NSLocalizedString("xIs-nD-Jzd.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Shop By Type
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wtu6O6bxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wtu-6O-6bx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Wtu-6O-6bx.text"
        }

        return NSLocalizedString("Wtu-6O-6bx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Size Chart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func waJMONE1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WaJ-MO-nE1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WaJ-MO-nE1.text"
        }

        return NSLocalizedString("WaJ-MO-nE1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Soretd By
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func me0mCYRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Me-0m-cYR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4Me-0m-cYR.text"
        }

        return NSLocalizedString("4Me-0m-cYR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Soretd By
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yoCD2ZJNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YoC-d2-zJN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YoC-d2-zJN.text"
        }

        return NSLocalizedString("YoC-d2-zJN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sort & Filter
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yP9BOGwMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yP9-bO-GwM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yP9-bO-GwM.text"
        }

        return NSLocalizedString("yP9-bO-GwM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Steve Jons
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lwAK0E6cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lwA-K0-e6c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lwA-K0-e6c.text"
        }

        return NSLocalizedString("lwA-K0-e6c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Suppliers
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func djxUwOvhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Djx-uw-ovh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Djx-uw-ovh.text"
        }

        return NSLocalizedString("Djx-uw-ovh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Suppliers
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func plUiTa7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Pl-ui-Ta7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9Pl-ui-Ta7.text"
        }

        return NSLocalizedString("9Pl-ui-Ta7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Suppliers
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func q4zJiFeENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q4z-Ji-feE.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "q4z-Ji-feE.normalTitle"
        }

        return NSLocalizedString("q4z-Ji-feE.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dUeC38UpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dUe-c3-8Up.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dUe-c3-8Up.text"
        }

        return NSLocalizedString("dUe-c3-8Up.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UNIQUENESS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bI9TRR0nNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bI9-TR-R0n.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bI9-TR-R0n.normalTitle"
        }

        return NSLocalizedString("bI9-TR-R0n.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UNIQUENESS
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func k4pFFXfMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K4p-fF-XfM.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "K4p-fF-XfM.normalTitle"
        }

        return NSLocalizedString("K4p-fF-XfM.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: USD 
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func yBRLzLsaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yBR-lz-lsa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yBR-lz-lsa.text"
        }

        return NSLocalizedString("yBR-lz-lsa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aEGW8FdrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aEG-w8-Fdr.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aEG-w8-Fdr.normalTitle"
        }

        return NSLocalizedString("aEG-w8-Fdr.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func dceNyOKrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dce-Ny-oKr.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dce-Ny-oKr.normalTitle"
        }

        return NSLocalizedString("dce-Ny-oKr.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gYvFohNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("07g-Yv-foh.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "07g-Yv-foh.normalTitle"
        }

        return NSLocalizedString("07g-Yv-foh.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lTtQtDH9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LTt-Qt-DH9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LTt-Qt-DH9.normalTitle"
        }

        return NSLocalizedString("LTt-Qt-DH9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rSMYoA10NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rSM-yo-A10.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rSM-yo-A10.normalTitle"
        }

        return NSLocalizedString("rSM-yo-A10.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rUhFQMRHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rUh-FQ-MRH.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rUh-FQ-MRH.normalTitle"
        }

        return NSLocalizedString("rUh-FQ-MRH.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: View Detail
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bs1UjRhlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bs1-Uj-rhl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bs1-Uj-rhl.normalTitle"
        }

        return NSLocalizedString("bs1-Uj-rhl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: View Menu
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func cRgFrqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("96C-Rg-frq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "96C-Rg-frq.normalTitle"
        }

        return NSLocalizedString("96C-Rg-frq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: View food items as
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func rpjhvxgrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RPJ-hV-xGR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RPJ-hV-xGR.text"
        }

        return NSLocalizedString("RPJ-hV-xGR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: View products as
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hzhWgAm3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hzh-Wg-am3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Hzh-Wg-am3.text"
        }

        return NSLocalizedString("Hzh-Wg-am3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: We're not quite where you are yet, please change the location to see Marketplace!
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func kEB2d9GoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kEB-2d-9Go.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kEB-2d-9Go.text"
        }

        return NSLocalizedString("kEB-2d-9Go.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bo6RR2bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0BO-6R-r2b.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0BO-6R-r2b.text"
        }

        return NSLocalizedString("0BO-6R-r2b.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bhW2YZaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7bh-W2-yZa.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7bh-W2-yZa.placeholder"
        }

        return NSLocalizedString("7bh-W2-yZa.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bmAYFSefPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BmA-yF-Sef.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BmA-yF-Sef.placeholder"
        }

        return NSLocalizedString("BmA-yF-Sef.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ebYPnDNRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EbY-pn-DNR.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EbY-pn-DNR.placeholder"
        }

        return NSLocalizedString("EbY-pn-DNR.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func j9eAcJsvPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J9e-Ac-jsv.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J9e-Ac-jsv.placeholder"
        }

        return NSLocalizedString("J9e-Ac-jsv.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lKFf0FSPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7lK-Ff-0FS.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7lK-Ff-0FS.placeholder"
        }

        return NSLocalizedString("7lK-Ff-0FS.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wjiT4BP6Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wji-t4-BP6.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wji-t4-BP6.placeholder"
        }

        return NSLocalizedString("wji-t4-BP6.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hij5R98tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hij-5R-98t.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hij-5R-98t.text"
        }

        return NSLocalizedString("hij-5R-98t.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: With Driver
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func jp4BJ6EgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jp4-bJ-6Eg.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Jp4-bJ-6Eg.normalTitle"
        }

        return NSLocalizedString("Jp4-bJ-6Eg.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Without Driver
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func raoEZRR8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rao-EZ-rR8.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rao-EZ-rR8.normalTitle"
        }

        return NSLocalizedString("rao-EZ-rR8.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: YOUR LOCATION
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func oZcRuPvNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oZc-Ru-pvN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "oZc-Ru-pvN.text"
        }

        return NSLocalizedString("oZc-Ru-pvN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: desc
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ezONmKYIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ezO-nm-KYI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ezO-nm-KYI.text"
        }

        return NSLocalizedString("ezO-nm-KYI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfgdf
      ///
      /// Locales: ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func elT9ZQHEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("elT-9Z-qHE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "elT-9Z-qHE.text"
        }

        return NSLocalizedString("elT-9Z-qHE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func bINUeWoGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bIN-Ue-woG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bIN-Ue-woG.text"
        }

        return NSLocalizedString("bIN-Ue-woG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func gFWEHY6xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gFW-eH-Y6x.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gFW-eH-Y6x.text"
        }

        return NSLocalizedString("gFW-eH-Y6x.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ik5PnYuRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ik5-Pn-YuR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ik5-Pn-YuR.text"
        }

        return NSLocalizedString("Ik5-Pn-YuR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfvfdgfdgfd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wkvSwDssText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WKV-Sw-dss.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WKV-Sw-dss.text"
        }

        return NSLocalizedString("WKV-Sw-dss.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dsadadasd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func ws3UMsaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Ws-3U-Msa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2Ws-3U-Msa.text"
        }

        return NSLocalizedString("2Ws-3U-Msa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fdsaf adsf ds f ads fds af asd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mxsYEHCIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mxs-YE-hCI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mxs-YE-hCI.text"
        }

        return NSLocalizedString("mxs-YE-hCI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fdsaf s f asf ds f dsf ds f dsf ds fd sf ds f ds fs
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func hNBFVHhfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hNB-FV-Hhf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hNB-FV-Hhf.text"
        }

        return NSLocalizedString("hNB-FV-Hhf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fdsffdsfsd
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func nxkMOXIVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nxk-MO-XIV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nxk-MO-XIV.text"
        }

        return NSLocalizedString("nxk-MO-XIV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fdsfsdf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func wDHY685bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wDH-y6-85b.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wDH-y6-85b.text"
        }

        return NSLocalizedString("wDH-y6-85b.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fff
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func zyenb48CText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZYE-NB-48C.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZYE-NB-48C.text"
        }

        return NSLocalizedString("ZYE-NB-48C.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fgdgfsdg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func fSMWCWhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2fS-MW-CWh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2fS-MW-CWh.text"
        }

        return NSLocalizedString("2fS-MW-CWh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fgdgfsdg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func qmYGnOMVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qmY-gn-oMV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qmY-gn-oMV.text"
        }

        return NSLocalizedString("qmY-gn-oMV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: fgdgfsdg
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func k4MkHUIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7k4-mk-hUI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7k4-mk-hUI.text"
        }

        return NSLocalizedString("7k4-mk-hUI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func aHOUSZfbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aHO-uS-Zfb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aHO-uS-Zfb.text"
        }

        return NSLocalizedString("aHO-uS-Zfb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func mWxXsJVGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MWx-Xs-JVG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MWx-Xs-JVG.text"
        }

        return NSLocalizedString("MWx-Xs-JVG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func uJSY2cVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0uJ-sY-2cV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0uJ-sY-2cV.text"
        }

        return NSLocalizedString("0uJ-sY-2cV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: gfdgdfgfgdfgdsfg
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func sMnGd0f0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMn-Gd-0f0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SMn-Gd-0f0.text"
        }

        return NSLocalizedString("SMn-Gd-0f0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func cUcWKSQpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CUc-wK-SQp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CUc-wK-SQp.text"
        }

        return NSLocalizedString("CUc-wK-SQp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func msVGfXuPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("msV-gf-xuP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "msV-gf-xuP.text"
        }

        return NSLocalizedString("msV-gf-xuP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func n9SEFRUUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N9S-eF-RUU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N9S-eF-RUU.text"
        }

        return NSLocalizedString("N9S-eF-RUU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: hgfghgfhfhgfhgf
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func lqj6aWaGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lqj-6a-WaG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lqj-6a-WaG.text"
        }

        return NSLocalizedString("lqj-6a-WaG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: sadfsfdsfsdfsdfjsd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vpFVOUWpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VpF-vO-UWp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VpF-vO-UWp.text"
        }

        return NSLocalizedString("VpF-vO-UWp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: sdsadasdasd
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, zh-Hans, si-LK, sq
      static func vsBd2A9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Vs-bd-2A9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2Vs-bd-2A9.text"
        }

        return NSLocalizedString("2Vs-bd-2A9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.newTemplateLoginSignUp` struct is generated, and contains static references to 59 localization keys.
    struct newTemplateLoginSignUp {
      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let bvv0pBIeText = Rswift.StringResource(key: "bvv-0p-BIe.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ov5KDNMcText = Rswift.StringResource(key: "OV5-KD-nMc.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rmxhbHeoText = Rswift.StringResource(key: "RMX-hB-heo.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let sHtIREHcText = Rswift.StringResource(key: "SHt-iR-EHc.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 01 : 59
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let daLRHOpeText = Rswift.StringResource(key: "daL-RH-ope.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 4 digit code
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kBoMUVAWPlaceholder = Rswift.StringResource(key: "kBo-MU-VAW.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Add Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let liTFeKqUText = Rswift.StringResource(key: "liT-Fe-kqU.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Anahuac University
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vqwxngl7Text = Rswift.StringResource(key: "VQW-xN-GL7.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book a cab instantly or schedule it according to your needs. to your needs. 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let k1G519pOText = Rswift.StringResource(key: "K1G-51-9pO.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Book or Schedule a Taxi
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yMcFpXCcText = Rswift.StringResource(key: "yMc-fp-xCc.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: By signing up, you agree to our
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dSkK2B8lText = Rswift.StringResource(key: "dSk-k2-b8l.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: By signing up, you agree to our
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pONKn2kqText = Rswift.StringResource(key: "pON-kn-2kq.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ycMI8EZoPlaceholder = Rswift.StringResource(key: "ycM-i8-EZo.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Continue with Apple  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let f6AKC3Q4NormalTitle = Rswift.StringResource(key: "f6A-kC-3Q4.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Continue with Facebook  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let u8uHBHHpNormalTitle = Rswift.StringResource(key: "u8u-HB-hHp.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Continue with Google  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fa16JAMNormalTitle = Rswift.StringResource(key: "3fa-16-jAM.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Didn’t receive your code?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mLpADXLdText = Rswift.StringResource(key: "mLp-aD-xLd.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Don’t have an account?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let iRd5nEMHText = Rswift.StringResource(key: "iRd-5n-EMH.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dwkRbISfSegmentTitles1 = Rswift.StringResource(key: "Dwk-Rb-ISf.segmentTitles[1]", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kPnQeZvCNormalTitle = Rswift.StringResource(key: "kPn-Qe-ZvC.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let winDzB7bNormalTitle = Rswift.StringResource(key: "WIN-dz-b7b.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID Number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dTqVX8UZPlaceholder = Rswift.StringResource(key: "dTq-vX-8UZ.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Institutional Account  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mLLUbRCuNormalTitle = Rswift.StringResource(key: "mLL-ub-rCu.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Institutional Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pjSF50ZPlaceholder = Rswift.StringResource(key: "5pj-SF-50Z.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Institution’s Credential
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vExIKMWtText = Rswift.StringResource(key: "VEx-IK-mWt.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Login to moby
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let io38KPnTText = Rswift.StringResource(key: "IO3-8K-PnT.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Login to moby
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let uufn2ZYrText = Rswift.StringResource(key: "UUF-n2-zYr.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Login with
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rMsMNIqIText = Rswift.StringResource(key: "rMs-MN-iqI.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Login with Phone or Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wkR7C0jNormalTitle = Rswift.StringResource(key: "5wk-r7-c0j.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let awRKuA0lPlaceholder = Rswift.StringResource(key: "AwR-ku-a0l.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let azijSs2Placeholder = Rswift.StringResource(key: "4AZ-iJ-ss2.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let v9zEaEMePlaceholder = Rswift.StringResource(key: "V9z-ea-EMe.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dwkRbISfSegmentTitles0 = Rswift.StringResource(key: "Dwk-Rb-ISf.segmentTitles[0]", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let anwUCZc8Placeholder = Rswift.StringResource(key: "anw-UC-zc8.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ddgk3YV7Placeholder = Rswift.StringResource(key: "DDG-k3-YV7.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let owhBzYwMPlaceholder = Rswift.StringResource(key: "OWH-Bz-YwM.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let thh9M7IXPlaceholder = Rswift.StringResource(key: "THH-9M-7IX.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Privacy Policy.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eeVCSNp5NormalTitle = Rswift.StringResource(key: "eeV-CS-np5.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Privacy Policy.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let us2a9rXNormalTitle = Rswift.StringResource(key: "4us-2a-9rX.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Remember me
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hcZVWKSdNormalTitle = Rswift.StringResource(key: "hcZ-vW-kSd.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Remember me
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hcZVWKSdSelectedTitle = Rswift.StringResource(key: "hcZ-vW-kSd.selectedTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Resend otp
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let sAZGg4a0NormalTitle = Rswift.StringResource(key: "sAZ-gg-4a0.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select Institution name
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let xWEGKSC4Placeholder = Rswift.StringResource(key: "xWE-gK-sC4.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select Your Institution type
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let obaFsZekPlaceholder = Rswift.StringResource(key: "Oba-fs-zek.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let yfTWb7iiNormalTitle = Rswift.StringResource(key: "YfT-Wb-7ii.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Sign up for moby Institution Account
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nahS39lhText = Rswift.StringResource(key: "nah-S3-9lh.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Take a picture
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nYOoFAzText = Rswift.StringResource(key: "9nY-oo-fAz.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Terms of service
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let c8GSUEbVNormalTitle = Rswift.StringResource(key: "c8G-sU-EbV.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Terms of service
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let m083c4DiNormalTitle = Rswift.StringResource(key: "M08-3c-4Di.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cXWVuWOzText = Rswift.StringResource(key: "cXW-vu-wOz.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dzNUwLzZText = Rswift.StringResource(key: "DzN-Uw-lzZ.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gbwRbU4bText = Rswift.StringResource(key: "GBW-Rb-U4b.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qK8ZwH1TText = Rswift.StringResource(key: "qK8-Zw-H1T.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Username or email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jnuO6NzPPlaceholder = Rswift.StringResource(key: "Jnu-O6-NzP.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Username or email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rrvnig8uPlaceholder = Rswift.StringResource(key: "RRV-nI-g8u.placeholder", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eCM4vOlLText = Rswift.StringResource(key: "eCM-4v-olL.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: We sent you a code to +1 7392874901
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pvyMgWvjText = Rswift.StringResource(key: "Pvy-mg-Wvj.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let l7q7UDtoText = Rswift.StringResource(key: "l7q-7U-Dto.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qzlVYDTNText = Rswift.StringResource(key: "qzl-VY-dTN.text", tableName: "NewTemplateLoginSignUp", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)

      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func bvv0pBIeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bvv-0p-BIe.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "bvv-0p-BIe.text"
        }

        return NSLocalizedString("bvv-0p-BIe.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ov5KDNMcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OV5-KD-nMc.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "OV5-KD-nMc.text"
        }

        return NSLocalizedString("OV5-KD-nMc.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rmxhbHeoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RMX-hB-heo.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "RMX-hB-heo.text"
        }

        return NSLocalizedString("RMX-hB-heo.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func sHtIREHcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHt-iR-EHc.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "SHt-iR-EHc.text"
        }

        return NSLocalizedString("SHt-iR-EHc.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: 01 : 59
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func daLRHOpeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("daL-RH-ope.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "daL-RH-ope.text"
        }

        return NSLocalizedString("daL-RH-ope.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: 4 digit code
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kBoMUVAWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kBo-MU-VAW.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "kBo-MU-VAW.placeholder"
        }

        return NSLocalizedString("kBo-MU-VAW.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Add Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func liTFeKqUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("liT-Fe-kqU.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "liT-Fe-kqU.text"
        }

        return NSLocalizedString("liT-Fe-kqU.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Anahuac University
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vqwxngl7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VQW-xN-GL7.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "VQW-xN-GL7.text"
        }

        return NSLocalizedString("VQW-xN-GL7.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Book a cab instantly or schedule it according to your needs. to your needs. 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func k1G519pOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K1G-51-9pO.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "K1G-51-9pO.text"
        }

        return NSLocalizedString("K1G-51-9pO.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Book or Schedule a Taxi
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yMcFpXCcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yMc-fp-xCc.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "yMc-fp-xCc.text"
        }

        return NSLocalizedString("yMc-fp-xCc.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: By signing up, you agree to our
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dSkK2B8lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dSk-k2-b8l.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "dSk-k2-b8l.text"
        }

        return NSLocalizedString("dSk-k2-b8l.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: By signing up, you agree to our
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pONKn2kqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pON-kn-2kq.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "pON-kn-2kq.text"
        }

        return NSLocalizedString("pON-kn-2kq.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ycMI8EZoPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ycM-i8-EZo.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "ycM-i8-EZo.placeholder"
        }

        return NSLocalizedString("ycM-i8-EZo.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Continue with Apple  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func f6AKC3Q4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f6A-kC-3Q4.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "f6A-kC-3Q4.normalTitle"
        }

        return NSLocalizedString("f6A-kC-3Q4.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Continue with Facebook  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func u8uHBHHpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("u8u-HB-hHp.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "u8u-HB-hHp.normalTitle"
        }

        return NSLocalizedString("u8u-HB-hHp.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Continue with Google  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fa16JAMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3fa-16-jAM.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "3fa-16-jAM.normalTitle"
        }

        return NSLocalizedString("3fa-16-jAM.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Didn’t receive your code?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mLpADXLdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mLp-aD-xLd.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "mLp-aD-xLd.text"
        }

        return NSLocalizedString("mLp-aD-xLd.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Don’t have an account?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func iRd5nEMHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iRd-5n-EMH.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "iRd-5n-EMH.text"
        }

        return NSLocalizedString("iRd-5n-EMH.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dwkRbISfSegmentTitles1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dwk-Rb-ISf.segmentTitles[1]", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "Dwk-Rb-ISf.segmentTitles[1]"
        }

        return NSLocalizedString("Dwk-Rb-ISf.segmentTitles[1]", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kPnQeZvCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kPn-Qe-ZvC.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "kPn-Qe-ZvC.normalTitle"
        }

        return NSLocalizedString("kPn-Qe-ZvC.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func winDzB7bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WIN-dz-b7b.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "WIN-dz-b7b.normalTitle"
        }

        return NSLocalizedString("WIN-dz-b7b.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: ID Number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dTqVX8UZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dTq-vX-8UZ.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "dTq-vX-8UZ.placeholder"
        }

        return NSLocalizedString("dTq-vX-8UZ.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Institutional Account  
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mLLUbRCuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mLL-ub-rCu.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "mLL-ub-rCu.normalTitle"
        }

        return NSLocalizedString("mLL-ub-rCu.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Institutional Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pjSF50ZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5pj-SF-50Z.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "5pj-SF-50Z.placeholder"
        }

        return NSLocalizedString("5pj-SF-50Z.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Institution’s Credential
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vExIKMWtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VEx-IK-mWt.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "VEx-IK-mWt.text"
        }

        return NSLocalizedString("VEx-IK-mWt.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Login to moby
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func io38KPnTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IO3-8K-PnT.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "IO3-8K-PnT.text"
        }

        return NSLocalizedString("IO3-8K-PnT.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Login to moby
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func uufn2ZYrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UUF-n2-zYr.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "UUF-n2-zYr.text"
        }

        return NSLocalizedString("UUF-n2-zYr.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Login with
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rMsMNIqIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rMs-MN-iqI.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "rMs-MN-iqI.text"
        }

        return NSLocalizedString("rMs-MN-iqI.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Login with Phone or Email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wkR7C0jNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5wk-r7-c0j.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "5wk-r7-c0j.normalTitle"
        }

        return NSLocalizedString("5wk-r7-c0j.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func awRKuA0lPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AwR-ku-a0l.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "AwR-ku-a0l.placeholder"
        }

        return NSLocalizedString("AwR-ku-a0l.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func azijSs2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4AZ-iJ-ss2.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "4AZ-iJ-ss2.placeholder"
        }

        return NSLocalizedString("4AZ-iJ-ss2.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func v9zEaEMePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V9z-ea-EMe.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "V9z-ea-EMe.placeholder"
        }

        return NSLocalizedString("V9z-ea-EMe.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dwkRbISfSegmentTitles0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dwk-Rb-ISf.segmentTitles[0]", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "Dwk-Rb-ISf.segmentTitles[0]"
        }

        return NSLocalizedString("Dwk-Rb-ISf.segmentTitles[0]", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func anwUCZc8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("anw-UC-zc8.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "anw-UC-zc8.placeholder"
        }

        return NSLocalizedString("anw-UC-zc8.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ddgk3YV7Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DDG-k3-YV7.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "DDG-k3-YV7.placeholder"
        }

        return NSLocalizedString("DDG-k3-YV7.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func owhBzYwMPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OWH-Bz-YwM.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "OWH-Bz-YwM.placeholder"
        }

        return NSLocalizedString("OWH-Bz-YwM.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func thh9M7IXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("THH-9M-7IX.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "THH-9M-7IX.placeholder"
        }

        return NSLocalizedString("THH-9M-7IX.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eeVCSNp5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eeV-CS-np5.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "eeV-CS-np5.normalTitle"
        }

        return NSLocalizedString("eeV-CS-np5.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy.
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func us2a9rXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4us-2a-9rX.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "4us-2a-9rX.normalTitle"
        }

        return NSLocalizedString("4us-2a-9rX.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Remember me
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hcZVWKSdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hcZ-vW-kSd.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "hcZ-vW-kSd.normalTitle"
        }

        return NSLocalizedString("hcZ-vW-kSd.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Remember me
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hcZVWKSdSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hcZ-vW-kSd.selectedTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "hcZ-vW-kSd.selectedTitle"
        }

        return NSLocalizedString("hcZ-vW-kSd.selectedTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Resend otp
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func sAZGg4a0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sAZ-gg-4a0.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "sAZ-gg-4a0.normalTitle"
        }

        return NSLocalizedString("sAZ-gg-4a0.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Select Institution name
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func xWEGKSC4Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xWE-gK-sC4.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "xWE-gK-sC4.placeholder"
        }

        return NSLocalizedString("xWE-gK-sC4.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Select Your Institution type
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func obaFsZekPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oba-fs-zek.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "Oba-fs-zek.placeholder"
        }

        return NSLocalizedString("Oba-fs-zek.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func yfTWb7iiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YfT-Wb-7ii.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "YfT-Wb-7ii.normalTitle"
        }

        return NSLocalizedString("YfT-Wb-7ii.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Sign up for moby Institution Account
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nahS39lhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nah-S3-9lh.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "nah-S3-9lh.text"
        }

        return NSLocalizedString("nah-S3-9lh.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Take a picture
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nYOoFAzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9nY-oo-fAz.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "9nY-oo-fAz.text"
        }

        return NSLocalizedString("9nY-oo-fAz.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Terms of service
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func c8GSUEbVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c8G-sU-EbV.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "c8G-sU-EbV.normalTitle"
        }

        return NSLocalizedString("c8G-sU-EbV.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Terms of service
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func m083c4DiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M08-3c-4Di.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "M08-3c-4Di.normalTitle"
        }

        return NSLocalizedString("M08-3c-4Di.normalTitle", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cXWVuWOzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cXW-vu-wOz.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "cXW-vu-wOz.text"
        }

        return NSLocalizedString("cXW-vu-wOz.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dzNUwLzZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DzN-Uw-lzZ.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "DzN-Uw-lzZ.text"
        }

        return NSLocalizedString("DzN-Uw-lzZ.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gbwRbU4bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GBW-Rb-U4b.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "GBW-Rb-U4b.text"
        }

        return NSLocalizedString("GBW-Rb-U4b.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: USA
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qK8ZwH1TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qK8-Zw-H1T.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "qK8-Zw-H1T.text"
        }

        return NSLocalizedString("qK8-Zw-H1T.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Username or email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jnuO6NzPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jnu-O6-NzP.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "Jnu-O6-NzP.placeholder"
        }

        return NSLocalizedString("Jnu-O6-NzP.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Username or email
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rrvnig8uPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RRV-nI-g8u.placeholder", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "RRV-nI-g8u.placeholder"
        }

        return NSLocalizedString("RRV-nI-g8u.placeholder", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eCM4vOlLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eCM-4v-olL.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "eCM-4v-olL.text"
        }

        return NSLocalizedString("eCM-4v-olL.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: We sent you a code to +1 7392874901
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pvyMgWvjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pvy-mg-Wvj.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "Pvy-mg-Wvj.text"
        }

        return NSLocalizedString("Pvy-mg-Wvj.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func l7q7UDtoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l7q-7U-Dto.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "l7q-7U-Dto.text"
        }

        return NSLocalizedString("l7q-7U-Dto.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qzlVYDTNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qzl-VY-dTN.text", tableName: "NewTemplateLoginSignUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewTemplateLoginSignUp", preferredLanguages: preferredLanguages) else {
          return "qzl-VY-dTN.text"
        }

        return NSLocalizedString("qzl-VY-dTN.text", tableName: "NewTemplateLoginSignUp", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.options` struct is generated, and contains static references to 140 localization keys.
    struct options {
      /// en translation: (YOU WON'T REGRET IT)
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let lHn3tXEeText = Rswift.StringResource(key: "lHn-3t-xEe.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let o95kN9tText = Rswift.StringResource(key: "8O9-5k-N9t.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: 0 Reviews
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let dwxsd04Text = Rswift.StringResource(key: "2DW-XS-d04.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gMC68QVaText = Rswift.StringResource(key: "gMC-68-QVa.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: 1/2
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let bsn13TTqText = Rswift.StringResource(key: "Bsn-13-TTq.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: 100 AED
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let uaAHt7jaText = Rswift.StringResource(key: "uaA-Ht-7ja.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: ADD A TIP TO YOUR RIDER
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let aQDRaTVZText = Rswift.StringResource(key: "aQD-Ra-tVZ.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: ADD SOME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fmZGnPamText = Rswift.StringResource(key: "fmZ-Gn-pam.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: APPLY
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let qheGOQHwNormalTitle = Rswift.StringResource(key: "qhe-GO-QHw.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r7M3C3cNormalTitle = Rswift.StringResource(key: "4r7-m3-C3c.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Add Card
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let yyhUzIOANormalTitle = Rswift.StringResource(key: "YYH-uz-IOA.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Add Customization
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let yrOMK9fkText = Rswift.StringResource(key: "YrO-mK-9fk.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Add new
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let zyBDLCssNormalTitle = Rswift.StringResource(key: "zyB-DL-Css.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Add-ons
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let sOlXQZllText = Rswift.StringResource(key: "SOl-XQ-Zll.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: AddOn Charges
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let mJYTOWk4Text = Rswift.StringResource(key: "mJY-tO-wk4.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Additional Remarks
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let u5JNm5gbText = Rswift.StringResource(key: "U5J-nm-5gb.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Address & Landmark
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let yCb4KpPlaceholder = Rswift.StringResource(key: "02y-cb-4Kp.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Agent
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let zzpQbRVlText = Rswift.StringResource(key: "Zzp-Qb-RVl.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Agent to be booked:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let pQiF70S1Text = Rswift.StringResource(key: "pQi-F7-0S1.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r0eD98Z9NormalTitle = Rswift.StringResource(key: "r0e-d9-8Z9.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ohCJdHGKNormalTitle = Rswift.StringResource(key: "ohC-jd-HGK.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Apply Promo
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xVt8sB3LPlaceholder = Rswift.StringResource(key: "XVt-8s-b3L.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Apply Promo
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r3rZpLZoPlaceholder = Rswift.StringResource(key: "R3r-Zp-LZo.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Area
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fnkvu5e7Placeholder = Rswift.StringResource(key: "FNK-VU-5e7.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let bfwGc1rMNormalTitle = Rswift.StringResource(key: "Bfw-gc-1rM.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Building name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let yDyXIExEPlaceholder = Rswift.StringResource(key: "yDy-XI-exE.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Button isu yiugy ifugydiygidyg idyidfy hidyg uidg idfh fdh
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gdGVcYbXNormalTitle = Rswift.StringResource(key: "gdG-Vc-YbX.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let togXZ0hiText = Rswift.StringResource(key: "Tog-xZ-0hi.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: CHANGE
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let akwjqlflNormalTitle = Rswift.StringResource(key: "AKW-JQ-LFL.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: CLEAR
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ynYrSonNormalTitle = Rswift.StringResource(key: "5yn-yr-Son.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: CLEAR
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let eQ2K694gNormalTitle = Rswift.StringResource(key: "eQ2-K6-94g.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let geB29XKNormalTitle = Rswift.StringResource(key: "7ge-b2-9XK.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Cardholder's Name
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let zlAK2QpwPlaceholder = Rswift.StringResource(key: "zlA-k2-Qpw.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let f3QY70JuText = Rswift.StringResource(key: "f3Q-y7-0Ju.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Change Date & Time
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xvLPtCS8NormalTitle = Rswift.StringResource(key: "xvL-Pt-cS8.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Choose Booking Time Slot
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let hchSmOKANormalTitle = Rswift.StringResource(key: "HCH-sm-oKA.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: City
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let btJTY9IXPlaceholder = Rswift.StringResource(key: "btJ-TY-9IX.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Clear All
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let wiB3zFWBNormalTitle = Rswift.StringResource(key: "WiB-3z-FWB.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Click '+ Add new' to add an address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let eysQbPdfText = Rswift.StringResource(key: "eys-qb-pdf.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Compare Products
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let rb2KhEG9Text = Rswift.StringResource(key: "Rb2-kh-EG9.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let c1hHc99hPlaceholder = Rswift.StringResource(key: "c1h-hc-99h.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Customise your Food
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let naZZYbsText = Rswift.StringResource(key: "8Na-ZZ-Ybs.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: DELIVERY AT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let q0RRkJ6vText = Rswift.StringResource(key: "Q0R-rk-j6v.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Delivery Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let f3WTEA1WText = Rswift.StringResource(key: "f3W-tE-A1W.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let miEhgText = Rswift.StringResource(key: "391-mi-Ehg.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fIdFp12RText = Rswift.StringResource(key: "fId-Fp-12R.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Discount Voucher
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let uu5AqB6YText = Rswift.StringResource(key: "UU5-aq-B6Y.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Donate To Someone
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let mUJN8USWNormalTitle = Rswift.StringResource(key: "mUJ-N8-uSW.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ao35FVI5NormalTitle = Rswift.StringResource(key: "ao3-5F-VI5.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r4MTcCqsDisabledTitle = Rswift.StringResource(key: "r4M-tc-cqs.disabledTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r4MTcCqsNormalTitle = Rswift.StringResource(key: "r4M-tc-cqs.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Enter Promo
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let nwhBRIemPlaceholder = Rswift.StringResource(key: "Nwh-bR-Iem.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Favorites
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let sqHyCNUText = Rswift.StringResource(key: "4Sq-hy-CNU.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Fill Card Details
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let u1FNWuAText = Rswift.StringResource(key: "0u1-fN-wuA.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let dquEw4r0Text = Rswift.StringResource(key: "Dqu-ew-4r0.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Full Name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let yexZLVwRPlaceholder = Rswift.StringResource(key: "Yex-zL-vwR.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: House No/Plot No
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let a0IDbQBfPlaceholder = Rswift.StringResource(key: "a0I-db-qBf.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let a6ZPfCPzText = Rswift.StringResource(key: "a6Z-pf-CPz.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fn2GcCTkText = Rswift.StringResource(key: "FN2-Gc-CTk.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let kaX0TwyText = Rswift.StringResource(key: "8ka-x0-twy.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let os4AXDtoText = Rswift.StringResource(key: "OS4-AX-dto.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let z9NOCVwDText = Rswift.StringResource(key: "z9N-oC-VwD.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let c88LcSKCText = Rswift.StringResource(key: "c88-lc-sKC.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ezX8SSmText = Rswift.StringResource(key: "9Ez-x8-sSm.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gAsX8EppText = Rswift.StringResource(key: "gAs-x8-epp.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let jdKA048uText = Rswift.StringResource(key: "jdK-a0-48u.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let jlsLjBHAText = Rswift.StringResource(key: "Jls-Lj-BHA.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let owUn8XOText = Rswift.StringResource(key: "4Ow-Un-8XO.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let pk3CsZs0Text = Rswift.StringResource(key: "PK3-cs-Zs0.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xDuM1Jk0Text = Rswift.StringResource(key: "XDu-M1-jk0.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xs1UFMEDText = Rswift.StringResource(key: "XS1-uF-mED.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let p83L0MbHText = Rswift.StringResource(key: "p83-L0-mbH.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let pcm8MIhCText = Rswift.StringResource(key: "pcm-8M-IhC.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Live support
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ynrpmyrmText = Rswift.StringResource(key: "YNR-pM-YRM.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Loyality points
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let m8OBTG0IText = Rswift.StringResource(key: "m8O-bT-G0I.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: My Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let f9CKXqyText = Rswift.StringResource(key: "1F9-cK-Xqy.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let m6BMRO8lText = Rswift.StringResource(key: "M6B-MR-O8l.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let mflFa1myText = Rswift.StringResource(key: "Mfl-Fa-1my.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let n8JG8QVBText = Rswift.StringResource(key: "N8J-g8-qVB.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let tzuZwcText = Rswift.StringResource(key: "49T-zU-zwc.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let adBoDsMText = Rswift.StringResource(key: "6ad-Bo-dsM.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let bK57H6OTText = Rswift.StringResource(key: "bK5-7H-6OT.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let dm2FeB9UText = Rswift.StringResource(key: "DM2-fe-B9U.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fJVOpNOVText = Rswift.StringResource(key: "fJV-Op-nOV.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gaiEDHdhText = Rswift.StringResource(key: "Gai-ED-Hdh.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gkPHSADgText = Rswift.StringResource(key: "GkP-HS-aDg.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let hs1ECVAKText = Rswift.StringResource(key: "hs1-eC-vAK.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let iWLh12IText = Rswift.StringResource(key: "7iW-Lh-12I.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let if3MzQGIText = Rswift.StringResource(key: "if3-mz-QGI.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let j0rGmCQ7Text = Rswift.StringResource(key: "j0r-gm-CQ7.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let oh2Oi84jText = Rswift.StringResource(key: "Oh2-oi-84j.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let qfIEfOZmText = Rswift.StringResource(key: "QfI-Ef-oZm.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let x5HDXIu0Text = Rswift.StringResource(key: "x5H-dX-iu0.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xkcWfVXWText = Rswift.StringResource(key: "XKC-Wf-VXW.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Net total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let kspe7lTText = Rswift.StringResource(key: "5KS-pE-7lT.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ppa02Hs4NormalTitle = Rswift.StringResource(key: "ppa-02-hs4.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: No Notifications Yet!
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let vlXSEF1LText = Rswift.StringResource(key: "vlX-SE-f1L.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: No Orders Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let whkDwOTdText = Rswift.StringResource(key: "whk-dw-oTd.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: No Product Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let cCGAYQ8uText = Rswift.StringResource(key: "cCG-AY-q8u.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: No Product Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let hHvVyPZBText = Rswift.StringResource(key: "hHv-vy-PZB.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: No Supplier Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gkz3LTE2Text = Rswift.StringResource(key: "Gkz-3L-TE2.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let z0dZpFm2Text = Rswift.StringResource(key: "z0d-zp-fm2.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Order Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let rUWlBDeNormalTitle = Rswift.StringResource(key: "2rU-Wl-BDe.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Orders
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let bc5VKL9zNormalTitle = Rswift.StringResource(key: "bc5-VK-L9z.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let n1X2XyNText = Rswift.StringResource(key: "3N1-x2-xyN.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Payments
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let cZv9QStBText = Rswift.StringResource(key: "CZv-9Q-stB.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Philips toaster
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let c2rUT5dMText = Rswift.StringResource(key: "c2r-UT-5dM.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Points earned so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let c86PrEFnText = Rswift.StringResource(key: "c86-pr-EFn.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Price details
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let meOUdVcvText = Rswift.StringResource(key: "MeO-ud-vcv.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Promo Applied
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let c62JW93Text = Rswift.StringResource(key: "6c6-2J-w93.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let h5F371hText = Rswift.StringResource(key: "8H5-f3-71h.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: REDEEM
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ii5X96KNormalTitle = Rswift.StringResource(key: "8ii-5X-96K.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Redeem
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let dAo9HK5RNormalTitle = Rswift.StringResource(key: "DAo-9H-k5R.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Referal Applied
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let eytGMUdyText = Rswift.StringResource(key: "eyt-gM-udy.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ohCJdHGKSelectedTitle = Rswift.StringResource(key: "ohC-jd-HGK.selectedTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let r0eD98Z9SelectedTitle = Rswift.StringResource(key: "r0e-d9-8Z9.selectedTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let dAo9HK5RSelectedTitle = Rswift.StringResource(key: "DAo-9H-k5R.selectedTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let tG2MSSJ0Text = Rswift.StringResource(key: "tG2-MS-SJ0.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: STUFF!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let n3SRAFfFText = Rswift.StringResource(key: "n3S-rA-FfF.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let uRgEPFK4NormalTitle = Rswift.StringResource(key: "URg-eP-FK4.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Scan Products
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let gBsODHtHText = Rswift.StringResource(key: "gBs-oD-htH.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ep9Iu2VHText = Rswift.StringResource(key: "EP9-iu-2VH.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Select Prescription to upload
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let cMfArNEFText = Rswift.StringResource(key: "cMf-ar-NEF.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Service Date:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let clAQ4QspText = Rswift.StringResource(key: "ClA-q4-Qsp.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Service Provider | 0 Years Experience
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let pFgOI82mText = Rswift.StringResource(key: "pFg-oI-82m.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Service Time:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let mvWHgVG9Text = Rswift.StringResource(key: "MvW-Hg-vG9.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let tqJMbNOsText = Rswift.StringResource(key: "TqJ-Mb-nOs.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Sub-Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let oq64Lz9Text = Rswift.StringResource(key: "0oq-64-Lz9.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Tax
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let fp9XfPfgText = Rswift.StringResource(key: "Fp9-xf-Pfg.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: The information in this e-mail message,
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let uypD7YUrText = Rswift.StringResource(key: "Uyp-d7-YUr.text", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: The information in this e-mail message, and any files transmitted You haven't talked to Harman before. Why not break the ice with an emoticon? (fonzie
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let wuTPTOubText = Rswift.StringResource(key: "wuT-pT-oub.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Tip Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let h7RBfUMTText = Rswift.StringResource(key: "H7R-bf-uMT.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Tip Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let ip8ScJjMText = Rswift.StringResource(key: "ip8-sc-JjM.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let efRN8BenText = Rswift.StringResource(key: "efR-n8-ben.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Try searching for something else!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let zgG1U3SText = Rswift.StringResource(key: "2Zg-g1-u3S.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: VIEW CART
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let zyqHgO1bNormalTitle = Rswift.StringResource(key: "ZYQ-hg-o1b.normalTitle", tableName: "Options", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let mqXBE4XPlaceholder = Rswift.StringResource(key: "7Mq-xB-e4X.placeholder", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: YOUR CART IS EMPTY
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let s7ZM3RText = Rswift.StringResource(key: "77S-7Z-M3R.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: Your referal Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let xVt8sB3LText = Rswift.StringResource(key: "XVt-8s-b3L.text", tableName: "Options", bundle: R.hostingBundle, locales: ["ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)
      /// en translation: title
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static let nVvXBA7iText = Rswift.StringResource(key: "nVv-xB-a7i.text", tableName: "Options", bundle: R.hostingBundle, locales: ["es", "ar", "fr", "it", "ja", "nl", "ja", "en", "zh-Hans", "si-LK"], comment: nil)

      /// en translation: (YOU WON'T REGRET IT)
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func lHn3tXEeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lHn-3t-xEe.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "lHn-3t-xEe.text"
        }

        return NSLocalizedString("lHn-3t-xEe.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func o95kN9tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8O9-5k-N9t.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "8O9-5k-N9t.text"
        }

        return NSLocalizedString("8O9-5k-N9t.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: 0 Reviews
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func dwxsd04Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2DW-XS-d04.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "2DW-XS-d04.text"
        }

        return NSLocalizedString("2DW-XS-d04.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: 1 Items | Total USD 178.0
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gMC68QVaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gMC-68-QVa.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "gMC-68-QVa.text"
        }

        return NSLocalizedString("gMC-68-QVa.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: 1/2
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func bsn13TTqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bsn-13-TTq.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Bsn-13-TTq.text"
        }

        return NSLocalizedString("Bsn-13-TTq.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: 100 AED
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func uaAHt7jaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uaA-Ht-7ja.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "uaA-Ht-7ja.text"
        }

        return NSLocalizedString("uaA-Ht-7ja.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: ADD A TIP TO YOUR RIDER
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func aQDRaTVZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aQD-Ra-tVZ.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "aQD-Ra-tVZ.text"
        }

        return NSLocalizedString("aQD-Ra-tVZ.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: ADD SOME
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fmZGnPamText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fmZ-Gn-pam.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "fmZ-Gn-pam.text"
        }

        return NSLocalizedString("fmZ-Gn-pam.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: APPLY
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func qheGOQHwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qhe-GO-QHw.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "qhe-GO-QHw.normalTitle"
        }

        return NSLocalizedString("qhe-GO-QHw.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r7M3C3cNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4r7-m3-C3c.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "4r7-m3-C3c.normalTitle"
        }

        return NSLocalizedString("4r7-m3-C3c.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Add Card
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func yyhUzIOANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YYH-uz-IOA.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "YYH-uz-IOA.normalTitle"
        }

        return NSLocalizedString("YYH-uz-IOA.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Add Customization
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func yrOMK9fkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YrO-mK-9fk.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "YrO-mK-9fk.text"
        }

        return NSLocalizedString("YrO-mK-9fk.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Add new
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func zyBDLCssNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zyB-DL-Css.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "zyB-DL-Css.normalTitle"
        }

        return NSLocalizedString("zyB-DL-Css.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Add-ons
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func sOlXQZllText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SOl-XQ-Zll.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "SOl-XQ-Zll.text"
        }

        return NSLocalizedString("SOl-XQ-Zll.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: AddOn Charges
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func mJYTOWk4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mJY-tO-wk4.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "mJY-tO-wk4.text"
        }

        return NSLocalizedString("mJY-tO-wk4.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Additional Remarks
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func u5JNm5gbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("U5J-nm-5gb.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "U5J-nm-5gb.text"
        }

        return NSLocalizedString("U5J-nm-5gb.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Address & Landmark
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func yCb4KpPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("02y-cb-4Kp.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "02y-cb-4Kp.placeholder"
        }

        return NSLocalizedString("02y-cb-4Kp.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Agent
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func zzpQbRVlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zzp-Qb-RVl.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Zzp-Qb-RVl.text"
        }

        return NSLocalizedString("Zzp-Qb-RVl.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Agent to be booked:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func pQiF70S1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pQi-F7-0S1.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "pQi-F7-0S1.text"
        }

        return NSLocalizedString("pQi-F7-0S1.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r0eD98Z9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r0e-d9-8Z9.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "r0e-d9-8Z9.normalTitle"
        }

        return NSLocalizedString("r0e-d9-8Z9.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ohCJdHGKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ohC-jd-HGK.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ohC-jd-HGK.normalTitle"
        }

        return NSLocalizedString("ohC-jd-HGK.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Apply Promo
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xVt8sB3LPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XVt-8s-b3L.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "XVt-8s-b3L.placeholder"
        }

        return NSLocalizedString("XVt-8s-b3L.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Apply Promo
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r3rZpLZoPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R3r-Zp-LZo.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "R3r-Zp-LZo.placeholder"
        }

        return NSLocalizedString("R3r-Zp-LZo.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Area
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fnkvu5e7Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FNK-VU-5e7.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "FNK-VU-5e7.placeholder"
        }

        return NSLocalizedString("FNK-VU-5e7.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func bfwGc1rMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bfw-gc-1rM.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Bfw-gc-1rM.normalTitle"
        }

        return NSLocalizedString("Bfw-gc-1rM.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Building name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func yDyXIExEPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yDy-XI-exE.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "yDy-XI-exE.placeholder"
        }

        return NSLocalizedString("yDy-XI-exE.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Button isu yiugy ifugydiygidyg idyidfy hidyg uidg idfh fdh
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gdGVcYbXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gdG-Vc-YbX.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "gdG-Vc-YbX.normalTitle"
        }

        return NSLocalizedString("gdG-Vc-YbX.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: By BurgerGrill
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func togXZ0hiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tog-xZ-0hi.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Tog-xZ-0hi.text"
        }

        return NSLocalizedString("Tog-xZ-0hi.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: CHANGE
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func akwjqlflNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AKW-JQ-LFL.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "AKW-JQ-LFL.normalTitle"
        }

        return NSLocalizedString("AKW-JQ-LFL.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: CLEAR
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ynYrSonNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5yn-yr-Son.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "5yn-yr-Son.normalTitle"
        }

        return NSLocalizedString("5yn-yr-Son.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: CLEAR
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func eQ2K694gNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eQ2-K6-94g.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "eQ2-K6-94g.normalTitle"
        }

        return NSLocalizedString("eQ2-K6-94g.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func geB29XKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7ge-b2-9XK.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "7ge-b2-9XK.normalTitle"
        }

        return NSLocalizedString("7ge-b2-9XK.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Cardholder's Name
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func zlAK2QpwPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zlA-k2-Qpw.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "zlA-k2-Qpw.placeholder"
        }

        return NSLocalizedString("zlA-k2-Qpw.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func f3QY70JuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f3Q-y7-0Ju.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "f3Q-y7-0Ju.text"
        }

        return NSLocalizedString("f3Q-y7-0Ju.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Change Date & Time
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xvLPtCS8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xvL-Pt-cS8.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "xvL-Pt-cS8.normalTitle"
        }

        return NSLocalizedString("xvL-Pt-cS8.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Choose Booking Time Slot
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func hchSmOKANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HCH-sm-oKA.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "HCH-sm-oKA.normalTitle"
        }

        return NSLocalizedString("HCH-sm-oKA.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func btJTY9IXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btJ-TY-9IX.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "btJ-TY-9IX.placeholder"
        }

        return NSLocalizedString("btJ-TY-9IX.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Clear All
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func wiB3zFWBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WiB-3z-FWB.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "WiB-3z-FWB.normalTitle"
        }

        return NSLocalizedString("WiB-3z-FWB.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Click '+ Add new' to add an address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func eysQbPdfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eys-qb-pdf.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "eys-qb-pdf.text"
        }

        return NSLocalizedString("eys-qb-pdf.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Compare Products
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func rb2KhEG9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rb2-kh-EG9.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Rb2-kh-EG9.text"
        }

        return NSLocalizedString("Rb2-kh-EG9.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func c1hHc99hPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c1h-hc-99h.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "c1h-hc-99h.placeholder"
        }

        return NSLocalizedString("c1h-hc-99h.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Customise your Food
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func naZZYbsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Na-ZZ-Ybs.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "8Na-ZZ-Ybs.text"
        }

        return NSLocalizedString("8Na-ZZ-Ybs.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY AT
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func q0RRkJ6vText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q0R-rk-j6v.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Q0R-rk-j6v.text"
        }

        return NSLocalizedString("Q0R-rk-j6v.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Address
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func f3WTEA1WText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f3W-tE-A1W.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "f3W-tE-A1W.text"
        }

        return NSLocalizedString("f3W-tE-A1W.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func miEhgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("391-mi-Ehg.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "391-mi-Ehg.text"
        }

        return NSLocalizedString("391-mi-Ehg.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fIdFp12RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fId-Fp-12R.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "fId-Fp-12R.text"
        }

        return NSLocalizedString("fId-Fp-12R.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Discount Voucher
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func uu5AqB6YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UU5-aq-B6Y.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "UU5-aq-B6Y.text"
        }

        return NSLocalizedString("UU5-aq-B6Y.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Donate To Someone
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func mUJN8USWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mUJ-N8-uSW.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "mUJ-N8-uSW.normalTitle"
        }

        return NSLocalizedString("mUJ-N8-uSW.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ao35FVI5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ao3-5F-VI5.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ao3-5F-VI5.normalTitle"
        }

        return NSLocalizedString("ao3-5F-VI5.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r4MTcCqsDisabledTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r4M-tc-cqs.disabledTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "r4M-tc-cqs.disabledTitle"
        }

        return NSLocalizedString("r4M-tc-cqs.disabledTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r4MTcCqsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r4M-tc-cqs.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "r4M-tc-cqs.normalTitle"
        }

        return NSLocalizedString("r4M-tc-cqs.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Enter Promo
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func nwhBRIemPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nwh-bR-Iem.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Nwh-bR-Iem.placeholder"
        }

        return NSLocalizedString("Nwh-bR-Iem.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Favorites
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func sqHyCNUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Sq-hy-CNU.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "4Sq-hy-CNU.text"
        }

        return NSLocalizedString("4Sq-hy-CNU.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Fill Card Details
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func u1FNWuAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0u1-fN-wuA.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "0u1-fN-wuA.text"
        }

        return NSLocalizedString("0u1-fN-wuA.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Filters
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func dquEw4r0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dqu-ew-4r0.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Dqu-ew-4r0.text"
        }

        return NSLocalizedString("Dqu-ew-4r0.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Full Name
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func yexZLVwRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yex-zL-vwR.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Yex-zL-vwR.placeholder"
        }

        return NSLocalizedString("Yex-zL-vwR.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: House No/Plot No
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func a0IDbQBfPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a0I-db-qBf.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "a0I-db-qBf.placeholder"
        }

        return NSLocalizedString("a0I-db-qBf.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func a6ZPfCPzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a6Z-pf-CPz.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "a6Z-pf-CPz.text"
        }

        return NSLocalizedString("a6Z-pf-CPz.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fn2GcCTkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FN2-Gc-CTk.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "FN2-Gc-CTk.text"
        }

        return NSLocalizedString("FN2-Gc-CTk.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func kaX0TwyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8ka-x0-twy.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "8ka-x0-twy.text"
        }

        return NSLocalizedString("8ka-x0-twy.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func os4AXDtoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OS4-AX-dto.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "OS4-AX-dto.text"
        }

        return NSLocalizedString("OS4-AX-dto.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func z9NOCVwDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z9N-oC-VwD.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "z9N-oC-VwD.text"
        }

        return NSLocalizedString("z9N-oC-VwD.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func c88LcSKCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c88-lc-sKC.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "c88-lc-sKC.text"
        }

        return NSLocalizedString("c88-lc-sKC.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ezX8SSmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Ez-x8-sSm.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "9Ez-x8-sSm.text"
        }

        return NSLocalizedString("9Ez-x8-sSm.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gAsX8EppText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gAs-x8-epp.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "gAs-x8-epp.text"
        }

        return NSLocalizedString("gAs-x8-epp.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func jdKA048uText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jdK-a0-48u.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "jdK-a0-48u.text"
        }

        return NSLocalizedString("jdK-a0-48u.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func jlsLjBHAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jls-Lj-BHA.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Jls-Lj-BHA.text"
        }

        return NSLocalizedString("Jls-Lj-BHA.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func owUn8XOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ow-Un-8XO.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "4Ow-Un-8XO.text"
        }

        return NSLocalizedString("4Ow-Un-8XO.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func pk3CsZs0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PK3-cs-Zs0.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "PK3-cs-Zs0.text"
        }

        return NSLocalizedString("PK3-cs-Zs0.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xDuM1Jk0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XDu-M1-jk0.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "XDu-M1-jk0.text"
        }

        return NSLocalizedString("XDu-M1-jk0.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xs1UFMEDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XS1-uF-mED.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "XS1-uF-mED.text"
        }

        return NSLocalizedString("XS1-uF-mED.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func p83L0MbHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p83-L0-mbH.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "p83-L0-mbH.text"
        }

        return NSLocalizedString("p83-L0-mbH.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func pcm8MIhCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pcm-8M-IhC.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "pcm-8M-IhC.text"
        }

        return NSLocalizedString("pcm-8M-IhC.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Live support
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ynrpmyrmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YNR-pM-YRM.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "YNR-pM-YRM.text"
        }

        return NSLocalizedString("YNR-pM-YRM.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Loyality points
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func m8OBTG0IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m8O-bT-G0I.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "m8O-bT-G0I.text"
        }

        return NSLocalizedString("m8O-bT-G0I.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: My Cart
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func f9CKXqyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1F9-cK-Xqy.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "1F9-cK-Xqy.text"
        }

        return NSLocalizedString("1F9-cK-Xqy.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func m6BMRO8lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M6B-MR-O8l.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "M6B-MR-O8l.text"
        }

        return NSLocalizedString("M6B-MR-O8l.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func mflFa1myText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mfl-Fa-1my.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Mfl-Fa-1my.text"
        }

        return NSLocalizedString("Mfl-Fa-1my.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func n8JG8QVBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N8J-g8-qVB.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "N8J-g8-qVB.text"
        }

        return NSLocalizedString("N8J-g8-qVB.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func tzuZwcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("49T-zU-zwc.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "49T-zU-zwc.text"
        }

        return NSLocalizedString("49T-zU-zwc.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func adBoDsMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6ad-Bo-dsM.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "6ad-Bo-dsM.text"
        }

        return NSLocalizedString("6ad-Bo-dsM.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func bK57H6OTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bK5-7H-6OT.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "bK5-7H-6OT.text"
        }

        return NSLocalizedString("bK5-7H-6OT.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func dm2FeB9UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DM2-fe-B9U.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "DM2-fe-B9U.text"
        }

        return NSLocalizedString("DM2-fe-B9U.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fJVOpNOVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fJV-Op-nOV.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "fJV-Op-nOV.text"
        }

        return NSLocalizedString("fJV-Op-nOV.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gaiEDHdhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gai-ED-Hdh.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Gai-ED-Hdh.text"
        }

        return NSLocalizedString("Gai-ED-Hdh.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gkPHSADgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GkP-HS-aDg.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "GkP-HS-aDg.text"
        }

        return NSLocalizedString("GkP-HS-aDg.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func hs1ECVAKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hs1-eC-vAK.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "hs1-eC-vAK.text"
        }

        return NSLocalizedString("hs1-eC-vAK.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func iWLh12IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7iW-Lh-12I.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "7iW-Lh-12I.text"
        }

        return NSLocalizedString("7iW-Lh-12I.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func if3MzQGIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("if3-mz-QGI.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "if3-mz-QGI.text"
        }

        return NSLocalizedString("if3-mz-QGI.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func j0rGmCQ7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j0r-gm-CQ7.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "j0r-gm-CQ7.text"
        }

        return NSLocalizedString("j0r-gm-CQ7.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func oh2Oi84jText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oh2-oi-84j.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Oh2-oi-84j.text"
        }

        return NSLocalizedString("Oh2-oi-84j.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func qfIEfOZmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QfI-Ef-oZm.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "QfI-Ef-oZm.text"
        }

        return NSLocalizedString("QfI-Ef-oZm.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func x5HDXIu0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("x5H-dX-iu0.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "x5H-dX-iu0.text"
        }

        return NSLocalizedString("x5H-dX-iu0.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xkcWfVXWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XKC-Wf-VXW.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "XKC-Wf-VXW.text"
        }

        return NSLocalizedString("XKC-Wf-VXW.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Net total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func kspe7lTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5KS-pE-7lT.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "5KS-pE-7lT.text"
        }

        return NSLocalizedString("5KS-pE-7lT.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ppa02Hs4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ppa-02-hs4.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ppa-02-hs4.normalTitle"
        }

        return NSLocalizedString("ppa-02-hs4.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: No Notifications Yet!
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func vlXSEF1LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vlX-SE-f1L.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "vlX-SE-f1L.text"
        }

        return NSLocalizedString("vlX-SE-f1L.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: No Orders Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func whkDwOTdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whk-dw-oTd.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "whk-dw-oTd.text"
        }

        return NSLocalizedString("whk-dw-oTd.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: No Product Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func cCGAYQ8uText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cCG-AY-q8u.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "cCG-AY-q8u.text"
        }

        return NSLocalizedString("cCG-AY-q8u.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: No Product Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func hHvVyPZBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hHv-vy-PZB.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "hHv-vy-PZB.text"
        }

        return NSLocalizedString("hHv-vy-PZB.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: No Supplier Found!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gkz3LTE2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gkz-3L-TE2.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Gkz-3L-TE2.text"
        }

        return NSLocalizedString("Gkz-3L-TE2.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func z0dZpFm2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z0d-zp-fm2.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "z0d-zp-fm2.text"
        }

        return NSLocalizedString("z0d-zp-fm2.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Order Now
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func rUWlBDeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2rU-Wl-BDe.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "2rU-Wl-BDe.normalTitle"
        }

        return NSLocalizedString("2rU-Wl-BDe.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Orders
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func bc5VKL9zNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bc5-VK-L9z.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "bc5-VK-L9z.normalTitle"
        }

        return NSLocalizedString("bc5-VK-L9z.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func n1X2XyNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3N1-x2-xyN.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "3N1-x2-xyN.text"
        }

        return NSLocalizedString("3N1-x2-xyN.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Payments
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func cZv9QStBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CZv-9Q-stB.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "CZv-9Q-stB.text"
        }

        return NSLocalizedString("CZv-9Q-stB.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Philips toaster
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func c2rUT5dMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c2r-UT-5dM.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "c2r-UT-5dM.text"
        }

        return NSLocalizedString("c2r-UT-5dM.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Points earned so far
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func c86PrEFnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c86-pr-EFn.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "c86-pr-EFn.text"
        }

        return NSLocalizedString("c86-pr-EFn.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Price details
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func meOUdVcvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MeO-ud-vcv.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "MeO-ud-vcv.text"
        }

        return NSLocalizedString("MeO-ud-vcv.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Promo Applied
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func c62JW93Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6c6-2J-w93.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "6c6-2J-w93.text"
        }

        return NSLocalizedString("6c6-2J-w93.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func h5F371hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8H5-f3-71h.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "8H5-f3-71h.text"
        }

        return NSLocalizedString("8H5-f3-71h.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: REDEEM
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ii5X96KNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8ii-5X-96K.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "8ii-5X-96K.normalTitle"
        }

        return NSLocalizedString("8ii-5X-96K.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Redeem
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func dAo9HK5RNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DAo-9H-k5R.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "DAo-9H-k5R.normalTitle"
        }

        return NSLocalizedString("DAo-9H-k5R.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Referal Applied
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func eytGMUdyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eyt-gM-udy.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "eyt-gM-udy.text"
        }

        return NSLocalizedString("eyt-gM-udy.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ohCJdHGKSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ohC-jd-HGK.selectedTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ohC-jd-HGK.selectedTitle"
        }

        return NSLocalizedString("ohC-jd-HGK.selectedTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func r0eD98Z9SelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r0e-d9-8Z9.selectedTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "r0e-d9-8Z9.selectedTitle"
        }

        return NSLocalizedString("r0e-d9-8Z9.selectedTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func dAo9HK5RSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DAo-9H-k5R.selectedTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "DAo-9H-k5R.selectedTitle"
        }

        return NSLocalizedString("DAo-9H-k5R.selectedTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Result
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func tG2MSSJ0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tG2-MS-SJ0.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "tG2-MS-SJ0.text"
        }

        return NSLocalizedString("tG2-MS-SJ0.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: STUFF!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func n3SRAFfFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n3S-rA-FfF.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "n3S-rA-FfF.text"
        }

        return NSLocalizedString("n3S-rA-FfF.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func uRgEPFK4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("URg-eP-FK4.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "URg-eP-FK4.normalTitle"
        }

        return NSLocalizedString("URg-eP-FK4.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Scan Products
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func gBsODHtHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gBs-oD-htH.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "gBs-oD-htH.text"
        }

        return NSLocalizedString("gBs-oD-htH.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ep9Iu2VHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EP9-iu-2VH.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "EP9-iu-2VH.text"
        }

        return NSLocalizedString("EP9-iu-2VH.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Select Prescription to upload
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func cMfArNEFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cMf-ar-NEF.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "cMf-ar-NEF.text"
        }

        return NSLocalizedString("cMf-ar-NEF.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Service Date:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func clAQ4QspText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ClA-q4-Qsp.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ClA-q4-Qsp.text"
        }

        return NSLocalizedString("ClA-q4-Qsp.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Service Provider | 0 Years Experience
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func pFgOI82mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pFg-oI-82m.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "pFg-oI-82m.text"
        }

        return NSLocalizedString("pFg-oI-82m.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Service Time:
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func mvWHgVG9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MvW-Hg-vG9.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "MvW-Hg-vG9.text"
        }

        return NSLocalizedString("MvW-Hg-vG9.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func tqJMbNOsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TqJ-Mb-nOs.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "TqJ-Mb-nOs.text"
        }

        return NSLocalizedString("TqJ-Mb-nOs.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Sub-Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func oq64Lz9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0oq-64-Lz9.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "0oq-64-Lz9.text"
        }

        return NSLocalizedString("0oq-64-Lz9.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Tax
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func fp9XfPfgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fp9-xf-Pfg.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Fp9-xf-Pfg.text"
        }

        return NSLocalizedString("Fp9-xf-Pfg.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: The information in this e-mail message,
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func uypD7YUrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uyp-d7-YUr.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "Uyp-d7-YUr.text"
        }

        return NSLocalizedString("Uyp-d7-YUr.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: The information in this e-mail message, and any files transmitted You haven't talked to Harman before. Why not break the ice with an emoticon? (fonzie
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func wuTPTOubText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wuT-pT-oub.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "wuT-pT-oub.text"
        }

        return NSLocalizedString("wuT-pT-oub.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Tip Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func h7RBfUMTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H7R-bf-uMT.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "H7R-bf-uMT.text"
        }

        return NSLocalizedString("H7R-bf-uMT.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Tip Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func ip8ScJjMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ip8-sc-JjM.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ip8-sc-JjM.text"
        }

        return NSLocalizedString("ip8-sc-JjM.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func efRN8BenText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("efR-n8-ben.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "efR-n8-ben.text"
        }

        return NSLocalizedString("efR-n8-ben.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Try searching for something else!
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func zgG1U3SText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Zg-g1-u3S.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "2Zg-g1-u3S.text"
        }

        return NSLocalizedString("2Zg-g1-u3S.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: VIEW CART
      ///
      /// Locales: fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func zyqHgO1bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZYQ-hg-o1b.normalTitle", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "ZYQ-hg-o1b.normalTitle"
        }

        return NSLocalizedString("ZYQ-hg-o1b.normalTitle", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func mqXBE4XPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Mq-xB-e4X.placeholder", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "7Mq-xB-e4X.placeholder"
        }

        return NSLocalizedString("7Mq-xB-e4X.placeholder", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: YOUR CART IS EMPTY
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func s7ZM3RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("77S-7Z-M3R.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "77S-7Z-M3R.text"
        }

        return NSLocalizedString("77S-7Z-M3R.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: Your referal Amount
      ///
      /// Locales: ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func xVt8sB3LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XVt-8s-b3L.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "XVt-8s-b3L.text"
        }

        return NSLocalizedString("XVt-8s-b3L.text", tableName: "Options", bundle: bundle, comment: "")
      }

      /// en translation: title
      ///
      /// Locales: es, ar, fr, it, ja, nl, ja, en, zh-Hans, si-LK
      static func nVvXBA7iText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nVv-xB-a7i.text", tableName: "Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Options", preferredLanguages: preferredLanguages) else {
          return "nVv-xB-a7i.text"
        }

        return NSLocalizedString("nVv-xB-a7i.text", tableName: "Options", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.orderParentCell` struct is generated, and contains static references to 14 localization keys.
    struct orderParentCell {
      /// ar translation: NTL
      ///
      /// Locales: ar, ar
      static let neMg4PSText = Rswift.StringResource(key: "5Ne-mg-4PS.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// ar translation: NTL  .  NTL
      ///
      /// Locales: ar, ar
      static let s7SnFfUText = Rswift.StringResource(key: "7S7-sn-FfU.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// ar translation: الوقت المتوقع لوصول الطلب
      ///
      /// Locales: ar, ar
      static let hTlUwBbxText = Rswift.StringResource(key: "HTl-Uw-Bbx.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// ar translation: تم التوصيل
      ///
      /// Locales: ar, ar
      static let mIeQVNKJText = Rswift.StringResource(key: "MIe-QV-nKJ.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// ar translation: تم الطلب في
      ///
      /// Locales: ar, ar
      static let im1VxGSqText = Rswift.StringResource(key: "Im1-vx-gSq.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// ar translation: رقم الطلب
      ///
      /// Locales: ar, ar
      static let rkyzIi5Text = Rswift.StringResource(key: "0RK-YZ-Ii5.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["ar", "ar"], comment: nil)
      /// es translation: Colocado en
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let a0wSn1FNText = Rswift.StringResource(key: "a0w-Sn-1FN.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: Entrega esperada el
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let tBfH8JSmText = Rswift.StringResource(key: "tBf-h8-jSm.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: Entregado
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let hrkX1D41Text = Rswift.StringResource(key: "hrk-X1-d41.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: N º de pedido.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let t1qS4FQQText = Rswift.StringResource(key: "T1q-S4-fQQ.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let vzP7n84ZText = Rswift.StringResource(key: "VzP-7n-84Z.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// es translation: NTL  .  NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static let nw1PoGlhText = Rswift.StringResource(key: "NW1-po-glh.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// fr translation: Pay Now
      ///
      /// Locales: fr, it, ja, nl, ja, de, zh-Hans, sq
      static let f7vXdP7mNormalTitle = Rswift.StringResource(key: "f7v-Xd-P7m.normalTitle", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)
      /// fr translation: Payment Pending
      ///
      /// Locales: fr, it, ja, nl, ja, de, zh-Hans, sq
      static let qyyN8Q0PText = Rswift.StringResource(key: "Qyy-N8-q0P.text", tableName: "OrderParentCell", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "sq"], comment: nil)

      /// ar translation: NTL
      ///
      /// Locales: ar, ar
      static func neMg4PSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Ne-mg-4PS.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "5Ne-mg-4PS.text"
        }

        return NSLocalizedString("5Ne-mg-4PS.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// ar translation: NTL  .  NTL
      ///
      /// Locales: ar, ar
      static func s7SnFfUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7S7-sn-FfU.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "7S7-sn-FfU.text"
        }

        return NSLocalizedString("7S7-sn-FfU.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// ar translation: الوقت المتوقع لوصول الطلب
      ///
      /// Locales: ar, ar
      static func hTlUwBbxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HTl-Uw-Bbx.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "HTl-Uw-Bbx.text"
        }

        return NSLocalizedString("HTl-Uw-Bbx.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// ar translation: تم التوصيل
      ///
      /// Locales: ar, ar
      static func mIeQVNKJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MIe-QV-nKJ.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "MIe-QV-nKJ.text"
        }

        return NSLocalizedString("MIe-QV-nKJ.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// ar translation: تم الطلب في
      ///
      /// Locales: ar, ar
      static func im1VxGSqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Im1-vx-gSq.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "Im1-vx-gSq.text"
        }

        return NSLocalizedString("Im1-vx-gSq.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطلب
      ///
      /// Locales: ar, ar
      static func rkyzIi5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0RK-YZ-Ii5.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "0RK-YZ-Ii5.text"
        }

        return NSLocalizedString("0RK-YZ-Ii5.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: Colocado en
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func a0wSn1FNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a0w-Sn-1FN.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "a0w-Sn-1FN.text"
        }

        return NSLocalizedString("a0w-Sn-1FN.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: Entrega esperada el
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func tBfH8JSmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tBf-h8-jSm.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "tBf-h8-jSm.text"
        }

        return NSLocalizedString("tBf-h8-jSm.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: Entregado
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func hrkX1D41Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hrk-X1-d41.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "hrk-X1-d41.text"
        }

        return NSLocalizedString("hrk-X1-d41.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: N º de pedido.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func t1qS4FQQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T1q-S4-fQQ.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "T1q-S4-fQQ.text"
        }

        return NSLocalizedString("T1q-S4-fQQ.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func vzP7n84ZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VzP-7n-84Z.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "VzP-7n-84Z.text"
        }

        return NSLocalizedString("VzP-7n-84Z.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// es translation: NTL  .  NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, sq
      static func nw1PoGlhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NW1-po-glh.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "NW1-po-glh.text"
        }

        return NSLocalizedString("NW1-po-glh.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// fr translation: Pay Now
      ///
      /// Locales: fr, it, ja, nl, ja, de, zh-Hans, sq
      static func f7vXdP7mNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f7v-Xd-P7m.normalTitle", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "f7v-Xd-P7m.normalTitle"
        }

        return NSLocalizedString("f7v-Xd-P7m.normalTitle", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      /// fr translation: Payment Pending
      ///
      /// Locales: fr, it, ja, nl, ja, de, zh-Hans, sq
      static func qyyN8Q0PText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qyy-N8-q0P.text", tableName: "OrderParentCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderParentCell", preferredLanguages: preferredLanguages) else {
          return "Qyy-N8-q0P.text"
        }

        return NSLocalizedString("Qyy-N8-q0P.text", tableName: "OrderParentCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.order` struct is generated, and contains static references to 182 localization keys.
    struct order {
      /// en translation: 0.0
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oMzJyPU2Text = Rswift.StringResource(key: "OMz-Jy-pU2.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0.0
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let eaNL2H48Text = Rswift.StringResource(key: "eaN-l2-h48.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 0.0
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gcGDP9taText = Rswift.StringResource(key: "gcG-dP-9ta.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 9
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let sraFoKuzText = Rswift.StringResource(key: "SRA-fo-kuz.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 9
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mSUI96XoText = Rswift.StringResource(key: "mSU-I9-6Xo.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add new
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bc1RnW2pNormalTitle = Rswift.StringResource(key: "BC1-rn-w2p.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: AddOn Charges
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let krEI3EpeText = Rswift.StringResource(key: "KrE-i3-Epe.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Additional remarks
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fRRKmGYcText = Rswift.StringResource(key: "fRR-km-gYc.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Additional remarks
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gMw8sZL8Text = Rswift.StringResource(key: "GMw-8s-ZL8.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Address Detail
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lpVZeQtgText = Rswift.StringResource(key: "LpV-ze-Qtg.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Adidas Ultraboost Shoes
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mjxGAIksText = Rswift.StringResource(key: "Mjx-gA-iks.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Agent Detail
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lXdF9ZFhText = Rswift.StringResource(key: "LXd-F9-ZFh.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: BOOK NOW
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oO7FrTtXNormalTitle = Rswift.StringResource(key: "oO7-Fr-ttX.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let t1x0y5dxNormalTitle = Rswift.StringResource(key: "t1x-0y-5dx.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CHANGE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let aNFFfOmENormalTitle = Rswift.StringResource(key: "aNF-Ff-OmE.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lfjRjQwRNormalTitle = Rswift.StringResource(key: "lfj-rj-QwR.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let qC4NpLSvText = Rswift.StringResource(key: "qC4-np-lSv.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let vWjTkHoQPlaceholder = Rswift.StringResource(key: "vWj-Tk-HoQ.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Card details
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mu241DpdText = Rswift.StringResource(key: "mu2-41-Dpd.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Card holder's name
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zisXVORgText = Rswift.StringResource(key: "Zis-xV-ORg.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Card number
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let d5IHA6cFText = Rswift.StringResource(key: "d5I-hA-6cF.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Cash on delivery
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fxwKuZeuNormalTitle = Rswift.StringResource(key: "fxw-Ku-Zeu.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose payment option
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rcSKQRrxText = Rswift.StringResource(key: "RcS-KQ-Rrx.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Chris Martin
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cDyOhN71Text = Rswift.StringResource(key: "CDy-oh-n71.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Chris Martin
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let uEoNc8UIText = Rswift.StringResource(key: "uEo-nc-8UI.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Chris Martin
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bQzCHYSAText = Rswift.StringResource(key: "bQz-cH-YSA.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Click '+ Add new' to add an address
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zyI0jXWBText = Rswift.StringResource(key: "zyI-0j-xWB.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Completed Orders
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let tbpSqSU9NormalTitle = Rswift.StringResource(key: "TBP-sq-sU9.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let z4gTHI8eNormalTitle = Rswift.StringResource(key: "Z4g-tH-i8e.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Credit/Debit Card
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let vecGvZSnNormalTitle = Rswift.StringResource(key: "vec-Gv-zSn.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Current Orders
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ohYKD9GOText = Rswift.StringResource(key: "OhY-KD-9GO.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: DELIVERY AT
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oOMElKD8Text = Rswift.StringResource(key: "oOM-El-KD8.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gdQgIqcText = Rswift.StringResource(key: "9GD-Qg-iqc.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery Charges
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let b5zSlVgKText = Rswift.StringResource(key: "b5z-sl-VgK.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gQa6lIRJText = Rswift.StringResource(key: "GQa-6l-IRJ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let vUCM0NVGText = Rswift.StringResource(key: "vUC-m0-nVG.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery On
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jyfYTYhiText = Rswift.StringResource(key: "Jyf-yT-yhi.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery On
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oaQDeMlJText = Rswift.StringResource(key: "OaQ-De-mlJ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let b6Z3eWrCText = Rswift.StringResource(key: "b6Z-3e-WrC.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let pc1XrQOUText = Rswift.StringResource(key: "PC1-xr-qOU.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let qWFAPKFxText = Rswift.StringResource(key: "qWF-aP-kFx.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xyPKQ3DText = Rswift.StringResource(key: "9Xy-pK-q3D.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mu3IVDr4Text = Rswift.StringResource(key: "Mu3-IV-Dr4.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let wUj2wQzsDisabledTitle = Rswift.StringResource(key: "wUj-2w-Qzs.disabledTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let wUj2wQzsNormalTitle = Rswift.StringResource(key: "wUj-2w-Qzs.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Expiry
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rBhFjZRXText = Rswift.StringResource(key: "RBh-Fj-ZRX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: F
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let o0gDdN6aNormalTitle = Rswift.StringResource(key: "O0g-dd-n6a.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Handling fee
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let d6LMRAisText = Rswift.StringResource(key: "d6L-MR-Ais.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Handling fee
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rq67MAV1Text = Rswift.StringResource(key: "Rq6-7M-AV1.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Instructions
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let w6DDAHkgText = Rswift.StringResource(key: "W6D-dA-hkg.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let emcakivjText = Rswift.StringResource(key: "EMC-aK-IVJ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rwJMNlVText = Rswift.StringResource(key: "5Rw-JM-NlV.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jer2qIkcText = Rswift.StringResource(key: "jer-2q-ikc.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ltNM7WdVText = Rswift.StringResource(key: "LtN-m7-wdV.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: M
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bcIAxKctNormalTitle = Rswift.StringResource(key: "bcI-ax-kct.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: MM/YY
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jH5YnSEfPlaceholder = Rswift.StringResource(key: "jH5-Yn-SEf.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Morning
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let azHOW9ARText = Rswift.StringResource(key: "AzH-oW-9AR.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let avzIMTgpText = Rswift.StringResource(key: "Avz-iM-Tgp.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bOcSuLBXText = Rswift.StringResource(key: "bOc-su-lBX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bdZHFRgText = Rswift.StringResource(key: "5Bd-ZH-FRg.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cmNLXK4gText = Rswift.StringResource(key: "cmN-LX-K4g.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let epM1gUvKText = Rswift.StringResource(key: "EpM-1g-UvK.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let f8lLI8vZText = Rswift.StringResource(key: "f8l-lI-8vZ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fLGVJS8qText = Rswift.StringResource(key: "fLG-VJ-S8q.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fVn56FsJText = Rswift.StringResource(key: "fVn-56-FsJ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gq7Zx4zAText = Rswift.StringResource(key: "gq7-Zx-4zA.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let izYPHXZkText = Rswift.StringResource(key: "izY-pH-xZk.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jkiR9N7CText = Rswift.StringResource(key: "Jki-R9-N7C.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ktlKNFsAText = Rswift.StringResource(key: "ktl-kN-FsA.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mQYEWFFPText = Rswift.StringResource(key: "mQY-eW-FFP.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mdkSnNuaText = Rswift.StringResource(key: "MDK-Sn-nua.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let n2CKUMfUText = Rswift.StringResource(key: "n2C-kU-MfU.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let o8pWcUmCText = Rswift.StringResource(key: "o8p-wc-UmC.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oztctf6mText = Rswift.StringResource(key: "OZT-CT-F6m.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let pNIYT0LText = Rswift.StringResource(key: "3pN-iY-t0L.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let qiksVdText = Rswift.StringResource(key: "90Q-iK-sVd.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let r20sS3YText = Rswift.StringResource(key: "9r2-0s-S3Y.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let r2cZ0WB5Text = Rswift.StringResource(key: "r2c-z0-wB5.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let tj8A1EcRText = Rswift.StringResource(key: "Tj8-a1-EcR.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let vQU8WrSText = Rswift.StringResource(key: "8vQ-u8-wrS.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let x7kRFR7OText = Rswift.StringResource(key: "X7k-RF-R7O.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xMLMW8BrText = Rswift.StringResource(key: "xML-mW-8Br.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xfULaOypText = Rswift.StringResource(key: "XfU-La-oyp.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xsWYZ0HdText = Rswift.StringResource(key: "XsW-YZ-0Hd.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let y9UxOlXText = Rswift.StringResource(key: "4Y9-ux-olX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let yM83YGOUText = Rswift.StringResource(key: "yM8-3Y-gOU.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zLd6yFDDText = Rswift.StringResource(key: "zLd-6y-fDD.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zehIxNRvText = Rswift.StringResource(key: "Zeh-ix-nRv.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zzk5XFcfText = Rswift.StringResource(key: "zzk-5X-fcf.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bnKoBV0Text = Rswift.StringResource(key: "3BN-Ko-BV0.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let c2YBcXsaText = Rswift.StringResource(key: "C2Y-Bc-Xsa.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cm8Up4V2Text = Rswift.StringResource(key: "cm8-up-4V2.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let e296ZGTText = Rswift.StringResource(key: "8E2-96-ZGT.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let gx6UlXxeText = Rswift.StringResource(key: "gx6-ul-xxe.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let itFNS3MText = Rswift.StringResource(key: "4it-FN-s3M.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lFRKCOXText = Rswift.StringResource(key: "0lF-RK-cOX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ll8VFYbWText = Rswift.StringResource(key: "Ll8-vF-YbW.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let pTsEDIFtText = Rswift.StringResource(key: "pTs-eD-iFt.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let uhXLXHfrText = Rswift.StringResource(key: "uhX-LX-hfr.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xuk3YSSDText = Rswift.StringResource(key: "Xuk-3Y-SSD.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Near You
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let bcEUBFP9Text = Rswift.StringResource(key: "bcE-UB-FP9.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Net Payable
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let kqJ8XMgXText = Rswift.StringResource(key: "KqJ-8X-mgX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Net Payable
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zQcRDAtXText = Rswift.StringResource(key: "zQc-RD-atX.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Net total
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cSVXTNKlText = Rswift.StringResource(key: "cSV-xT-nKl.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Net total
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let wy4HbFLKText = Rswift.StringResource(key: "WY4-hb-fLK.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let t4TUNOg3NormalTitle = Rswift.StringResource(key: "T4T-uN-Og3.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Order Scheduled!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let sbi3pPq9Text = Rswift.StringResource(key: "sbi-3p-Pq9.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No Orders Found!
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let i7x84U3zText = Rswift.StringResource(key: "I7x-84-u3z.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No agent found
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cYOYo9DbText = Rswift.StringResource(key: "cYO-Yo-9Db.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: No orders to Rate!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cmjBjJNMText = Rswift.StringResource(key: "Cmj-bj-jNM.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Occupation here
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fZpAAG4lText = Rswift.StringResource(key: "FZp-aA-g4l.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Occupation here  |  14 Years Experience
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let hhMAf6YnText = Rswift.StringResource(key: "HhM-af-6Yn.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Occupation here  |  14 Years Experience
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let v2d4GNonText = Rswift.StringResource(key: "v2d-4G-Non.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let uMO004QIText = Rswift.StringResource(key: "uMO-00-4QI.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let occEJC8AText = Rswift.StringResource(key: "Occ-eJ-C8A.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order History
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mx2OfBWoText = Rswift.StringResource(key: "MX2-of-BWo.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order History
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zixNJUzPText = Rswift.StringResource(key: "zix-nJ-UzP.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order No.
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let dGeBuYuJText = Rswift.StringResource(key: "DGe-bu-YuJ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order Schedular
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oveLhTHkText = Rswift.StringResource(key: "OVE-Lh-THk.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order Summary
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let qKtVm9U6Text = Rswift.StringResource(key: "QKt-vm-9U6.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Order Summary
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let tk6CISBsText = Rswift.StringResource(key: "Tk6-cI-SBs.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PAY
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mfO5Kf6NormalTitle = Rswift.StringResource(key: "3mf-o5-kf6.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PAY NOW
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let aH3NNDVKNormalTitle = Rswift.StringResource(key: "aH3-nN-dVK.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PLACE ORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mvCoNfBNormalTitle = Rswift.StringResource(key: "4mv-Co-NfB.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: PLACE ORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let tsHWhUQvNormalTitle = Rswift.StringResource(key: "TsH-wh-uQv.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let dBgPKNUpText = Rswift.StringResource(key: "dBg-PK-nUp.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment Remaining
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fpYQOMpmText = Rswift.StringResource(key: "fpY-QO-Mpm.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment method
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let noLBv1ipText = Rswift.StringResource(key: "noL-bv-1ip.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment method
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xejcoXfText = Rswift.StringResource(key: "1XE-jC-OXf.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pending Orders
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let z5aSfGMrNormalTitle = Rswift.StringResource(key: "z5a-sf-GMr.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Placed
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fv7iBkwText = Rswift.StringResource(key: "1fv-7i-Bkw.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Placed on
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let g8CObUiwText = Rswift.StringResource(key: "g8C-ob-uiw.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Prevoius
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fL3CSELwNormalTitle = Rswift.StringResource(key: "fL3-cS-eLw.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Promo Code
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let sguBSTzmText = Rswift.StringResource(key: "sgu-BS-tzm.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: REORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ci6BERzdNormalTitle = Rswift.StringResource(key: "Ci6-BE-rzd.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: RESULTS
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let hSFZQVZZText = Rswift.StringResource(key: "hSF-ZQ-vZZ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Agent
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jd4VLEtdNormalTitle = Rswift.StringResource(key: "Jd4-VL-Etd.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate My Order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let d7J2XTvYText = Rswift.StringResource(key: "d7J-2X-tvY.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Order
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let vpHZ5KAMNormalTitle = Rswift.StringResource(key: "vpH-Z5-KAM.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rate Supplier
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let hTfH7UFSNormalTitle = Rswift.StringResource(key: "hTf-H7-UFS.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Rating & Reviews
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let leh09G6fText = Rswift.StringResource(key: "Leh-09-G6f.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Referral Discount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let uXjYOJKAText = Rswift.StringResource(key: "uXj-YO-jKA.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: S
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ddH2C9cNormalTitle = Rswift.StringResource(key: "2Dd-h2-C9c.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: S
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fIxLu4NormalTitle = Rswift.StringResource(key: "98F-ix-Lu4.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SET SCHEDULE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let swPCgVLANormalTitle = Rswift.StringResource(key: "SwP-cg-VLA.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Schedule your order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let n2MTMD76Text = Rswift.StringResource(key: "N2M-TM-d76.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Scheduled Orders
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let zWBMT6YPText = Rswift.StringResource(key: "zWB-mT-6YP.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Search...
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ctPTnFfZPlaceholder = Rswift.StringResource(key: "ctP-Tn-ffZ.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Agent
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ebj9gStEText = Rswift.StringResource(key: "EBJ-9g-StE.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Agent
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let hxzUIZS7Text = Rswift.StringResource(key: "hxz-UI-ZS7.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Dates
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mbwSf22RText = Rswift.StringResource(key: "mbw-sf-22R.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Time Slot
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ieUITXspText = Rswift.StringResource(key: "ieU-iT-xsp.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Selected Questions
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let aFcT0VoKText = Rswift.StringResource(key: "AFc-T0-voK.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Shipped
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xF6SZ9wFText = Rswift.StringResource(key: "xF6-SZ-9wF.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Shipping Status
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let yXD7zP5WText = Rswift.StringResource(key: "yXD-7z-P5W.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xvkZfSs2NormalTitle = Rswift.StringResource(key: "XVK-zf-ss2.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Start On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let fnOMaTyQText = Rswift.StringResource(key: "fnO-ma-tyQ.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let i5nJcZgzText = Rswift.StringResource(key: "i5n-Jc-Zgz.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SubTotal
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let xawVnFLiText = Rswift.StringResource(key: "xaw-Vn-fLi.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let v8IB8ILfNormalTitle = Rswift.StringResource(key: "v8I-B8-ILf.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Supplier Service Charge
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lsCgFOsText = Rswift.StringResource(key: "7Ls-cg-FOs.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Support Email
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let uoiIaAH1NormalTitle = Rswift.StringResource(key: "Uoi-ia-AH1.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: T
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let g4HF1IVTNormalTitle = Rswift.StringResource(key: "G4H-f1-IVT.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: T
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let oqQTPPfNormalTitle = Rswift.StringResource(key: "2Oq-QT-PPf.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Tax
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let nx597Text = Rswift.StringResource(key: "862-nX-597.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Tip Amount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jwBVuMUpText = Rswift.StringResource(key: "JwB-Vu-MUp.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Title for your reviews
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let nt1S5F4iPlaceholder = Rswift.StringResource(key: "Nt1-s5-F4i.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rSiVzBxYText = Rswift.StringResource(key: "RSi-vz-BxY.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Track My Order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lgSAXL7vText = Rswift.StringResource(key: "LgS-aX-L7v.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Track Order
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let ncelfFfNormalTitle = Rswift.StringResource(key: "5NC-EL-FFf.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Uploaded prescription images
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let qOoTaRcbText = Rswift.StringResource(key: "QOo-ta-rcb.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: VIEW SLOT
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let tJnOXlNormalTitle = Rswift.StringResource(key: "40t-jn-OXl.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: W
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let mZWFyUCaNormalTitle = Rswift.StringResource(key: "mZW-Fy-uCa.normalTitle", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Write review here....
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let cDxBnWrdText = Rswift.StringResource(key: "CDx-Bn-wrd.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: You can only track your order after expected delivery time.
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let jEjDtBweText = Rswift.StringResource(key: "jEj-Dt-Bwe.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: You haven't placed any orders yet!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let rCp2R3y3Text = Rswift.StringResource(key: "rCp-2R-3y3.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let dqfUhLBKText = Rswift.StringResource(key: "DQF-uh-lBK.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let l9vZf5f2Text = Rswift.StringResource(key: "L9v-Zf-5f2.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let lrtNxQTEText = Rswift.StringResource(key: "LRT-Nx-qTE.text", tableName: "Order", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: by Adidas
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let n1iDqXkaText = Rswift.StringResource(key: "N1i-dq-xka.text", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: e.g. John Doe
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let kmOOaHvqPlaceholder = Rswift.StringResource(key: "kmO-oa-hvq.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: xxxx-xxxx-xxxx-xxxx
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static let iyCBwKtvPlaceholder = Rswift.StringResource(key: "IyC-Bw-ktv.placeholder", tableName: "Order", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)

      /// en translation: 0.0
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oMzJyPU2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OMz-Jy-pU2.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "OMz-Jy-pU2.text"
        }

        return NSLocalizedString("OMz-Jy-pU2.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: 0.0
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func eaNL2H48Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eaN-l2-h48.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "eaN-l2-h48.text"
        }

        return NSLocalizedString("eaN-l2-h48.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: 0.0
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gcGDP9taText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gcG-dP-9ta.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "gcG-dP-9ta.text"
        }

        return NSLocalizedString("gcG-dP-9ta.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: 9
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func sraFoKuzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SRA-fo-kuz.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "SRA-fo-kuz.text"
        }

        return NSLocalizedString("SRA-fo-kuz.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: 9
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mSUI96XoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mSU-I9-6Xo.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "mSU-I9-6Xo.text"
        }

        return NSLocalizedString("mSU-I9-6Xo.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Add new
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bc1RnW2pNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BC1-rn-w2p.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "BC1-rn-w2p.normalTitle"
        }

        return NSLocalizedString("BC1-rn-w2p.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: AddOn Charges
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func krEI3EpeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KrE-i3-Epe.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "KrE-i3-Epe.text"
        }

        return NSLocalizedString("KrE-i3-Epe.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Additional remarks
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fRRKmGYcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fRR-km-gYc.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fRR-km-gYc.text"
        }

        return NSLocalizedString("fRR-km-gYc.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Additional remarks
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gMw8sZL8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GMw-8s-ZL8.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "GMw-8s-ZL8.text"
        }

        return NSLocalizedString("GMw-8s-ZL8.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Address Detail
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lpVZeQtgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LpV-ze-Qtg.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "LpV-ze-Qtg.text"
        }

        return NSLocalizedString("LpV-ze-Qtg.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Adidas Ultraboost Shoes
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mjxGAIksText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mjx-gA-iks.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Mjx-gA-iks.text"
        }

        return NSLocalizedString("Mjx-gA-iks.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Agent Detail
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lXdF9ZFhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LXd-F9-ZFh.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "LXd-F9-ZFh.text"
        }

        return NSLocalizedString("LXd-F9-ZFh.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: BOOK NOW
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oO7FrTtXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oO7-Fr-ttX.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "oO7-Fr-ttX.normalTitle"
        }

        return NSLocalizedString("oO7-Fr-ttX.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func t1x0y5dxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t1x-0y-5dx.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "t1x-0y-5dx.normalTitle"
        }

        return NSLocalizedString("t1x-0y-5dx.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: CHANGE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func aNFFfOmENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aNF-Ff-OmE.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "aNF-Ff-OmE.normalTitle"
        }

        return NSLocalizedString("aNF-Ff-OmE.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lfjRjQwRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lfj-rj-QwR.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "lfj-rj-QwR.normalTitle"
        }

        return NSLocalizedString("lfj-rj-QwR.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func qC4NpLSvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qC4-np-lSv.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "qC4-np-lSv.text"
        }

        return NSLocalizedString("qC4-np-lSv.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func vWjTkHoQPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vWj-Tk-HoQ.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "vWj-Tk-HoQ.placeholder"
        }

        return NSLocalizedString("vWj-Tk-HoQ.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Card details
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mu241DpdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mu2-41-Dpd.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "mu2-41-Dpd.text"
        }

        return NSLocalizedString("mu2-41-Dpd.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Card holder's name
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zisXVORgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zis-xV-ORg.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Zis-xV-ORg.text"
        }

        return NSLocalizedString("Zis-xV-ORg.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Card number
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func d5IHA6cFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d5I-hA-6cF.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "d5I-hA-6cF.text"
        }

        return NSLocalizedString("d5I-hA-6cF.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Cash on delivery
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fxwKuZeuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fxw-Ku-Zeu.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fxw-Ku-Zeu.normalTitle"
        }

        return NSLocalizedString("fxw-Ku-Zeu.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Choose payment option
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rcSKQRrxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RcS-KQ-Rrx.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "RcS-KQ-Rrx.text"
        }

        return NSLocalizedString("RcS-KQ-Rrx.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Chris Martin
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cDyOhN71Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CDy-oh-n71.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "CDy-oh-n71.text"
        }

        return NSLocalizedString("CDy-oh-n71.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Chris Martin
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func uEoNc8UIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uEo-nc-8UI.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "uEo-nc-8UI.text"
        }

        return NSLocalizedString("uEo-nc-8UI.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Chris Martin
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bQzCHYSAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bQz-cH-YSA.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "bQz-cH-YSA.text"
        }

        return NSLocalizedString("bQz-cH-YSA.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Click '+ Add new' to add an address
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zyI0jXWBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zyI-0j-xWB.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zyI-0j-xWB.text"
        }

        return NSLocalizedString("zyI-0j-xWB.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Completed Orders
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func tbpSqSU9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TBP-sq-sU9.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "TBP-sq-sU9.normalTitle"
        }

        return NSLocalizedString("TBP-sq-sU9.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func z4gTHI8eNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Z4g-tH-i8e.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Z4g-tH-i8e.normalTitle"
        }

        return NSLocalizedString("Z4g-tH-i8e.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Credit/Debit Card
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func vecGvZSnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vec-Gv-zSn.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "vec-Gv-zSn.normalTitle"
        }

        return NSLocalizedString("vec-Gv-zSn.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Current Orders
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ohYKD9GOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OhY-KD-9GO.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "OhY-KD-9GO.text"
        }

        return NSLocalizedString("OhY-KD-9GO.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY AT
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oOMElKD8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oOM-El-KD8.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "oOM-El-KD8.text"
        }

        return NSLocalizedString("oOM-El-KD8.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gdQgIqcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9GD-Qg-iqc.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "9GD-Qg-iqc.text"
        }

        return NSLocalizedString("9GD-Qg-iqc.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Charges
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func b5zSlVgKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b5z-sl-VgK.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "b5z-sl-VgK.text"
        }

        return NSLocalizedString("b5z-sl-VgK.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gQa6lIRJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GQa-6l-IRJ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "GQa-6l-IRJ.text"
        }

        return NSLocalizedString("GQa-6l-IRJ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func vUCM0NVGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vUC-m0-nVG.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "vUC-m0-nVG.text"
        }

        return NSLocalizedString("vUC-m0-nVG.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery On
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jyfYTYhiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jyf-yT-yhi.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Jyf-yT-yhi.text"
        }

        return NSLocalizedString("Jyf-yT-yhi.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery On
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oaQDeMlJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OaQ-De-mlJ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "OaQ-De-mlJ.text"
        }

        return NSLocalizedString("OaQ-De-mlJ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func b6Z3eWrCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b6Z-3e-WrC.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "b6Z-3e-WrC.text"
        }

        return NSLocalizedString("b6Z-3e-WrC.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func pc1XrQOUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PC1-xr-qOU.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "PC1-xr-qOU.text"
        }

        return NSLocalizedString("PC1-xr-qOU.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Delivery charges
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func qWFAPKFxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qWF-aP-kFx.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "qWF-aP-kFx.text"
        }

        return NSLocalizedString("qWF-aP-kFx.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xyPKQ3DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Xy-pK-q3D.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "9Xy-pK-q3D.text"
        }

        return NSLocalizedString("9Xy-pK-q3D.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mu3IVDr4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mu3-IV-Dr4.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Mu3-IV-Dr4.text"
        }

        return NSLocalizedString("Mu3-IV-Dr4.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func wUj2wQzsDisabledTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wUj-2w-Qzs.disabledTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "wUj-2w-Qzs.disabledTitle"
        }

        return NSLocalizedString("wUj-2w-Qzs.disabledTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func wUj2wQzsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wUj-2w-Qzs.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "wUj-2w-Qzs.normalTitle"
        }

        return NSLocalizedString("wUj-2w-Qzs.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Expiry
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rBhFjZRXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RBh-Fj-ZRX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "RBh-Fj-ZRX.text"
        }

        return NSLocalizedString("RBh-Fj-ZRX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: F
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func o0gDdN6aNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O0g-dd-n6a.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "O0g-dd-n6a.normalTitle"
        }

        return NSLocalizedString("O0g-dd-n6a.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Handling fee
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func d6LMRAisText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d6L-MR-Ais.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "d6L-MR-Ais.text"
        }

        return NSLocalizedString("d6L-MR-Ais.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Handling fee
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rq67MAV1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rq6-7M-AV1.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Rq6-7M-AV1.text"
        }

        return NSLocalizedString("Rq6-7M-AV1.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Instructions
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func w6DDAHkgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W6D-dA-hkg.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "W6D-dA-hkg.text"
        }

        return NSLocalizedString("W6D-dA-hkg.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func emcakivjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EMC-aK-IVJ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "EMC-aK-IVJ.text"
        }

        return NSLocalizedString("EMC-aK-IVJ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rwJMNlVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Rw-JM-NlV.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "5Rw-JM-NlV.text"
        }

        return NSLocalizedString("5Rw-JM-NlV.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jer2qIkcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jer-2q-ikc.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "jer-2q-ikc.text"
        }

        return NSLocalizedString("jer-2q-ikc.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ltNM7WdVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LtN-m7-wdV.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "LtN-m7-wdV.text"
        }

        return NSLocalizedString("LtN-m7-wdV.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bcIAxKctNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bcI-ax-kct.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "bcI-ax-kct.normalTitle"
        }

        return NSLocalizedString("bcI-ax-kct.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: MM/YY
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jH5YnSEfPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jH5-Yn-SEf.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "jH5-Yn-SEf.placeholder"
        }

        return NSLocalizedString("jH5-Yn-SEf.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Morning
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func azHOW9ARText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AzH-oW-9AR.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "AzH-oW-9AR.text"
        }

        return NSLocalizedString("AzH-oW-9AR.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func avzIMTgpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Avz-iM-Tgp.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Avz-iM-Tgp.text"
        }

        return NSLocalizedString("Avz-iM-Tgp.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bOcSuLBXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bOc-su-lBX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "bOc-su-lBX.text"
        }

        return NSLocalizedString("bOc-su-lBX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bdZHFRgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Bd-ZH-FRg.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "5Bd-ZH-FRg.text"
        }

        return NSLocalizedString("5Bd-ZH-FRg.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cmNLXK4gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cmN-LX-K4g.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "cmN-LX-K4g.text"
        }

        return NSLocalizedString("cmN-LX-K4g.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func epM1gUvKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EpM-1g-UvK.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "EpM-1g-UvK.text"
        }

        return NSLocalizedString("EpM-1g-UvK.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func f8lLI8vZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f8l-lI-8vZ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "f8l-lI-8vZ.text"
        }

        return NSLocalizedString("f8l-lI-8vZ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fLGVJS8qText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fLG-VJ-S8q.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fLG-VJ-S8q.text"
        }

        return NSLocalizedString("fLG-VJ-S8q.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fVn56FsJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fVn-56-FsJ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fVn-56-FsJ.text"
        }

        return NSLocalizedString("fVn-56-FsJ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gq7Zx4zAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gq7-Zx-4zA.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "gq7-Zx-4zA.text"
        }

        return NSLocalizedString("gq7-Zx-4zA.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func izYPHXZkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("izY-pH-xZk.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "izY-pH-xZk.text"
        }

        return NSLocalizedString("izY-pH-xZk.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jkiR9N7CText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jki-R9-N7C.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Jki-R9-N7C.text"
        }

        return NSLocalizedString("Jki-R9-N7C.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ktlKNFsAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ktl-kN-FsA.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "ktl-kN-FsA.text"
        }

        return NSLocalizedString("ktl-kN-FsA.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mQYEWFFPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mQY-eW-FFP.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "mQY-eW-FFP.text"
        }

        return NSLocalizedString("mQY-eW-FFP.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mdkSnNuaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MDK-Sn-nua.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "MDK-Sn-nua.text"
        }

        return NSLocalizedString("MDK-Sn-nua.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func n2CKUMfUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n2C-kU-MfU.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "n2C-kU-MfU.text"
        }

        return NSLocalizedString("n2C-kU-MfU.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func o8pWcUmCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o8p-wc-UmC.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "o8p-wc-UmC.text"
        }

        return NSLocalizedString("o8p-wc-UmC.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oztctf6mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OZT-CT-F6m.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "OZT-CT-F6m.text"
        }

        return NSLocalizedString("OZT-CT-F6m.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func pNIYT0LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3pN-iY-t0L.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "3pN-iY-t0L.text"
        }

        return NSLocalizedString("3pN-iY-t0L.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func qiksVdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("90Q-iK-sVd.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "90Q-iK-sVd.text"
        }

        return NSLocalizedString("90Q-iK-sVd.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func r20sS3YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9r2-0s-S3Y.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "9r2-0s-S3Y.text"
        }

        return NSLocalizedString("9r2-0s-S3Y.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func r2cZ0WB5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r2c-z0-wB5.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "r2c-z0-wB5.text"
        }

        return NSLocalizedString("r2c-z0-wB5.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func tj8A1EcRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tj8-a1-EcR.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Tj8-a1-EcR.text"
        }

        return NSLocalizedString("Tj8-a1-EcR.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func vQU8WrSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8vQ-u8-wrS.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "8vQ-u8-wrS.text"
        }

        return NSLocalizedString("8vQ-u8-wrS.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func x7kRFR7OText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X7k-RF-R7O.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "X7k-RF-R7O.text"
        }

        return NSLocalizedString("X7k-RF-R7O.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xMLMW8BrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xML-mW-8Br.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "xML-mW-8Br.text"
        }

        return NSLocalizedString("xML-mW-8Br.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xfULaOypText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XfU-La-oyp.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "XfU-La-oyp.text"
        }

        return NSLocalizedString("XfU-La-oyp.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xsWYZ0HdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XsW-YZ-0Hd.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "XsW-YZ-0Hd.text"
        }

        return NSLocalizedString("XsW-YZ-0Hd.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func y9UxOlXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Y9-ux-olX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "4Y9-ux-olX.text"
        }

        return NSLocalizedString("4Y9-ux-olX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func yM83YGOUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yM8-3Y-gOU.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "yM8-3Y-gOU.text"
        }

        return NSLocalizedString("yM8-3Y-gOU.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zLd6yFDDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zLd-6y-fDD.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zLd-6y-fDD.text"
        }

        return NSLocalizedString("zLd-6y-fDD.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zehIxNRvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zeh-ix-nRv.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Zeh-ix-nRv.text"
        }

        return NSLocalizedString("Zeh-ix-nRv.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zzk5XFcfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zzk-5X-fcf.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zzk-5X-fcf.text"
        }

        return NSLocalizedString("zzk-5X-fcf.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bnKoBV0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3BN-Ko-BV0.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "3BN-Ko-BV0.text"
        }

        return NSLocalizedString("3BN-Ko-BV0.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func c2YBcXsaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C2Y-Bc-Xsa.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "C2Y-Bc-Xsa.text"
        }

        return NSLocalizedString("C2Y-Bc-Xsa.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cm8Up4V2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cm8-up-4V2.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "cm8-up-4V2.text"
        }

        return NSLocalizedString("cm8-up-4V2.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func e296ZGTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8E2-96-ZGT.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "8E2-96-ZGT.text"
        }

        return NSLocalizedString("8E2-96-ZGT.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func gx6UlXxeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gx6-ul-xxe.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "gx6-ul-xxe.text"
        }

        return NSLocalizedString("gx6-ul-xxe.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func itFNS3MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4it-FN-s3M.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "4it-FN-s3M.text"
        }

        return NSLocalizedString("4it-FN-s3M.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lFRKCOXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0lF-RK-cOX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "0lF-RK-cOX.text"
        }

        return NSLocalizedString("0lF-RK-cOX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ll8VFYbWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ll8-vF-YbW.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Ll8-vF-YbW.text"
        }

        return NSLocalizedString("Ll8-vF-YbW.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func pTsEDIFtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pTs-eD-iFt.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "pTs-eD-iFt.text"
        }

        return NSLocalizedString("pTs-eD-iFt.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func uhXLXHfrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uhX-LX-hfr.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "uhX-LX-hfr.text"
        }

        return NSLocalizedString("uhX-LX-hfr.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xuk3YSSDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xuk-3Y-SSD.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Xuk-3Y-SSD.text"
        }

        return NSLocalizedString("Xuk-3Y-SSD.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Near You
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func bcEUBFP9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bcE-UB-FP9.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "bcE-UB-FP9.text"
        }

        return NSLocalizedString("bcE-UB-FP9.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Net Payable
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func kqJ8XMgXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KqJ-8X-mgX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "KqJ-8X-mgX.text"
        }

        return NSLocalizedString("KqJ-8X-mgX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Net Payable
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zQcRDAtXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zQc-RD-atX.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zQc-RD-atX.text"
        }

        return NSLocalizedString("zQc-RD-atX.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Net total
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cSVXTNKlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cSV-xT-nKl.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "cSV-xT-nKl.text"
        }

        return NSLocalizedString("cSV-xT-nKl.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Net total
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func wy4HbFLKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WY4-hb-fLK.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "WY4-hb-fLK.text"
        }

        return NSLocalizedString("WY4-hb-fLK.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func t4TUNOg3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T4T-uN-Og3.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "T4T-uN-Og3.normalTitle"
        }

        return NSLocalizedString("T4T-uN-Og3.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: No Order Scheduled!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func sbi3pPq9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sbi-3p-Pq9.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "sbi-3p-Pq9.text"
        }

        return NSLocalizedString("sbi-3p-Pq9.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: No Orders Found!
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func i7x84U3zText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I7x-84-u3z.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "I7x-84-u3z.text"
        }

        return NSLocalizedString("I7x-84-u3z.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: No agent found
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cYOYo9DbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cYO-Yo-9Db.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "cYO-Yo-9Db.text"
        }

        return NSLocalizedString("cYO-Yo-9Db.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: No orders to Rate!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cmjBjJNMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cmj-bj-jNM.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Cmj-bj-jNM.text"
        }

        return NSLocalizedString("Cmj-bj-jNM.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Occupation here
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fZpAAG4lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FZp-aA-g4l.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "FZp-aA-g4l.text"
        }

        return NSLocalizedString("FZp-aA-g4l.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Occupation here  |  14 Years Experience
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func hhMAf6YnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HhM-af-6Yn.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "HhM-af-6Yn.text"
        }

        return NSLocalizedString("HhM-af-6Yn.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Occupation here  |  14 Years Experience
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func v2d4GNonText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v2d-4G-Non.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "v2d-4G-Non.text"
        }

        return NSLocalizedString("v2d-4G-Non.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func uMO004QIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uMO-00-4QI.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "uMO-00-4QI.text"
        }

        return NSLocalizedString("uMO-00-4QI.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func occEJC8AText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Occ-eJ-C8A.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Occ-eJ-C8A.text"
        }

        return NSLocalizedString("Occ-eJ-C8A.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order History
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mx2OfBWoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MX2-of-BWo.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "MX2-of-BWo.text"
        }

        return NSLocalizedString("MX2-of-BWo.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order History
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zixNJUzPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zix-nJ-UzP.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zix-nJ-UzP.text"
        }

        return NSLocalizedString("zix-nJ-UzP.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order No.
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func dGeBuYuJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DGe-bu-YuJ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "DGe-bu-YuJ.text"
        }

        return NSLocalizedString("DGe-bu-YuJ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Schedular
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oveLhTHkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OVE-Lh-THk.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "OVE-Lh-THk.text"
        }

        return NSLocalizedString("OVE-Lh-THk.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Summary
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func qKtVm9U6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QKt-vm-9U6.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "QKt-vm-9U6.text"
        }

        return NSLocalizedString("QKt-vm-9U6.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Summary
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func tk6CISBsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tk6-cI-SBs.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Tk6-cI-SBs.text"
        }

        return NSLocalizedString("Tk6-cI-SBs.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: PAY
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mfO5Kf6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3mf-o5-kf6.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "3mf-o5-kf6.normalTitle"
        }

        return NSLocalizedString("3mf-o5-kf6.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: PAY NOW
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func aH3NNDVKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aH3-nN-dVK.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "aH3-nN-dVK.normalTitle"
        }

        return NSLocalizedString("aH3-nN-dVK.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: PLACE ORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mvCoNfBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4mv-Co-NfB.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "4mv-Co-NfB.normalTitle"
        }

        return NSLocalizedString("4mv-Co-NfB.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: PLACE ORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func tsHWhUQvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TsH-wh-uQv.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "TsH-wh-uQv.normalTitle"
        }

        return NSLocalizedString("TsH-wh-uQv.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func dBgPKNUpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dBg-PK-nUp.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "dBg-PK-nUp.text"
        }

        return NSLocalizedString("dBg-PK-nUp.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Payment Remaining
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fpYQOMpmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fpY-QO-Mpm.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fpY-QO-Mpm.text"
        }

        return NSLocalizedString("fpY-QO-Mpm.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Payment method
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func noLBv1ipText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noL-bv-1ip.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "noL-bv-1ip.text"
        }

        return NSLocalizedString("noL-bv-1ip.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Payment method
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xejcoXfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1XE-jC-OXf.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "1XE-jC-OXf.text"
        }

        return NSLocalizedString("1XE-jC-OXf.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Pending Orders
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func z5aSfGMrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z5a-sf-GMr.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "z5a-sf-GMr.normalTitle"
        }

        return NSLocalizedString("z5a-sf-GMr.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Placed
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fv7iBkwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1fv-7i-Bkw.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "1fv-7i-Bkw.text"
        }

        return NSLocalizedString("1fv-7i-Bkw.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Placed on
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func g8CObUiwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g8C-ob-uiw.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "g8C-ob-uiw.text"
        }

        return NSLocalizedString("g8C-ob-uiw.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Prevoius
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fL3CSELwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fL3-cS-eLw.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fL3-cS-eLw.normalTitle"
        }

        return NSLocalizedString("fL3-cS-eLw.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Promo Code
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func sguBSTzmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sgu-BS-tzm.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "sgu-BS-tzm.text"
        }

        return NSLocalizedString("sgu-BS-tzm.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: REORDER
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ci6BERzdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ci6-BE-rzd.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Ci6-BE-rzd.normalTitle"
        }

        return NSLocalizedString("Ci6-BE-rzd.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: RESULTS
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func hSFZQVZZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hSF-ZQ-vZZ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "hSF-ZQ-vZZ.text"
        }

        return NSLocalizedString("hSF-ZQ-vZZ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Rate Agent
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jd4VLEtdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jd4-VL-Etd.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Jd4-VL-Etd.normalTitle"
        }

        return NSLocalizedString("Jd4-VL-Etd.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Rate My Order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func d7J2XTvYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d7J-2X-tvY.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "d7J-2X-tvY.text"
        }

        return NSLocalizedString("d7J-2X-tvY.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Rate Order
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func vpHZ5KAMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vpH-Z5-KAM.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "vpH-Z5-KAM.normalTitle"
        }

        return NSLocalizedString("vpH-Z5-KAM.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Rate Supplier
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func hTfH7UFSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hTf-H7-UFS.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "hTf-H7-UFS.normalTitle"
        }

        return NSLocalizedString("hTf-H7-UFS.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Rating & Reviews
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func leh09G6fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Leh-09-G6f.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Leh-09-G6f.text"
        }

        return NSLocalizedString("Leh-09-G6f.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Referral Discount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func uXjYOJKAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uXj-YO-jKA.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "uXj-YO-jKA.text"
        }

        return NSLocalizedString("uXj-YO-jKA.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ddH2C9cNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Dd-h2-C9c.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "2Dd-h2-C9c.normalTitle"
        }

        return NSLocalizedString("2Dd-h2-C9c.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fIxLu4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("98F-ix-Lu4.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "98F-ix-Lu4.normalTitle"
        }

        return NSLocalizedString("98F-ix-Lu4.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: SET SCHEDULE
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func swPCgVLANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SwP-cg-VLA.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "SwP-cg-VLA.normalTitle"
        }

        return NSLocalizedString("SwP-cg-VLA.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Schedule your order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func n2MTMD76Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N2M-TM-d76.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "N2M-TM-d76.text"
        }

        return NSLocalizedString("N2M-TM-d76.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled Orders
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func zWBMT6YPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zWB-mT-6YP.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "zWB-mT-6YP.text"
        }

        return NSLocalizedString("zWB-mT-6YP.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Search...
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ctPTnFfZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ctP-Tn-ffZ.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "ctP-Tn-ffZ.placeholder"
        }

        return NSLocalizedString("ctP-Tn-ffZ.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Select Agent
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ebj9gStEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EBJ-9g-StE.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "EBJ-9g-StE.text"
        }

        return NSLocalizedString("EBJ-9g-StE.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Select Agent
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func hxzUIZS7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hxz-UI-ZS7.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "hxz-UI-ZS7.text"
        }

        return NSLocalizedString("hxz-UI-ZS7.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Select Dates
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mbwSf22RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mbw-sf-22R.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "mbw-sf-22R.text"
        }

        return NSLocalizedString("mbw-sf-22R.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Select Time Slot
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ieUITXspText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ieU-iT-xsp.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "ieU-iT-xsp.text"
        }

        return NSLocalizedString("ieU-iT-xsp.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Selected Questions
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func aFcT0VoKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AFc-T0-voK.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "AFc-T0-voK.text"
        }

        return NSLocalizedString("AFc-T0-voK.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Shipped
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xF6SZ9wFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xF6-SZ-9wF.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "xF6-SZ-9wF.text"
        }

        return NSLocalizedString("xF6-SZ-9wF.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Status
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func yXD7zP5WText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yXD-7z-P5W.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "yXD-7z-P5W.text"
        }

        return NSLocalizedString("yXD-7z-P5W.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xvkZfSs2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XVK-zf-ss2.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "XVK-zf-ss2.normalTitle"
        }

        return NSLocalizedString("XVK-zf-ss2.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Start On
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func fnOMaTyQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fnO-ma-tyQ.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "fnO-ma-tyQ.text"
        }

        return NSLocalizedString("fnO-ma-tyQ.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func i5nJcZgzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i5n-Jc-Zgz.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "i5n-Jc-Zgz.text"
        }

        return NSLocalizedString("i5n-Jc-Zgz.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: SubTotal
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func xawVnFLiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xaw-Vn-fLi.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "xaw-Vn-fLi.text"
        }

        return NSLocalizedString("xaw-Vn-fLi.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func v8IB8ILfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v8I-B8-ILf.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "v8I-B8-ILf.normalTitle"
        }

        return NSLocalizedString("v8I-B8-ILf.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Supplier Service Charge
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lsCgFOsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Ls-cg-FOs.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "7Ls-cg-FOs.text"
        }

        return NSLocalizedString("7Ls-cg-FOs.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Support Email
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func uoiIaAH1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uoi-ia-AH1.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Uoi-ia-AH1.normalTitle"
        }

        return NSLocalizedString("Uoi-ia-AH1.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func g4HF1IVTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("G4H-f1-IVT.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "G4H-f1-IVT.normalTitle"
        }

        return NSLocalizedString("G4H-f1-IVT.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func oqQTPPfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Oq-QT-PPf.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "2Oq-QT-PPf.normalTitle"
        }

        return NSLocalizedString("2Oq-QT-PPf.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Tax
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func nx597Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("862-nX-597.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "862-nX-597.text"
        }

        return NSLocalizedString("862-nX-597.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Tip Amount
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jwBVuMUpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JwB-Vu-MUp.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "JwB-Vu-MUp.text"
        }

        return NSLocalizedString("JwB-Vu-MUp.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Title for your reviews
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func nt1S5F4iPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nt1-s5-F4i.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "Nt1-s5-F4i.placeholder"
        }

        return NSLocalizedString("Nt1-s5-F4i.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rSiVzBxYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RSi-vz-BxY.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "RSi-vz-BxY.text"
        }

        return NSLocalizedString("RSi-vz-BxY.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Track My Order
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lgSAXL7vText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LgS-aX-L7v.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "LgS-aX-L7v.text"
        }

        return NSLocalizedString("LgS-aX-L7v.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Track Order
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func ncelfFfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5NC-EL-FFf.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "5NC-EL-FFf.normalTitle"
        }

        return NSLocalizedString("5NC-EL-FFf.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Uploaded prescription images
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func qOoTaRcbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QOo-ta-rcb.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "QOo-ta-rcb.text"
        }

        return NSLocalizedString("QOo-ta-rcb.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: VIEW SLOT
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func tJnOXlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("40t-jn-OXl.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "40t-jn-OXl.normalTitle"
        }

        return NSLocalizedString("40t-jn-OXl.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: W
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func mZWFyUCaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mZW-Fy-uCa.normalTitle", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "mZW-Fy-uCa.normalTitle"
        }

        return NSLocalizedString("mZW-Fy-uCa.normalTitle", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: Write review here....
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func cDxBnWrdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CDx-Bn-wrd.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "CDx-Bn-wrd.text"
        }

        return NSLocalizedString("CDx-Bn-wrd.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: You can only track your order after expected delivery time.
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func jEjDtBweText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jEj-Dt-Bwe.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "jEj-Dt-Bwe.text"
        }

        return NSLocalizedString("jEj-Dt-Bwe.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: You haven't placed any orders yet!
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func rCp2R3y3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rCp-2R-3y3.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "rCp-2R-3y3.text"
        }

        return NSLocalizedString("rCp-2R-3y3.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func dqfUhLBKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DQF-uh-lBK.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "DQF-uh-lBK.text"
        }

        return NSLocalizedString("DQF-uh-lBK.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func l9vZf5f2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L9v-Zf-5f2.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "L9v-Zf-5f2.text"
        }

        return NSLocalizedString("L9v-Zf-5f2.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: [ 0 Review ]
      ///
      /// Locales: fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func lrtNxQTEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LRT-Nx-qTE.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "LRT-Nx-qTE.text"
        }

        return NSLocalizedString("LRT-Nx-qTE.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: by Adidas
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func n1iDqXkaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N1i-dq-xka.text", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "N1i-dq-xka.text"
        }

        return NSLocalizedString("N1i-dq-xka.text", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: e.g. John Doe
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func kmOOaHvqPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kmO-oa-hvq.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "kmO-oa-hvq.placeholder"
        }

        return NSLocalizedString("kmO-oa-hvq.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      /// en translation: xxxx-xxxx-xxxx-xxxx
      ///
      /// Locales: es, fr, it, ja, nl, ja, en, ar, zh-Hans, si-LK, sq
      static func iyCBwKtvPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IyC-Bw-ktv.placeholder", tableName: "Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Order", preferredLanguages: preferredLanguages) else {
          return "IyC-Bw-ktv.placeholder"
        }

        return NSLocalizedString("IyC-Bw-ktv.placeholder", tableName: "Order", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.payment` struct is generated, and contains static references to 31 localization keys.
    struct payment {
      /// en translation: *Nota: Puedes modificar los datos de la tarjeta para realizar diferentes pruebas.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let r16EhAChText = Rswift.StringResource(key: "R16-Eh-aCh.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: 000
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let n1PUIQ3LPlaceholder = Rswift.StringResource(key: "N1P-uI-Q3L.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add Card
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let oamo4FeANormalTitle = Rswift.StringResource(key: "OAM-O4-feA.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add Card
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let bKCX8RjjNormalTitle = Rswift.StringResource(key: "bKC-x8-Rjj.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Add card to complete payment
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let ed3zOTVText = Rswift.StringResource(key: "3Ed-3z-OTV.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Año
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cocZf1P6Placeholder = Rswift.StringResource(key: "coc-zf-1P6.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CHOOSE PAYMENT RECEIPT
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let sYjDuLYVNormalTitle = Rswift.StringResource(key: "SYj-du-lYV.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Card Holder
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let xPuO8MWxText = Rswift.StringResource(key: "xPu-o8-MWx.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Código de seguridad:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let fWCz6quText = Rswift.StringResource(key: "2fW-cz-6qu.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Datos de salida:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let eYpH4SMAText = Rswift.StringResource(key: "eYp-h4-SMA.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let oBbXr7qINormalTitle = Rswift.StringResource(key: "OBb-Xr-7qI.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Email:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let l9tGAE6xText = Rswift.StringResource(key: "L9t-gA-E6x.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Expira:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nnv0zYwZText = Rswift.StringResource(key: "NNV-0z-ywZ.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Expiry
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nk4M57PHText = Rswift.StringResource(key: "nk4-m5-7PH.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Fill Card Details
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let jzwm0YQPText = Rswift.StringResource(key: "JZW-M0-yQP.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Fill Card Details
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let dsuLVIfuText = Rswift.StringResource(key: "dsu-lV-Ifu.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let bvKOGKUzText = Rswift.StringResource(key: "bvK-OG-kUz.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let iSHlCKaText = Rswift.StringResource(key: "0iS-hl-cKa.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let vavZnCouText = Rswift.StringResource(key: "vav-zn-cou.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Mes
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let hf75OGD3Placeholder = Rswift.StringResource(key: "Hf7-5O-gD3.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Nombre
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let m6rZH9cvPlaceholder = Rswift.StringResource(key: "M6r-ZH-9cv.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Nombre que aparece en la tarjeta:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let eg9H0WcgText = Rswift.StringResource(key: "Eg9-H0-Wcg.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Número de Tarjeta
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let rEd7yKsFPlaceholder = Rswift.StringResource(key: "REd-7y-ksF.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Número de tarjeta:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let dxqjbRdVText = Rswift.StringResource(key: "DXQ-jB-rdV.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pay Now
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let v9MPeTemNormalTitle = Rswift.StringResource(key: "v9M-Pe-tem.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Payment Details:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let uUzNgS8hText = Rswift.StringResource(key: "UUz-Ng-s8h.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Phone Number:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let mGkRDLzoText = Rswift.StringResource(key: "MGk-RD-Lzo.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Salida de Token
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let oJxOQEA8Text = Rswift.StringResource(key: "oJx-oQ-EA8.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Salida de UUID
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nbHWDYbText = Rswift.StringResource(key: "4nb-hW-dYb.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Card for Payment
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nDa5aK1ZText = Rswift.StringResource(key: "nDa-5a-K1Z.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: TOKENIZE!
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let zNl4mfNormalTitle = Rswift.StringResource(key: "91z-nl-4mf.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)

      /// en translation: *Nota: Puedes modificar los datos de la tarjeta para realizar diferentes pruebas.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func r16EhAChText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R16-Eh-aCh.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "R16-Eh-aCh.text"
        }

        return NSLocalizedString("R16-Eh-aCh.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: 000
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func n1PUIQ3LPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N1P-uI-Q3L.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "N1P-uI-Q3L.placeholder"
        }

        return NSLocalizedString("N1P-uI-Q3L.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Add Card
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func oamo4FeANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OAM-O4-feA.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "OAM-O4-feA.normalTitle"
        }

        return NSLocalizedString("OAM-O4-feA.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Add Card
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func bKCX8RjjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bKC-x8-Rjj.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "bKC-x8-Rjj.normalTitle"
        }

        return NSLocalizedString("bKC-x8-Rjj.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Add card to complete payment
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func ed3zOTVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Ed-3z-OTV.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "3Ed-3z-OTV.text"
        }

        return NSLocalizedString("3Ed-3z-OTV.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Año
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cocZf1P6Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coc-zf-1P6.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "coc-zf-1P6.placeholder"
        }

        return NSLocalizedString("coc-zf-1P6.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: CHOOSE PAYMENT RECEIPT
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func sYjDuLYVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SYj-du-lYV.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "SYj-du-lYV.normalTitle"
        }

        return NSLocalizedString("SYj-du-lYV.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Card Holder
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func xPuO8MWxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xPu-o8-MWx.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "xPu-o8-MWx.text"
        }

        return NSLocalizedString("xPu-o8-MWx.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Código de seguridad:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func fWCz6quText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2fW-cz-6qu.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "2fW-cz-6qu.text"
        }

        return NSLocalizedString("2fW-cz-6qu.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Datos de salida:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func eYpH4SMAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eYp-h4-SMA.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "eYp-h4-SMA.text"
        }

        return NSLocalizedString("eYp-h4-SMA.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func oBbXr7qINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OBb-Xr-7qI.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "OBb-Xr-7qI.normalTitle"
        }

        return NSLocalizedString("OBb-Xr-7qI.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Email:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func l9tGAE6xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L9t-gA-E6x.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "L9t-gA-E6x.text"
        }

        return NSLocalizedString("L9t-gA-E6x.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Expira:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nnv0zYwZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NNV-0z-ywZ.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "NNV-0z-ywZ.text"
        }

        return NSLocalizedString("NNV-0z-ywZ.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Expiry
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nk4M57PHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nk4-m5-7PH.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "nk4-m5-7PH.text"
        }

        return NSLocalizedString("nk4-m5-7PH.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Fill Card Details
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func jzwm0YQPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JZW-M0-yQP.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "JZW-M0-yQP.text"
        }

        return NSLocalizedString("JZW-M0-yQP.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Fill Card Details
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func dsuLVIfuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dsu-lV-Ifu.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "dsu-lV-Ifu.text"
        }

        return NSLocalizedString("dsu-lV-Ifu.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func bvKOGKUzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bvK-OG-kUz.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "bvK-OG-kUz.text"
        }

        return NSLocalizedString("bvK-OG-kUz.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func iSHlCKaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0iS-hl-cKa.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "0iS-hl-cKa.text"
        }

        return NSLocalizedString("0iS-hl-cKa.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func vavZnCouText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vav-zn-cou.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "vav-zn-cou.text"
        }

        return NSLocalizedString("vav-zn-cou.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Mes
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func hf75OGD3Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hf7-5O-gD3.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "Hf7-5O-gD3.placeholder"
        }

        return NSLocalizedString("Hf7-5O-gD3.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Nombre
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func m6rZH9cvPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M6r-ZH-9cv.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "M6r-ZH-9cv.placeholder"
        }

        return NSLocalizedString("M6r-ZH-9cv.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Nombre que aparece en la tarjeta:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func eg9H0WcgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eg9-H0-Wcg.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "Eg9-H0-Wcg.text"
        }

        return NSLocalizedString("Eg9-H0-Wcg.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Número de Tarjeta
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func rEd7yKsFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REd-7y-ksF.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "REd-7y-ksF.placeholder"
        }

        return NSLocalizedString("REd-7y-ksF.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Número de tarjeta:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func dxqjbRdVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DXQ-jB-rdV.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "DXQ-jB-rdV.text"
        }

        return NSLocalizedString("DXQ-jB-rdV.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Pay Now
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func v9MPeTemNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v9M-Pe-tem.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "v9M-Pe-tem.normalTitle"
        }

        return NSLocalizedString("v9M-Pe-tem.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Payment Details:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func uUzNgS8hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UUz-Ng-s8h.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "UUz-Ng-s8h.text"
        }

        return NSLocalizedString("UUz-Ng-s8h.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number:
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func mGkRDLzoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MGk-RD-Lzo.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "MGk-RD-Lzo.text"
        }

        return NSLocalizedString("MGk-RD-Lzo.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Salida de Token
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func oJxOQEA8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oJx-oQ-EA8.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "oJx-oQ-EA8.text"
        }

        return NSLocalizedString("oJx-oQ-EA8.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Salida de UUID
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nbHWDYbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4nb-hW-dYb.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "4nb-hW-dYb.text"
        }

        return NSLocalizedString("4nb-hW-dYb.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Select Card for Payment
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nDa5aK1ZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nDa-5a-K1Z.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "nDa-5a-K1Z.text"
        }

        return NSLocalizedString("nDa-5a-K1Z.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: TOKENIZE!
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func zNl4mfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("91z-nl-4mf.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "91z-nl-4mf.normalTitle"
        }

        return NSLocalizedString("91z-nl-4mf.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.photoLibrary` struct is generated, and contains static references to 9 localization keys.
    struct photoLibrary {
      /// en translation: %@ Photos
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let album_IMAGE_COUNT_FORMAT = Rswift.StringResource(key: "ALBUM_IMAGE_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: %@ Videos
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let album_VIDEO_COUNT_FORMAT = Rswift.StringResource(key: "ALBUM_VIDEO_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: %@, %@
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let album_TWO_TYPES_LABEL_COMMAS = Rswift.StringResource(key: "ALBUM_TWO_TYPES_LABEL_COMMAS", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: 1 Photo
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let _ALBUM_PHOTO = Rswift.StringResource(key: "1_ALBUM_PHOTO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: 1 Video
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let _ALBUM_VIDEO = Rswift.StringResource(key: "1_ALBUM_VIDEO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: From %@
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let stream_SHARED_BY_SUBTITLE = Rswift.StringResource(key: "STREAM_SHARED_BY_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: From You
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let stream_SHARED_BY_ME_SUBTITLE = Rswift.StringResource(key: "STREAM_SHARED_BY_ME_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)
      /// en translation: Retake
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static let retakE = Rswift.StringResource(key: "RETAKE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "ta-LK", "ur", "fr", "it", "nl", "de", "sq"], comment: nil)

      /// en translation: %@ Photos
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func album_IMAGE_COUNT_FORMAT(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ALBUM_IMAGE_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "ALBUM_IMAGE_COUNT_FORMAT"
        }

        let format = NSLocalizedString("ALBUM_IMAGE_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Videos
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func album_VIDEO_COUNT_FORMAT(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ALBUM_VIDEO_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "ALBUM_VIDEO_COUNT_FORMAT"
        }

        let format = NSLocalizedString("ALBUM_VIDEO_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@, %@
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func album_TWO_TYPES_LABEL_COMMAS(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ALBUM_TWO_TYPES_LABEL_COMMAS", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "ALBUM_TWO_TYPES_LABEL_COMMAS"
        }

        let format = NSLocalizedString("ALBUM_TWO_TYPES_LABEL_COMMAS", tableName: "PhotoLibrary", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: 1 Photo
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func _ALBUM_PHOTO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1_ALBUM_PHOTO", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "1_ALBUM_PHOTO"
        }

        return NSLocalizedString("1_ALBUM_PHOTO", tableName: "PhotoLibrary", bundle: bundle, comment: "")
      }

      /// en translation: 1 Video
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func _ALBUM_VIDEO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1_ALBUM_VIDEO", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "1_ALBUM_VIDEO"
        }

        return NSLocalizedString("1_ALBUM_VIDEO", tableName: "PhotoLibrary", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func canceL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "CANCEL"
        }

        return NSLocalizedString("CANCEL", tableName: "PhotoLibrary", bundle: bundle, comment: "")
      }

      /// en translation: From %@
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func stream_SHARED_BY_SUBTITLE(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("STREAM_SHARED_BY_SUBTITLE", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "STREAM_SHARED_BY_SUBTITLE"
        }

        let format = NSLocalizedString("STREAM_SHARED_BY_SUBTITLE", tableName: "PhotoLibrary", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: From You
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func stream_SHARED_BY_ME_SUBTITLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("STREAM_SHARED_BY_ME_SUBTITLE", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "STREAM_SHARED_BY_ME_SUBTITLE"
        }

        return NSLocalizedString("STREAM_SHARED_BY_ME_SUBTITLE", tableName: "PhotoLibrary", bundle: bundle, comment: "")
      }

      /// en translation: Retake
      ///
      /// Locales: en, ar, zh-Hans, ta-LK, ur, fr, it, nl, de, sq
      static func retakE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RETAKE", tableName: "PhotoLibrary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PhotoLibrary", preferredLanguages: preferredLanguages) else {
          return "RETAKE"
        }

        return NSLocalizedString("RETAKE", tableName: "PhotoLibrary", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.register` struct is generated, and contains static references to 62 localization keys.
    struct register {
      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let jRjBFRvuNormalTitle = Rswift.StringResource(key: "jRj-BF-Rvu.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let lAxAlIpkNormalTitle = Rswift.StringResource(key: "LAx-al-ipk.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nb3Cj9YcNormalTitle = Rswift.StringResource(key: "nb3-Cj-9Yc.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By continuing, you agree to CARES's Terms and Conditions and confirm that you have read CARES's Privacy Policy
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cdbL7ESgText = Rswift.StringResource(key: "cdb-L7-ESg.text", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let lx4G6YBtText = Rswift.StringResource(key: "Lx4-G6-yBt.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let olSFa3oAText = Rswift.StringResource(key: "olS-fa-3oA.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let b8SrMkTText = Rswift.StringResource(key: "1b8-sr-mkT.text", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let uNqAHZGhNormalTitle = Rswift.StringResource(key: "uNq-aH-zGh.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CONTINUE WITH FACEBOOK
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let h0D3NOvNormalTitle = Rswift.StringResource(key: "4h0-d3-nOv.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: CREATE NEW ACCOUNT
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let uB3ItR5GNormalTitle = Rswift.StringResource(key: "uB3-It-r5G.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cWYYBNwwSelectedTitle = Rswift.StringResource(key: "cWY-YB-nww.selectedTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Check
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cWYYBNwwNormalTitle = Rswift.StringResource(key: "cWY-YB-nww.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Check
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let hRbQ3Pn8NormalTitle = Rswift.StringResource(key: "HRb-Q3-Pn8.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose Location
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let a8APQYp3Text = Rswift.StringResource(key: "a8A-PQ-Yp3.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose Location
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let mJIEj6NCText = Rswift.StringResource(key: "mJI-Ej-6NC.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Choose location from map
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let hbgTQFTQNormalTitle = Rswift.StringResource(key: "Hbg-TQ-FTQ.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let bodBaSNormalTitle = Rswift.StringResource(key: "72B-oD-BaS.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let mLR0w9NormalTitle = Rswift.StringResource(key: "20m-lR-0w9.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let pndXtGWyNormalTitle = Rswift.StringResource(key: "PND-Xt-GWy.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let gIGAsYiUNormalTitle = Rswift.StringResource(key: "gIG-As-YiU.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let vlFKPCnNormalTitle = Rswift.StringResource(key: "3Vl-FK-PCn.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let z5C92zqNormalTitle = Rswift.StringResource(key: "4z5-c9-2zq.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Create your account
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let gD5VWSSdText = Rswift.StringResource(key: "gD5-VW-SSd.text", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let aSlRVPBJNormalTitle = Rswift.StringResource(key: "ASl-RV-PBJ.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let ldfa9M9UNormalTitle = Rswift.StringResource(key: "LDF-a9-m9U.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let aHG5GKCrPlaceholder = Rswift.StringResource(key: "aHG-5G-kCr.placeholder", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Enter Mobile
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let aWTDTFFQText = Rswift.StringResource(key: "aWT-dT-fFQ.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Enter country, state, city
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let nrBVeUSGText = Rswift.StringResource(key: "NrB-Ve-uSG.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Enter the OTP sent to
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let dAsHUHPbText = Rswift.StringResource(key: "dAs-hU-HPb.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: FINISH
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let l0BNUVhENormalTitle = Rswift.StringResource(key: "L0B-NU-vhE.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: FORGOT PASSWORD?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let ofyPnAZCNormalTitle = Rswift.StringResource(key: "ofy-Pn-aZC.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: FORGOT PASSWORD?
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let qYvLnMNYNormalTitle = Rswift.StringResource(key: "QYv-ln-MNY.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let pm620SU9NormalTitle = Rswift.StringResource(key: "Pm6-20-SU9.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let v7SSTQDText = Rswift.StringResource(key: "5v7-sS-TQD.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let kr74AB6Text = Rswift.StringResource(key: "1Kr-74-AB6.text", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let v3SWBMs7NormalTitle = Rswift.StringResource(key: "v3S-WB-Ms7.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login using Facebook
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let bcSMXBEONormalTitle = Rswift.StringResource(key: "BcS-mX-BEO.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login using Facebook
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let dyv0s5ZsNormalTitle = Rswift.StringResource(key: "dyv-0s-5Zs.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Login using Facebook
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let hjQM5GTNormalTitle = Rswift.StringResource(key: "4hj-QM-5GT.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let qrNLWdxText = Rswift.StringResource(key: "4qr-nL-wdx.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: OR ENTER PINCODE
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let mfECVXy2Text = Rswift.StringResource(key: "MfE-cV-Xy2.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: OTP Verification
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let zrEIdD6NText = Rswift.StringResource(key: "zrE-Id-d6N.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Or enter pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let c6D1pIygText = Rswift.StringResource(key: "c6D-1p-Iyg.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Or use location from map
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cE9JKIoxNormalTitle = Rswift.StringResource(key: "cE9-jK-iox.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let aUuMCUYEPlaceholder = Rswift.StringResource(key: "AUu-MC-uYE.placeholder", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let chQO0BNaPlaceholder = Rswift.StringResource(key: "chQ-O0-bNa.placeholder", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Please fill in your address to continue
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let vfyb18TFText = Rswift.StringResource(key: "VFY-b1-8TF.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let k3yU3GNkNormalTitle = Rswift.StringResource(key: "K3y-U3-GNk.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let kjWTCYnINormalTitle = Rswift.StringResource(key: "kjW-TC-ynI.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let mPnFlJprNormalTitle = Rswift.StringResource(key: "mPn-Fl-jpr.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let oDtUCEjYNormalTitle = Rswift.StringResource(key: "ODt-UC-EjY.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: SIGNUP?
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let uQoRPTdtNormalTitle = Rswift.StringResource(key: "uQo-rP-tdt.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Select Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let djMKiTJVText = Rswift.StringResource(key: "djM-Ki-tJV.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Send OTP
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let ds4QEHWBNormalTitle = Rswift.StringResource(key: "DS4-qE-hWB.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Signup
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cYBMeuNormalTitle = Rswift.StringResource(key: "08c-yB-Meu.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Signup
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let lwAMc20YText = Rswift.StringResource(key: "lwA-mc-20Y.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Signup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let bdmGXG5FText = Rswift.StringResource(key: "Bdm-gX-g5F.text", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Signup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let qIiB3PbINormalTitle = Rswift.StringResource(key: "qIi-b3-pbI.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let fUhBqGJJNormalTitle = Rswift.StringResource(key: "FUh-bq-gJJ.normalTitle", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: Tap to add a profile picture
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let w020GM7bText = Rswift.StringResource(key: "W02-0G-M7b.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: We will be sending you an OTP (one time password ) on your mobile number. Tap the button below after correctly typing your phone number
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let wycQsVNXText = Rswift.StringResource(key: "Wyc-Qs-vNX.text", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)
      /// en translation: What are you looking for?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static let cfG90ZdPlaceholder = Rswift.StringResource(key: "4cf-g9-0Zd.placeholder", tableName: "Register", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "en", "ar", "zh-Hans", "si-LK", "sq"], comment: nil)

      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func jRjBFRvuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jRj-BF-Rvu.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "jRj-BF-Rvu.normalTitle"
        }

        return NSLocalizedString("jRj-BF-Rvu.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func lAxAlIpkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LAx-al-ipk.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "LAx-al-ipk.normalTitle"
        }

        return NSLocalizedString("LAx-al-ipk.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Area
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nb3Cj9YcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nb3-Cj-9Yc.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "nb3-Cj-9Yc.normalTitle"
        }

        return NSLocalizedString("nb3-Cj-9Yc.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: By continuing, you agree to CARES's Terms and Conditions and confirm that you have read CARES's Privacy Policy
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cdbL7ESgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cdb-L7-ESg.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "cdb-L7-ESg.text"
        }

        return NSLocalizedString("cdb-L7-ESg.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func lx4G6YBtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lx4-G6-yBt.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "Lx4-G6-yBt.text"
        }

        return NSLocalizedString("Lx4-G6-yBt.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func olSFa3oAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("olS-fa-3oA.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "olS-fa-3oA.text"
        }

        return NSLocalizedString("olS-fa-3oA.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: By signing up you agree to the Privacy Policy and Terms and conditions.
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func b8SrMkTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1b8-sr-mkT.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "1b8-sr-mkT.text"
        }

        return NSLocalizedString("1b8-sr-mkT.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func uNqAHZGhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uNq-aH-zGh.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "uNq-aH-zGh.normalTitle"
        }

        return NSLocalizedString("uNq-aH-zGh.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE WITH FACEBOOK
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func h0D3NOvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4h0-d3-nOv.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "4h0-d3-nOv.normalTitle"
        }

        return NSLocalizedString("4h0-d3-nOv.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: CREATE NEW ACCOUNT
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func uB3ItR5GNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uB3-It-r5G.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "uB3-It-r5G.normalTitle"
        }

        return NSLocalizedString("uB3-It-r5G.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cWYYBNwwSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cWY-YB-nww.selectedTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "cWY-YB-nww.selectedTitle"
        }

        return NSLocalizedString("cWY-YB-nww.selectedTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Check
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cWYYBNwwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cWY-YB-nww.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "cWY-YB-nww.normalTitle"
        }

        return NSLocalizedString("cWY-YB-nww.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Check
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func hRbQ3Pn8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HRb-Q3-Pn8.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "HRb-Q3-Pn8.normalTitle"
        }

        return NSLocalizedString("HRb-Q3-Pn8.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Choose Location
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func a8APQYp3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a8A-PQ-Yp3.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "a8A-PQ-Yp3.text"
        }

        return NSLocalizedString("a8A-PQ-Yp3.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Choose Location
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func mJIEj6NCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mJI-Ej-6NC.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "mJI-Ej-6NC.text"
        }

        return NSLocalizedString("mJI-Ej-6NC.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Choose location from map
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func hbgTQFTQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hbg-TQ-FTQ.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "Hbg-TQ-FTQ.normalTitle"
        }

        return NSLocalizedString("Hbg-TQ-FTQ.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func bodBaSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("72B-oD-BaS.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "72B-oD-BaS.normalTitle"
        }

        return NSLocalizedString("72B-oD-BaS.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func mLR0w9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("20m-lR-0w9.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "20m-lR-0w9.normalTitle"
        }

        return NSLocalizedString("20m-lR-0w9.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func pndXtGWyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PND-Xt-GWy.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "PND-Xt-GWy.normalTitle"
        }

        return NSLocalizedString("PND-Xt-GWy.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func gIGAsYiUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gIG-As-YiU.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "gIG-As-YiU.normalTitle"
        }

        return NSLocalizedString("gIG-As-YiU.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func vlFKPCnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Vl-FK-PCn.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "3Vl-FK-PCn.normalTitle"
        }

        return NSLocalizedString("3Vl-FK-PCn.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func z5C92zqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4z5-c9-2zq.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "4z5-c9-2zq.normalTitle"
        }

        return NSLocalizedString("4z5-c9-2zq.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Create your account
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func gD5VWSSdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gD5-VW-SSd.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "gD5-VW-SSd.text"
        }

        return NSLocalizedString("gD5-VW-SSd.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func aSlRVPBJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ASl-RV-PBJ.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "ASl-RV-PBJ.normalTitle"
        }

        return NSLocalizedString("ASl-RV-PBJ.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func ldfa9M9UNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LDF-a9-m9U.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "LDF-a9-m9U.normalTitle"
        }

        return NSLocalizedString("LDF-a9-m9U.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func aHG5GKCrPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aHG-5G-kCr.placeholder", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "aHG-5G-kCr.placeholder"
        }

        return NSLocalizedString("aHG-5G-kCr.placeholder", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Enter Mobile
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func aWTDTFFQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aWT-dT-fFQ.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "aWT-dT-fFQ.text"
        }

        return NSLocalizedString("aWT-dT-fFQ.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Enter country, state, city
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func nrBVeUSGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NrB-Ve-uSG.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "NrB-Ve-uSG.text"
        }

        return NSLocalizedString("NrB-Ve-uSG.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Enter the OTP sent to
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func dAsHUHPbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dAs-hU-HPb.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "dAs-hU-HPb.text"
        }

        return NSLocalizedString("dAs-hU-HPb.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: FINISH
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func l0BNUVhENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L0B-NU-vhE.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "L0B-NU-vhE.normalTitle"
        }

        return NSLocalizedString("L0B-NU-vhE.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: FORGOT PASSWORD?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func ofyPnAZCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ofy-Pn-aZC.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "ofy-Pn-aZC.normalTitle"
        }

        return NSLocalizedString("ofy-Pn-aZC.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: FORGOT PASSWORD?
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func qYvLnMNYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QYv-ln-MNY.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "QYv-ln-MNY.normalTitle"
        }

        return NSLocalizedString("QYv-ln-MNY.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func pm620SU9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pm6-20-SU9.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "Pm6-20-SU9.normalTitle"
        }

        return NSLocalizedString("Pm6-20-SU9.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func v7SSTQDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5v7-sS-TQD.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "5v7-sS-TQD.text"
        }

        return NSLocalizedString("5v7-sS-TQD.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func kr74AB6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Kr-74-AB6.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "1Kr-74-AB6.text"
        }

        return NSLocalizedString("1Kr-74-AB6.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func v3SWBMs7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v3S-WB-Ms7.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "v3S-WB-Ms7.normalTitle"
        }

        return NSLocalizedString("v3S-WB-Ms7.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login using Facebook
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func bcSMXBEONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BcS-mX-BEO.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "BcS-mX-BEO.normalTitle"
        }

        return NSLocalizedString("BcS-mX-BEO.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login using Facebook
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func dyv0s5ZsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dyv-0s-5Zs.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "dyv-0s-5Zs.normalTitle"
        }

        return NSLocalizedString("dyv-0s-5Zs.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Login using Facebook
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func hjQM5GTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4hj-QM-5GT.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "4hj-QM-5GT.normalTitle"
        }

        return NSLocalizedString("4hj-QM-5GT.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func qrNLWdxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4qr-nL-wdx.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "4qr-nL-wdx.text"
        }

        return NSLocalizedString("4qr-nL-wdx.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: OR ENTER PINCODE
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func mfECVXy2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MfE-cV-Xy2.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "MfE-cV-Xy2.text"
        }

        return NSLocalizedString("MfE-cV-Xy2.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: OTP Verification
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func zrEIdD6NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zrE-Id-d6N.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "zrE-Id-d6N.text"
        }

        return NSLocalizedString("zrE-Id-d6N.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Or enter pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func c6D1pIygText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c6D-1p-Iyg.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "c6D-1p-Iyg.text"
        }

        return NSLocalizedString("c6D-1p-Iyg.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Or use location from map
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cE9JKIoxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cE9-jK-iox.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "cE9-jK-iox.normalTitle"
        }

        return NSLocalizedString("cE9-jK-iox.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func aUuMCUYEPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AUu-MC-uYE.placeholder", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "AUu-MC-uYE.placeholder"
        }

        return NSLocalizedString("AUu-MC-uYE.placeholder", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Pincode
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func chQO0BNaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chQ-O0-bNa.placeholder", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "chQ-O0-bNa.placeholder"
        }

        return NSLocalizedString("chQ-O0-bNa.placeholder", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in your address to continue
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func vfyb18TFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VFY-b1-8TF.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "VFY-b1-8TF.text"
        }

        return NSLocalizedString("VFY-b1-8TF.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func k3yU3GNkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K3y-U3-GNk.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "K3y-U3-GNk.normalTitle"
        }

        return NSLocalizedString("K3y-U3-GNk.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func kjWTCYnINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kjW-TC-ynI.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "kjW-TC-ynI.normalTitle"
        }

        return NSLocalizedString("kjW-TC-ynI.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func mPnFlJprNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mPn-Fl-jpr.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "mPn-Fl-jpr.normalTitle"
        }

        return NSLocalizedString("mPn-Fl-jpr.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: SIGNUP?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func oDtUCEjYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ODt-UC-EjY.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "ODt-UC-EjY.normalTitle"
        }

        return NSLocalizedString("ODt-UC-EjY.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: SIGNUP?
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func uQoRPTdtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uQo-rP-tdt.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "uQo-rP-tdt.normalTitle"
        }

        return NSLocalizedString("uQo-rP-tdt.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Select Country
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func djMKiTJVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("djM-Ki-tJV.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "djM-Ki-tJV.text"
        }

        return NSLocalizedString("djM-Ki-tJV.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Send OTP
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func ds4QEHWBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DS4-qE-hWB.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "DS4-qE-hWB.normalTitle"
        }

        return NSLocalizedString("DS4-qE-hWB.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Signup
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cYBMeuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("08c-yB-Meu.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "08c-yB-Meu.normalTitle"
        }

        return NSLocalizedString("08c-yB-Meu.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Signup
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func lwAMc20YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lwA-mc-20Y.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "lwA-mc-20Y.text"
        }

        return NSLocalizedString("lwA-mc-20Y.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Signup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func bdmGXG5FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bdm-gX-g5F.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "Bdm-gX-g5F.text"
        }

        return NSLocalizedString("Bdm-gX-g5F.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Signup
      ///
      /// Locales: fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func qIiB3PbINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qIi-b3-pbI.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "qIi-b3-pbI.normalTitle"
        }

        return NSLocalizedString("qIi-b3-pbI.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func fUhBqGJJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FUh-bq-gJJ.normalTitle", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "FUh-bq-gJJ.normalTitle"
        }

        return NSLocalizedString("FUh-bq-gJJ.normalTitle", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: Tap to add a profile picture
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func w020GM7bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W02-0G-M7b.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "W02-0G-M7b.text"
        }

        return NSLocalizedString("W02-0G-M7b.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: We will be sending you an OTP (one time password ) on your mobile number. Tap the button below after correctly typing your phone number
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func wycQsVNXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wyc-Qs-vNX.text", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "Wyc-Qs-vNX.text"
        }

        return NSLocalizedString("Wyc-Qs-vNX.text", tableName: "Register", bundle: bundle, comment: "")
      }

      /// en translation: What are you looking for?
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, en, ar, zh-Hans, si-LK, sq
      static func cfG90ZdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4cf-g9-0Zd.placeholder", tableName: "Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Register", preferredLanguages: preferredLanguages) else {
          return "4cf-g9-0Zd.placeholder"
        }

        return NSLocalizedString("4cf-g9-0Zd.placeholder", tableName: "Register", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.sideMenu` struct is generated, and contains static references to 88 localization keys.
    struct sideMenu {
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let aoPeNrDText = Rswift.StringResource(key: "4Ao-Pe-NrD.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let dsbF1L7oText = Rswift.StringResource(key: "dsb-f1-l7o.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let oxZCVHQ2Text = Rswift.StringResource(key: "oxZ-CV-HQ2.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let pT1oP8TText = Rswift.StringResource(key: "6pT-1o-p8T.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let pjrIgP9mText = Rswift.StringResource(key: "pjr-ig-p9m.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, si-LK
      static let yoGTPJXNText = Rswift.StringResource(key: "YoG-TP-jXN.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hvyDiLGrText = Rswift.StringResource(key: "Hvy-di-lGr.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let spYEUChOText = Rswift.StringResource(key: "spY-EU-ChO.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:     
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cEz7ALfrText = Rswift.StringResource(key: "CEz-7A-Lfr.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation:    20
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let tqvNaSW8Text = Rswift.StringResource(key: "tqv-Na-SW8.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, sq
      static let hIbFhNxOText = Rswift.StringResource(key: "HIb-fh-nxO.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, sq
      static let zviCCC1dText = Rswift.StringResource(key: "Zvi-cC-c1d.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "sq"], comment: nil)
      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nr5SxBHYText = Rswift.StringResource(key: "NR5-Sx-BHY.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: 784848444
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let hopic8xText = Rswift.StringResource(key: "1HO-pI-c8x.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: About Us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let u1jDmZkBText = Rswift.StringResource(key: "U1j-dm-ZkB.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: About us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vGLUPAxText = Rswift.StringResource(key: "5vG-LU-pAx.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Add Trusted Contact
      ///
      /// Locales: en, zh-Hans, hi, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let rIQBO24ZNormalTitle = Rswift.StringResource(key: "rIQ-BO-24Z.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static let bctnTtjNormalTitle = Rswift.StringResource(key: "1BC-TN-ttj.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static let eRlIcHTvNormalTitle = Rswift.StringResource(key: "eRl-Ic-hTv.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static let njr5ORT7NormalTitle = Rswift.StringResource(key: "njr-5O-RT7.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static let uG3Rd3CnNormalTitle = Rswift.StringResource(key: "uG3-Rd-3Cn.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static let ucGUSZI7NormalTitle = Rswift.StringResource(key: "UcG-US-zI7.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qqMvJJpNormalTitle = Rswift.StringResource(key: "3qq-mv-JJp.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let skHYpTQpNormalTitle = Rswift.StringResource(key: "SkH-yp-tQp.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let d1d3yQTLNormalTitle = Rswift.StringResource(key: "D1d-3y-QTL.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let pqG95TUeNormalTitle = Rswift.StringResource(key: "pqG-95-tUe.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Change Langauge
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let tzphqwPfText = Rswift.StringResource(key: "TZP-hQ-WPf.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ntwtf99Text = Rswift.StringResource(key: "6NT-wT-F99.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let amcYRIFPText = Rswift.StringResource(key: "amc-YR-IFP.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Driver
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let m5UePvuText = Rswift.StringResource(key: "1m5-Ue-pvu.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let onxHqIuGText = Rswift.StringResource(key: "Onx-hq-IuG.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jPaYjI76Text = Rswift.StringResource(key: "JPa-yj-I76.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ml2TZR6iText = Rswift.StringResource(key: "ML2-TZ-R6i.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vAS3NZKeNormalTitle = Rswift.StringResource(key: "vAS-3N-ZKe.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enjoy discounted fares on your daily commute
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let l7ONCEn0Text = Rswift.StringResource(key: "L7O-nC-En0.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter email
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mbfHqSY0Placeholder = Rswift.StringResource(key: "mbf-hq-SY0.placeholder", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter full name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cwlLzKH6Placeholder = Rswift.StringResource(key: "Cwl-Lz-KH6.placeholder", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let aYcFFFeWPlaceholder = Rswift.StringResource(key: "aYc-fF-feW.placeholder", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Full Name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nk9rV0gText = Rswift.StringResource(key: "3NK-9r-v0g.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let cBgOF3fCText = Rswift.StringResource(key: "CBg-OF-3fC.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dwVDuBukText = Rswift.StringResource(key: "dwV-du-Buk.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let jiaYC6eRText = Rswift.StringResource(key: "jia-YC-6eR.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID :    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dXOMCW6tText = Rswift.StringResource(key: "dXO-MC-w6t.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ID : 7647353
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let psz3cText = Rswift.StringResource(key: "903-pS-z3c.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Introducing Royo Ride Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kzzDuY7jText = Rswift.StringResource(key: "KZZ-du-y7j.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let w3OQoLnaText = Rswift.StringResource(key: "w3O-qo-Lna.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let d789bJfyText = Rswift.StringResource(key: "D78-9b-jfy.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gnKQB9IcText = Rswift.StringResource(key: "GnK-qB-9Ic.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nyEAv5NrText = Rswift.StringResource(key: "nyE-av-5Nr.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qrnSLQOZText = Rswift.StringResource(key: "qrn-sL-QOZ.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let tMo7w1gFText = Rswift.StringResource(key: "TMo-7w-1gF.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vml8XW4hText = Rswift.StringResource(key: "vml-8X-W4h.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Like Buraq24?
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let q7FGdIXCText = Rswift.StringResource(key: "Q7F-Gd-iXC.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Maninderjit Singh
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let g0ZDUY1MText = Rswift.StringResource(key: "g0Z-DU-Y1M.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fcoEfLJwText = Rswift.StringResource(key: "Fco-Ef-LJw.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: No bookings found
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dt4OyFUNText = Rswift.StringResource(key: "DT4-oy-fUN.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: No bookings found
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let neBLeHUOText = Rswift.StringResource(key: "NeB-Le-HUO.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Numbers
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let o83gAsLText = Rswift.StringResource(key: "8o8-3g-AsL.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: PLACE REQUEST
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let lUSGvGNormalTitle = Rswift.StringResource(key: "14l-uS-gvG.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Package description
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ahOMAQO6Text = Rswift.StringResource(key: "ahO-MA-qO6.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Past
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nMu6RZbSNormalTitle = Rswift.StringResource(key: "nMu-6R-zbS.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kr35iYOeText = Rswift.StringResource(key: "KR3-5i-yOe.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nohTr0YDText = Rswift.StringResource(key: "NOH-Tr-0YD.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, si-LK
      static let zy6A7JRyText = Rswift.StringResource(key: "Zy6-a7-jRy.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Push Notifications
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wwF29QFlText = Rswift.StringResource(key: "WwF-29-QFl.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Reach us via mail
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let o4jVSNI1Text = Rswift.StringResource(key: "O4j-vS-NI1.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Reach us via phone
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let kqO53WzJText = Rswift.StringResource(key: "KqO-53-WzJ.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Referral
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mocMkE0OText = Rswift.StringResource(key: "moc-Mk-e0O.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Rs 25.00
      ///
      /// Locales: en, si-LK
      static let uz6XBI1BText = Rswift.StringResource(key: "Uz6-xB-I1B.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eDrUjOrtNormalTitle = Rswift.StringResource(key: "eDr-uj-Ort.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let bjBuVucNormalTitle = Rswift.StringResource(key: "4Bj-bu-vuc.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Service tax
      ///
      /// Locales: en, si-LK, es
      static let tgfKNQQsText = Rswift.StringResource(key: "tgf-kN-qQs.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK", "es"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let qVcXMUpUText = Rswift.StringResource(key: "QVc-xM-upU.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let mSrZNC7fNormalTitle = Rswift.StringResource(key: "MSr-ZN-C7f.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Share with the friends
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nrM8lESGText = Rswift.StringResource(key: "NrM-8l-eSG.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let q7O2KKNormalTitle = Rswift.StringResource(key: "33q-7O-2KK.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: en, si-LK
      static let ine6CTW3Text = Rswift.StringResource(key: "ine-6C-tW3.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let eS4QTAR1Text = Rswift.StringResource(key: "eS4-qT-AR1.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, si-LK
      static let kbLRFBX8Text = Rswift.StringResource(key: "KbL-rF-BX8.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK"], comment: nil)
      /// en translation: Travel Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let aeZKLKSbText = Rswift.StringResource(key: "aeZ-KL-KSb.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Travel Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let gqWKxVruText = Rswift.StringResource(key: "gqW-kx-vru.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Trip fare
      ///
      /// Locales: en, si-LK, es
      static let zhWQ9EAXText = Rswift.StringResource(key: "zhW-Q9-EAX.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "si-LK", "es"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let w0W6OHkNormalTitle = Rswift.StringResource(key: "6w0-w6-OHk.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let w0W6OHkSelectedTitle = Rswift.StringResource(key: "6w0-w6-OHk.selectedTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Version :
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let aIwHSHbqText = Rswift.StringResource(key: "aIw-HS-hbq.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: View all Term & Conditions
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let ycWPQCOUNormalTitle = Rswift.StringResource(key: "ycW-PQ-cOU.normalTitle", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: cash - 125.50 Rs
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let fZoBRXNxText = Rswift.StringResource(key: "fZo-BR-XNx.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: status
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let vfcMT2VQText = Rswift.StringResource(key: "vfc-MT-2VQ.text", tableName: "SideMenu", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func aoPeNrDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ao-Pe-NrD.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "4Ao-Pe-NrD.text"
        }

        return NSLocalizedString("4Ao-Pe-NrD.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func dsbF1L7oText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dsb-f1-l7o.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "dsb-f1-l7o.text"
        }

        return NSLocalizedString("dsb-f1-l7o.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func oxZCVHQ2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oxZ-CV-HQ2.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "oxZ-CV-HQ2.text"
        }

        return NSLocalizedString("oxZ-CV-HQ2.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func pT1oP8TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6pT-1o-p8T.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "6pT-1o-p8T.text"
        }

        return NSLocalizedString("6pT-1o-p8T.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func pjrIgP9mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pjr-ig-p9m.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "pjr-ig-p9m.text"
        }

        return NSLocalizedString("pjr-ig-p9m.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, si-LK
      static func yoGTPJXNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YoG-TP-jXN.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "YoG-TP-jXN.text"
        }

        return NSLocalizedString("YoG-TP-jXN.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hvyDiLGrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hvy-di-lGr.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Hvy-di-lGr.text"
        }

        return NSLocalizedString("Hvy-di-lGr.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func spYEUChOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spY-EU-ChO.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "spY-EU-ChO.text"
        }

        return NSLocalizedString("spY-EU-ChO.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:     
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cEz7ALfrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CEz-7A-Lfr.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "CEz-7A-Lfr.text"
        }

        return NSLocalizedString("CEz-7A-Lfr.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation:    20
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func tqvNaSW8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tqv-Na-SW8.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "tqv-Na-SW8.text"
        }

        return NSLocalizedString("tqv-Na-SW8.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, sq
      static func hIbFhNxOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HIb-fh-nxO.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "HIb-fh-nxO.text"
        }

        return NSLocalizedString("HIb-fh-nxO.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ( CDCL, Sector 28 ) 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, sq
      static func zviCCC1dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zvi-cC-c1d.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Zvi-cC-c1d.text"
        }

        return NSLocalizedString("Zvi-cC-c1d.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: +91
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nr5SxBHYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NR5-Sx-BHY.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "NR5-Sx-BHY.text"
        }

        return NSLocalizedString("NR5-Sx-BHY.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: 784848444
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func hopic8xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1HO-pI-c8x.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "1HO-pI-c8x.text"
        }

        return NSLocalizedString("1HO-pI-c8x.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: About Us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func u1jDmZkBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("U1j-dm-ZkB.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "U1j-dm-ZkB.text"
        }

        return NSLocalizedString("U1j-dm-ZkB.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: About us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vGLUPAxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5vG-LU-pAx.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "5vG-LU-pAx.text"
        }

        return NSLocalizedString("5vG-LU-pAx.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Add Trusted Contact
      ///
      /// Locales: en, zh-Hans, hi, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func rIQBO24ZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rIQ-BO-24Z.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "rIQ-BO-24Z.normalTitle"
        }

        return NSLocalizedString("rIQ-BO-24Z.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static func bctnTtjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1BC-TN-ttj.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "1BC-TN-ttj.normalTitle"
        }

        return NSLocalizedString("1BC-TN-ttj.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static func eRlIcHTvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eRl-Ic-hTv.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "eRl-Ic-hTv.normalTitle"
        }

        return NSLocalizedString("eRl-Ic-hTv.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static func njr5ORT7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("njr-5O-RT7.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "njr-5O-RT7.normalTitle"
        }

        return NSLocalizedString("njr-5O-RT7.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static func uG3Rd3CnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uG3-Rd-3Cn.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "uG3-Rd-3Cn.normalTitle"
        }

        return NSLocalizedString("uG3-Rd-3Cn.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, si-LK
      static func ucGUSZI7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UcG-US-zI7.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "UcG-US-zI7.normalTitle"
        }

        return NSLocalizedString("UcG-US-zI7.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qqMvJJpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3qq-mv-JJp.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "3qq-mv-JJp.normalTitle"
        }

        return NSLocalizedString("3qq-mv-JJp.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func skHYpTQpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SkH-yp-tQp.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "SkH-yp-tQp.normalTitle"
        }

        return NSLocalizedString("SkH-yp-tQp.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func d1d3yQTLNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("D1d-3y-QTL.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "D1d-3y-QTL.normalTitle"
        }

        return NSLocalizedString("D1d-3y-QTL.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func pqG95TUeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pqG-95-tUe.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "pqG-95-tUe.normalTitle"
        }

        return NSLocalizedString("pqG-95-tUe.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Change Langauge
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func tzphqwPfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TZP-hQ-WPf.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "TZP-hQ-WPf.text"
        }

        return NSLocalizedString("TZP-hQ-WPf.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ntwtf99Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6NT-wT-F99.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "6NT-wT-F99.text"
        }

        return NSLocalizedString("6NT-wT-F99.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func amcYRIFPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("amc-YR-IFP.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "amc-YR-IFP.text"
        }

        return NSLocalizedString("amc-YR-IFP.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Driver
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func m5UePvuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1m5-Ue-pvu.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "1m5-Ue-pvu.text"
        }

        return NSLocalizedString("1m5-Ue-pvu.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: E-Token
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func onxHqIuGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Onx-hq-IuG.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Onx-hq-IuG.text"
        }

        return NSLocalizedString("Onx-hq-IuG.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jPaYjI76Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JPa-yj-I76.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "JPa-yj-I76.text"
        }

        return NSLocalizedString("JPa-yj-I76.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ml2TZR6iText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ML2-TZ-R6i.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "ML2-TZ-R6i.text"
        }

        return NSLocalizedString("ML2-TZ-R6i.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vAS3NZKeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vAS-3N-ZKe.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "vAS-3N-ZKe.normalTitle"
        }

        return NSLocalizedString("vAS-3N-ZKe.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Enjoy discounted fares on your daily commute
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func l7ONCEn0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L7O-nC-En0.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "L7O-nC-En0.text"
        }

        return NSLocalizedString("L7O-nC-En0.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Enter email
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mbfHqSY0Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mbf-hq-SY0.placeholder", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "mbf-hq-SY0.placeholder"
        }

        return NSLocalizedString("mbf-hq-SY0.placeholder", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Enter full name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cwlLzKH6Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cwl-Lz-KH6.placeholder", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Cwl-Lz-KH6.placeholder"
        }

        return NSLocalizedString("Cwl-Lz-KH6.placeholder", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Enter phone number
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func aYcFFFeWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aYc-fF-feW.placeholder", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "aYc-fF-feW.placeholder"
        }

        return NSLocalizedString("aYc-fF-feW.placeholder", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Full Name
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nk9rV0gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3NK-9r-v0g.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "3NK-9r-v0g.text"
        }

        return NSLocalizedString("3NK-9r-v0g.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func cBgOF3fCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CBg-OF-3fC.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "CBg-OF-3fC.text"
        }

        return NSLocalizedString("CBg-OF-3fC.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dwVDuBukText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dwV-du-Buk.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "dwV-du-Buk.text"
        }

        return NSLocalizedString("dwV-du-Buk.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ID : 
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func jiaYC6eRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jia-YC-6eR.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "jia-YC-6eR.text"
        }

        return NSLocalizedString("jia-YC-6eR.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ID :    
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dXOMCW6tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dXO-MC-w6t.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "dXO-MC-w6t.text"
        }

        return NSLocalizedString("dXO-MC-w6t.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: ID : 7647353
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func psz3cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("903-pS-z3c.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "903-pS-z3c.text"
        }

        return NSLocalizedString("903-pS-z3c.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Introducing Royo Ride Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kzzDuY7jText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KZZ-du-y7j.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "KZZ-du-y7j.text"
        }

        return NSLocalizedString("KZZ-du-y7j.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func w3OQoLnaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w3O-qo-Lna.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "w3O-qo-Lna.text"
        }

        return NSLocalizedString("w3O-qo-Lna.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func d789bJfyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("D78-9b-jfy.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "D78-9b-jfy.text"
        }

        return NSLocalizedString("D78-9b-jfy.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gnKQB9IcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GnK-qB-9Ic.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "GnK-qB-9Ic.text"
        }

        return NSLocalizedString("GnK-qB-9Ic.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nyEAv5NrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nyE-av-5Nr.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "nyE-av-5Nr.text"
        }

        return NSLocalizedString("nyE-av-5Nr.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qrnSLQOZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrn-sL-QOZ.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "qrn-sL-QOZ.text"
        }

        return NSLocalizedString("qrn-sL-QOZ.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func tMo7w1gFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TMo-7w-1gF.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "TMo-7w-1gF.text"
        }

        return NSLocalizedString("TMo-7w-1gF.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vml8XW4hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vml-8X-W4h.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "vml-8X-W4h.text"
        }

        return NSLocalizedString("vml-8X-W4h.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Like Buraq24?
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func q7FGdIXCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q7F-Gd-iXC.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Q7F-Gd-iXC.text"
        }

        return NSLocalizedString("Q7F-Gd-iXC.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Maninderjit Singh
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func g0ZDUY1MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g0Z-DU-Y1M.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "g0Z-DU-Y1M.text"
        }

        return NSLocalizedString("g0Z-DU-Y1M.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fcoEfLJwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fco-Ef-LJw.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Fco-Ef-LJw.text"
        }

        return NSLocalizedString("Fco-Ef-LJw.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: No bookings found
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dt4OyFUNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DT4-oy-fUN.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "DT4-oy-fUN.text"
        }

        return NSLocalizedString("DT4-oy-fUN.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: No bookings found
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func neBLeHUOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NeB-Le-HUO.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "NeB-Le-HUO.text"
        }

        return NSLocalizedString("NeB-Le-HUO.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Numbers
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func o83gAsLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8o8-3g-AsL.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "8o8-3g-AsL.text"
        }

        return NSLocalizedString("8o8-3g-AsL.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: PLACE REQUEST
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func lUSGvGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("14l-uS-gvG.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "14l-uS-gvG.normalTitle"
        }

        return NSLocalizedString("14l-uS-gvG.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Package description
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ahOMAQO6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ahO-MA-qO6.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "ahO-MA-qO6.text"
        }

        return NSLocalizedString("ahO-MA-qO6.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Past
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nMu6RZbSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nMu-6R-zbS.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "nMu-6R-zbS.normalTitle"
        }

        return NSLocalizedString("nMu-6R-zbS.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kr35iYOeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KR3-5i-yOe.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "KR3-5i-yOe.text"
        }

        return NSLocalizedString("KR3-5i-yOe.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nohTr0YDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NOH-Tr-0YD.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "NOH-Tr-0YD.text"
        }

        return NSLocalizedString("NOH-Tr-0YD.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, si-LK
      static func zy6A7JRyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zy6-a7-jRy.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Zy6-a7-jRy.text"
        }

        return NSLocalizedString("Zy6-a7-jRy.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Push Notifications
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wwF29QFlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WwF-29-QFl.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "WwF-29-QFl.text"
        }

        return NSLocalizedString("WwF-29-QFl.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via mail
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func o4jVSNI1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O4j-vS-NI1.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "O4j-vS-NI1.text"
        }

        return NSLocalizedString("O4j-vS-NI1.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Reach us via phone
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func kqO53WzJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KqO-53-WzJ.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "KqO-53-WzJ.text"
        }

        return NSLocalizedString("KqO-53-WzJ.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Referral
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mocMkE0OText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moc-Mk-e0O.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "moc-Mk-e0O.text"
        }

        return NSLocalizedString("moc-Mk-e0O.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Rs 25.00
      ///
      /// Locales: en, si-LK
      static func uz6XBI1BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uz6-xB-I1B.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "Uz6-xB-I1B.text"
        }

        return NSLocalizedString("Uz6-xB-I1B.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eDrUjOrtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eDr-uj-Ort.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "eDr-uj-Ort.normalTitle"
        }

        return NSLocalizedString("eDr-uj-Ort.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func bjBuVucNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Bj-bu-vuc.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "4Bj-bu-vuc.normalTitle"
        }

        return NSLocalizedString("4Bj-bu-vuc.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Service tax
      ///
      /// Locales: en, si-LK, es
      static func tgfKNQQsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tgf-kN-qQs.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "tgf-kN-qQs.text"
        }

        return NSLocalizedString("tgf-kN-qQs.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func qVcXMUpUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QVc-xM-upU.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "QVc-xM-upU.text"
        }

        return NSLocalizedString("QVc-xM-upU.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func mSrZNC7fNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MSr-ZN-C7f.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "MSr-ZN-C7f.normalTitle"
        }

        return NSLocalizedString("MSr-ZN-C7f.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Share with the friends
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nrM8lESGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NrM-8l-eSG.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "NrM-8l-eSG.text"
        }

        return NSLocalizedString("NrM-8l-eSG.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func q7O2KKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("33q-7O-2KK.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "33q-7O-2KK.normalTitle"
        }

        return NSLocalizedString("33q-7O-2KK.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: en, si-LK
      static func ine6CTW3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ine-6C-tW3.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "ine-6C-tW3.text"
        }

        return NSLocalizedString("ine-6C-tW3.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func eS4QTAR1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eS4-qT-AR1.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "eS4-qT-AR1.text"
        }

        return NSLocalizedString("eS4-qT-AR1.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, si-LK
      static func kbLRFBX8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KbL-rF-BX8.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "KbL-rF-BX8.text"
        }

        return NSLocalizedString("KbL-rF-BX8.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Travel Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func aeZKLKSbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aeZ-KL-KSb.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "aeZ-KL-KSb.text"
        }

        return NSLocalizedString("aeZ-KL-KSb.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Travel Packages
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func gqWKxVruText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gqW-kx-vru.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "gqW-kx-vru.text"
        }

        return NSLocalizedString("gqW-kx-vru.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Trip fare
      ///
      /// Locales: en, si-LK, es
      static func zhWQ9EAXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zhW-Q9-EAX.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "zhW-Q9-EAX.text"
        }

        return NSLocalizedString("zhW-Q9-EAX.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func w0W6OHkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6w0-w6-OHk.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "6w0-w6-OHk.normalTitle"
        }

        return NSLocalizedString("6w0-w6-OHk.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func w0W6OHkSelectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6w0-w6-OHk.selectedTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "6w0-w6-OHk.selectedTitle"
        }

        return NSLocalizedString("6w0-w6-OHk.selectedTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: Version :
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func aIwHSHbqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aIw-HS-hbq.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "aIw-HS-hbq.text"
        }

        return NSLocalizedString("aIw-HS-hbq.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: View all Term & Conditions
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func ycWPQCOUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ycW-PQ-cOU.normalTitle", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "ycW-PQ-cOU.normalTitle"
        }

        return NSLocalizedString("ycW-PQ-cOU.normalTitle", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: cash - 125.50 Rs
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func fZoBRXNxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fZo-BR-XNx.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "fZo-BR-XNx.text"
        }

        return NSLocalizedString("fZo-BR-XNx.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      /// en translation: status
      ///
      /// Locales: en, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func vfcMT2VQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vfc-MT-2VQ.text", tableName: "SideMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenu", preferredLanguages: preferredLanguages) else {
          return "vfc-MT-2VQ.text"
        }

        return NSLocalizedString("vfc-MT-2VQ.text", tableName: "SideMenu", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.supplierListingCell` struct is generated, and contains static references to 11 localization keys.
    struct supplierListingCell {
      /// es translation: 4.5
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let chjZsC9oText = Rswift.StringResource(key: "Chj-Zs-c9o.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: CERRADO
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let l1pHUZgdText = Rswift.StringResource(key: "L1p-HU-zgd.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: El tiempo de entrega
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let qxY86GGKText = Rswift.StringResource(key: "QxY-86-gGK.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let iZh9dHnBText = Rswift.StringResource(key: "iZh-9d-HnB.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let myoQxLlEText = Rswift.StringResource(key: "myo-Qx-LlE.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let b3hND8DxText = Rswift.StringResource(key: "b3h-nD-8Dx.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let bkArOjAText = Rswift.StringResource(key: "9bk-ar-OjA.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let jyXV4XVZText = Rswift.StringResource(key: "jyX-V4-xVZ.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Opciones de pago
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let m8iQqBEQText = Rswift.StringResource(key: "m8i-qq-BEQ.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Pedido mínimo
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let hx4A7MshText = Rswift.StringResource(key: "hx4-a7-msh.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: •   NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let mwaHA5yOText = Rswift.StringResource(key: "Mwa-hA-5yO.text", tableName: "SupplierListingCell", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)

      /// es translation: 4.5
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func chjZsC9oText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chj-Zs-c9o.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "Chj-Zs-c9o.text"
        }

        return NSLocalizedString("Chj-Zs-c9o.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: CERRADO
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func l1pHUZgdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L1p-HU-zgd.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "L1p-HU-zgd.text"
        }

        return NSLocalizedString("L1p-HU-zgd.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: El tiempo de entrega
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func qxY86GGKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QxY-86-gGK.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "QxY-86-gGK.text"
        }

        return NSLocalizedString("QxY-86-gGK.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func iZh9dHnBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iZh-9d-HnB.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "iZh-9d-HnB.text"
        }

        return NSLocalizedString("iZh-9d-HnB.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: Label
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func myoQxLlEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myo-Qx-LlE.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "myo-Qx-LlE.text"
        }

        return NSLocalizedString("myo-Qx-LlE.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func b3hND8DxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b3h-nD-8Dx.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "b3h-nD-8Dx.text"
        }

        return NSLocalizedString("b3h-nD-8Dx.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func bkArOjAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9bk-ar-OjA.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "9bk-ar-OjA.text"
        }

        return NSLocalizedString("9bk-ar-OjA.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func jyXV4XVZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jyX-V4-xVZ.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "jyX-V4-xVZ.text"
        }

        return NSLocalizedString("jyX-V4-xVZ.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: Opciones de pago
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func m8iQqBEQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m8i-qq-BEQ.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "m8i-qq-BEQ.text"
        }

        return NSLocalizedString("m8i-qq-BEQ.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: Pedido mínimo
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func hx4A7MshText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hx4-a7-msh.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "hx4-a7-msh.text"
        }

        return NSLocalizedString("hx4-a7-msh.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      /// es translation: •   NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func mwaHA5yOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mwa-hA-5yO.text", tableName: "SupplierListingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierListingCell", preferredLanguages: preferredLanguages) else {
          return "Mwa-hA-5yO.text"
        }

        return NSLocalizedString("Mwa-hA-5yO.text", tableName: "SupplierListingCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.supplierRatingPopUp` struct is generated, and contains static references to 4 localization keys.
    struct supplierRatingPopUp {
      /// es translation: CANCELAR
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let vlHVq54TNormalTitle = Rswift.StringResource(key: "vlH-Vq-54T.normalTitle", tableName: "SupplierRatingPopUp", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let cVkIdYo7Text = Rswift.StringResource(key: "CVk-Id-Yo7.text", tableName: "SupplierRatingPopUp", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Okay
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let qsP0WN3XNormalTitle = Rswift.StringResource(key: "QsP-0W-N3X.normalTitle", tableName: "SupplierRatingPopUp", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)
      /// es translation: Velocidad
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static let y5vMM56RText = Rswift.StringResource(key: "Y5v-MM-56R.text", tableName: "SupplierRatingPopUp", bundle: R.hostingBundle, locales: ["es", "fr", "it", "ja", "nl", "ja", "de", "zh-Hans", "ar", "sq", "ar"], comment: nil)

      /// es translation: CANCELAR
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func vlHVq54TNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vlH-Vq-54T.normalTitle", tableName: "SupplierRatingPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierRatingPopUp", preferredLanguages: preferredLanguages) else {
          return "vlH-Vq-54T.normalTitle"
        }

        return NSLocalizedString("vlH-Vq-54T.normalTitle", tableName: "SupplierRatingPopUp", bundle: bundle, comment: "")
      }

      /// es translation: NTL
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func cVkIdYo7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVk-Id-Yo7.text", tableName: "SupplierRatingPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierRatingPopUp", preferredLanguages: preferredLanguages) else {
          return "CVk-Id-Yo7.text"
        }

        return NSLocalizedString("CVk-Id-Yo7.text", tableName: "SupplierRatingPopUp", bundle: bundle, comment: "")
      }

      /// es translation: Okay
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func qsP0WN3XNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QsP-0W-N3X.normalTitle", tableName: "SupplierRatingPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierRatingPopUp", preferredLanguages: preferredLanguages) else {
          return "QsP-0W-N3X.normalTitle"
        }

        return NSLocalizedString("QsP-0W-N3X.normalTitle", tableName: "SupplierRatingPopUp", bundle: bundle, comment: "")
      }

      /// es translation: Velocidad
      ///
      /// Locales: es, fr, it, ja, nl, ja, de, zh-Hans, ar, sq, ar
      static func y5vMM56RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y5v-MM-56R.text", tableName: "SupplierRatingPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupplierRatingPopUp", preferredLanguages: preferredLanguages) else {
          return "Y5v-MM-56R.text"
        }

        return NSLocalizedString("Y5v-MM-56R.text", tableName: "SupplierRatingPopUp", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.template1_Design` struct is generated, and contains static references to 7 localization keys.
    struct template1_Design {
      /// en translation: +57
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let aGlJtGxqText = Rswift.StringResource(key: "AGl-jt-Gxq.text", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: ARC
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let m8fHaTNbText = Rswift.StringResource(key: "m8f-Ha-TNb.text", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: By creating account you agree with 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let nDoAHUSaText = Rswift.StringResource(key: "NDo-AH-USa.text", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Enter Mobile No:
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let dReU62CiPlaceholder = Rswift.StringResource(key: "dRe-u6-2Ci.placeholder", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Login  to  Name
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wazrUuText = Rswift.StringResource(key: "88W-aZ-rUu.text", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let wnp6qD41NormalTitle = Rswift.StringResource(key: "wnp-6q-d41.normalTitle", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static let il4ELSG7NormalTitle = Rswift.StringResource(key: "Il4-EL-sG7.normalTitle", tableName: "Template1_Design", bundle: R.hostingBundle, locales: ["en", "ar", "zh-Hans", "hi", "si-LK", "es", "ta-LK", "ur", "fr", "it", "ja", "nl", "ja", "de", "sq"], comment: nil)

      /// en translation: +57
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func aGlJtGxqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AGl-jt-Gxq.text", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "AGl-jt-Gxq.text"
        }

        return NSLocalizedString("AGl-jt-Gxq.text", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: ARC
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func m8fHaTNbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m8f-Ha-TNb.text", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "m8f-Ha-TNb.text"
        }

        return NSLocalizedString("m8f-Ha-TNb.text", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: By creating account you agree with 
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func nDoAHUSaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NDo-AH-USa.text", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "NDo-AH-USa.text"
        }

        return NSLocalizedString("NDo-AH-USa.text", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: Enter Mobile No:
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func dReU62CiPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dRe-u6-2Ci.placeholder", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "dRe-u6-2Ci.placeholder"
        }

        return NSLocalizedString("dRe-u6-2Ci.placeholder", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: Login  to  Name
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wazrUuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("88W-aZ-rUu.text", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "88W-aZ-rUu.text"
        }

        return NSLocalizedString("88W-aZ-rUu.text", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func wnp6qD41NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wnp-6q-d41.normalTitle", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "wnp-6q-d41.normalTitle"
        }

        return NSLocalizedString("wnp-6q-d41.normalTitle", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar, zh-Hans, hi, si-LK, es, ta-LK, ur, fr, it, ja, nl, ja, de, sq
      static func il4ELSG7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Il4-EL-sG7.normalTitle", tableName: "Template1_Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Template1_Design", preferredLanguages: preferredLanguages) else {
          return "Il4-EL-sG7.normalTitle"
        }

        return NSLocalizedString("Il4-EL-sG7.normalTitle", tableName: "Template1_Design", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CartListingCell.validate()
      try _ChatAccessory.validate()
      try _CouponToBuyCell.validate()
      try _CustomizationTableViewCell.validate()
      try _DeliveryAddressCollectionCell.validate()
      try _DonatePopupVC.validate()
      try _HomeBrandCollectionCell.validate()
      try _HomeFoodItemCollectionCell.validate()
      try _HomeFoodRestaurantTableCell.validate()
      try _HomeMenuCollectionCell.validate()
      try _HomeOffersHListTableCell.validate()
      try _HomeProductCell.validate()
      try _HomeSearchCell.validate()
      try _LaundrySectionHeader.validate()
      try _LaundryServiceHeaderView.validate()
      try _MixedHomeV2CategoryCell.validate()
      try _ProductCategoryCell.validate()
      try _ProductInfoHeaderView.validate()
      try _ProductListCell.validate()
      try _ProductListingCell.validate()
      try _ProductView.validate()
      try _ReceiverAtchCell.validate()
      try _ReceiverImgCell.validate()
      try _RentalSupplierListingTableViewCell.validate()
      try _RestaurantTableHeader.validate()
      try _SavedAddressTableViewCell.validate()
      try _SenderAtchCell.validate()
      try _SenderImgCell.validate()
      try _SupplierCollectionCell.validate()
      try _SupplierInfoHeaderCollectionCell.validate()
      try _SupplierInfoHeaderView.validate()
      try _SupplierListingCell.validate()
      try _TempCollectionViewCell.validate()
      try _UploadImageCollectionCell.validate()
      try _UploadedDocCell.validate()
      try _VehicleImageCollectionCell.validate()
    }

    struct _AddAddressTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddAddressTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAddressTableViewCell
      }

      fileprivate init() {}
    }

    struct _BookingLocationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookingLocationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingLocationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingLocationCell
      }

      fileprivate init() {}
    }

    struct _BookingPricingCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookingPricingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingPricingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingPricingCell
      }

      fileprivate init() {}
    }

    struct _ButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ButtonBarViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ButtonBarViewCell
      }

      fileprivate init() {}
    }

    struct _CalenderDateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CalenderDateCell

      let bundle = R.hostingBundle
      let identifier = "CalenderDateCell"
      let name = "CalenderDateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalenderDateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalenderDateCell
      }

      fileprivate init() {}
    }

    struct _CartAnswerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartAnswerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CartListingCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CartListingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartListingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'CartListingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CartQuestionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CartQuestionCell

      let bundle = R.hostingBundle
      let identifier = "CartQuestionCell"
      let name = "CartQuestionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartQuestionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartQuestionCell
      }

      fileprivate init() {}
    }

    struct _CartQuestionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartQuestionHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CartQuestionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartQuestionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ChatAccessory: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChatAccessory"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_attach", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach' is used in nib 'ChatAccessory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in nib 'ChatAccessory', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ChatBotMessageTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatBotMessageTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotMessageTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotMessageTableCell
      }

      fileprivate init() {}
    }

    struct _ChatBotProductTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatBotProductTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotProductTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotProductTableCell
      }

      fileprivate init() {}
    }

    struct _ChatBotProductsHeaderTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatBotProductsHeaderTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatBotProductsHeaderTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatBotProductsHeaderTableCell
      }

      fileprivate init() {}
    }

    struct _CheckCustomizationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CheckCustomizationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckCustomizationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckCustomizationTableViewCell
      }

      fileprivate init() {}
    }

    struct _CountryListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CountryListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CouponToBuyCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CouponToBuyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponToBuyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponToBuyCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_promo_code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_promo_code' is used in nib 'CouponToBuyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CustomizationTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomizationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomizationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomizationTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'CustomizationTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'CustomizationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CutomizationTableHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CutomizationTableHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DeliveryAddressCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DeliveryAddressCollectionCell

      let bundle = R.hostingBundle
      let identifier = "DeliveryAddressCollectionCell"
      let name = "DeliveryAddressCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeliveryAddressCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeliveryAddressCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_address", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_address' is used in nib 'DeliveryAddressCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DonatePopupVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DonatePopupVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ico_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_location' is used in nib 'DonatePopupVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DriverAcceptedCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DriverAcceptedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DriverAcceptedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DriverAcceptedCell
      }

      fileprivate init() {}
    }

    struct _ETokenHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ETokenHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenHeaderView
      }

      fileprivate init() {}
    }

    struct _ETokenOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ETokenOfferCell

      let bundle = R.hostingBundle
      let identifier = "ETokenOfferCell"
      let name = "ETokenOfferCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenOfferCell
      }

      fileprivate init() {}
    }

    struct _ETokenPurchasedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ETokenPurchasedCell

      let bundle = R.hostingBundle
      let identifier = "ETokenPurchasedCell"
      let name = "ETokenPurchasedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenPurchasedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenPurchasedCell
      }

      fileprivate init() {}
    }

    struct _ETokenPurchasedTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ETokenPurchasedTableCell

      let bundle = R.hostingBundle
      let identifier = "ETokenPurchasedTableCell"
      let name = "ETokenPurchasedTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenPurchasedTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenPurchasedTableCell
      }

      fileprivate init() {}
    }

    struct _ETokenTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ETokenTableCell

      let bundle = R.hostingBundle
      let identifier = "ETokenTableCell"
      let name = "ETokenTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenTableCell
      }

      fileprivate init() {}
    }

    struct _ETokenToBuyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ETokenToBuyCell

      let bundle = R.hostingBundle
      let identifier = "ETokenToBuyCell"
      let name = "ETokenToBuyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ETokenToBuyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ETokenToBuyCell
      }

      fileprivate init() {}
    }

    struct _FlickeringHomeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FlickeringHomeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringHomeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringHomeTableViewCell
      }

      fileprivate init() {}
    }

    struct _FlickeringRestMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FlickeringRestMenuCell

      let bundle = R.hostingBundle
      let identifier = "FlickeringRestMenuCell"
      let name = "FlickeringRestMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringRestMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringRestMenuCell
      }

      fileprivate init() {}
    }

    struct _FlickeringRestraDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FlickeringRestraDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FlickeringRestraDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FlickeringRestraDetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _FloatingSupplierView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FloatingSupplierView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeBrandCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBrandCollectionCell

      let bundle = R.hostingBundle
      let identifier = "HomeBrandCollectionCell"
      let name = "HomeBrandCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_splash' is used in nib 'HomeBrandCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heartUnselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heartUnselected' is used in nib 'HomeBrandCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'HomeBrandCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeBrandsCollectionCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBrandsCollectionCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandsCollectionCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandsCollectionCollectionCell
      }

      fileprivate init() {}
    }

    struct _HomeBrandsCollectionTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeBrandsCollectionTableCell

      let bundle = R.hostingBundle
      let identifier = "HomeBrandsCollectionTableCell"
      let name = "HomeBrandsCollectionTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBrandsCollectionTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBrandsCollectionTableCell
      }

      fileprivate init() {}
    }

    struct _HomeCurrentOrderCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeCurrentOrderCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCurrentOrderCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCurrentOrderCollectionCell
      }

      fileprivate init() {}
    }

    struct _HomeFoodItemCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeFoodItemCollectionCell

      let bundle = R.hostingBundle
      let identifier = "HomeFoodItemCollectionCell"
      let name = "HomeFoodItemCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFoodItemCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFoodItemCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'HomeFoodItemCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeFoodRestaurantTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeFoodRestaurantTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFoodRestaurantTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFoodRestaurantTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_liveTracking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_liveTracking' is used in nib 'HomeFoodRestaurantTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeMenuCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeMenuCollectionCell

      let bundle = R.hostingBundle
      let identifier = "HomeMenuCollectionCell"
      let name = "HomeMenuCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMenuCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMenuCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ZDCDefaultAvatar.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ZDCDefaultAvatar.png' is used in nib 'HomeMenuCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeMenuCollectionTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeMenuCollectionTableCell

      let bundle = R.hostingBundle
      let identifier = "HomeMenuCollectionTableCell"
      let name = "HomeMenuCollectionTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMenuCollectionTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMenuCollectionTableCell
      }

      fileprivate init() {}
    }

    struct _HomeOffersHListTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeOffersHListTableCell

      let bundle = R.hostingBundle
      let identifier = "HomeOffersHListTableCell"
      let name = "HomeOffersHListTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOffersHListTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOffersHListTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "homerservices_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homerservices_bg' is used in nib 'HomeOffersHListTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeProductCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeProductCell

      let bundle = R.hostingBundle
      let identifier = "HomeProductCell"
      let name = "HomeProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeProductCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_favorite_white_normal-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_normal-1' is used in nib 'HomeProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'HomeProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'HomeProductCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeSearchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeSearchCell

      let bundle = R.hostingBundle
      let identifier = "HomeSearchCell"
      let name = "HomeSearchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSearchCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in nib 'HomeSearchCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeSectionHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeServiceCategoriesTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeServiceCategoriesTableCell

      let bundle = R.hostingBundle
      let identifier = "HomeServiceCategoriesTableCell"
      let name = "HomeServiceCategoriesTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceCategoriesTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceCategoriesTableCell
      }

      fileprivate init() {}
    }

    struct _HomeServiceCategoryCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeServiceCategoryCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceCategoryCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceCategoryCollectionCell
      }

      fileprivate init() {}
    }

    struct _HomeSkeletonCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeSkeletonCell

      let bundle = R.hostingBundle
      let identifier = "HomeSkeletonCell"
      let name = "HomeSkeletonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSkeletonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSkeletonCell
      }

      fileprivate init() {}
    }

    struct _HomeSupplierTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeSupplierTableCell

      let bundle = R.hostingBundle
      let identifier = "HomeSupplierTableCell"
      let name = "HomeSupplierTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSupplierTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSupplierTableCell
      }

      fileprivate init() {}
    }

    struct _JNJHomeHeaderTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JNJHomeHeaderTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JNJHomeHeaderTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JNJHomeHeaderTableCell
      }

      fileprivate init() {}
    }

    struct _LaundrySectionHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaundrySectionHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_dd_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_down' is used in nib 'LaundrySectionHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LaundryServiceHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaundryServiceHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_service_laundry", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_service_laundry' is used in nib 'LaundryServiceHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoadMorePTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadMorePTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadMorePTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMorePTableCell
      }

      fileprivate init() {}
    }

    struct _MixedHomeLabelCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MixedHomeLabelCell

      let bundle = R.hostingBundle
      let identifier = "MixedHomeLabelCell"
      let name = "MixedHomeLabelCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeLabelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeLabelCell
      }

      fileprivate init() {}
    }

    struct _MixedHomeV2CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MixedHomeV2CategoryCell

      let bundle = R.hostingBundle
      let identifier = "MixedHomeV2CategoryCell"
      let name = "MixedHomeV2CategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2CategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cab' is used in nib 'MixedHomeV2CategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MixedHomeV2DealCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MixedHomeV2DealCell

      let bundle = R.hostingBundle
      let identifier = "MixedHomeV2DealCell"
      let name = "MixedHomeV2DealCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2DealCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2DealCell
      }

      fileprivate init() {}
    }

    struct _MixedHomeV2LabelCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MixedHomeV2LabelCell

      let bundle = R.hostingBundle
      let identifier = "MixedHomeV2LabelCell"
      let name = "MixedHomeV2LabelCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MixedHomeV2LabelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MixedHomeV2LabelCell
      }

      fileprivate init() {}
    }

    struct _MoreTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MoreTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreTableViewCell
      }

      fileprivate init() {}
    }

    struct _MyCouponCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCouponCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCouponCell
      }

      fileprivate init() {}
    }

    struct _MyETokenCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyETokenCell

      let bundle = R.hostingBundle
      let identifier = "MyETokenCell"
      let name = "MyETokenCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyETokenCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyETokenCell
      }

      fileprivate init() {}
    }

    struct _OrderDeliveryDetailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDeliveryDetailView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrderImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderImageCell

      let bundle = R.hostingBundle
      let identifier = "OrderImageCell"
      let name = "OrderImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderImageCell
      }

      fileprivate init() {}
    }

    struct _OrderParentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderParentCell

      let bundle = R.hostingBundle
      let identifier = "OrderParentCell"
      let name = "OrderParentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderParentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderParentCell
      }

      fileprivate init() {}
    }

    struct _ProductCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCategoryCell

      let bundle = R.hostingBundle
      let identifier = "ProductCategoryCell"
      let name = "ProductCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in nib 'ProductCategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProductCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ProductCollectionCell"
      let name = "ProductCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionCell
      }

      fileprivate init() {}
    }

    struct _ProductInfoHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductInfoHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_favorite_white_normal-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_normal-1' is used in nib 'ProductInfoHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'ProductInfoHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductListCell

      let bundle = R.hostingBundle
      let identifier = "ProductListCell"
      let name = "ProductListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "heartUnselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heartUnselected' is used in nib 'ProductListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'ProductListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_right_arrow' is used in nib 'ProductListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'ProductListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductListingCell

      let bundle = R.hostingBundle
      let identifier = "ProductListingCell"
      let name = "ProductListingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductListingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'ProductListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_normal-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_normal-1' is used in nib 'ProductListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'ProductListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'ProductListingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_services", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_services' is used in nib 'ProductView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-download' is used in nib 'ProductView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PurchasedCouponTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PurchasedCouponTableCell

      let bundle = R.hostingBundle
      let identifier = "PurchasedCouponTableCell"
      let name = "PurchasedCouponTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PurchasedCouponTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PurchasedCouponTableCell
      }

      fileprivate init() {}
    }

    struct _ReceiverAtchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReceiverAtchCell

      let bundle = R.hostingBundle
      let identifier = "ReceiverAtchCell"
      let name = "ReceiverAtchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverAtchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverAtchCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_pdf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pdf' is used in nib 'ReceiverAtchCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ReceiverImgCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReceiverImgCell

      let bundle = R.hostingBundle
      let identifier = "ReceiverImgCell"
      let name = "ReceiverImgCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverImgCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverImgCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in nib 'ReceiverImgCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ReceiverTxtCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ReceiverTxtCell

      let bundle = R.hostingBundle
      let identifier = "ReceiverTxtCell"
      let name = "ReceiverTxtCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiverTxtCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiverTxtCell
      }

      fileprivate init() {}
    }

    struct _RefreshControlView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RefreshControlView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RentalHomeCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RentalHomeCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalHomeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalHomeCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RentalProductImagesCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RentalProductImagesCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalProductImagesCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalProductImagesCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RentalProductSpecificationCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RentalProductSpecificationCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalProductSpecificationCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalProductSpecificationCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RentalSupplierListingTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RentalSupplierListingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RentalSupplierListingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RentalSupplierListingTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_favorite_white_normal-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_normal-1' is used in nib 'RentalSupplierListingTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in nib 'RentalSupplierListingTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'RentalSupplierListingTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RestaurantTableHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RestaurantTableHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "436B8A4B-5B19-4AF4-9658-0B629FD0EB37", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '436B8A4B-5B19-4AF4-9658-0B629FD0EB37' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:JSD-mB-OI8:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:JSD-mB-OI8:image' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:ThH-we-RpY:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:ThH-we-RpY:image' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_white' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upload' is used in nib 'RestaurantTableHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SavedAddressTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SavedAddressTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SavedAddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SavedAddressTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "moreIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moreIcon' is used in nib 'SavedAddressTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in nib 'SavedAddressTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SenderAtchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SenderAtchCell

      let bundle = R.hostingBundle
      let identifier = "SenderAtchCell"
      let name = "SenderAtchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderAtchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderAtchCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_pdf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pdf' is used in nib 'SenderAtchCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SenderImgCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SenderImgCell

      let bundle = R.hostingBundle
      let identifier = "SenderImgCell"
      let name = "SenderImgCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderImgCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderImgCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in nib 'SenderImgCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SenderTxtCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SenderTxtCell

      let bundle = R.hostingBundle
      let identifier = "SenderTxtCell"
      let name = "SenderTxtCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SenderTxtCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SenderTxtCell
      }

      fileprivate init() {}
    }

    struct _SideMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideMenuCell

      let bundle = R.hostingBundle
      let identifier = "SideMenuCell"
      let name = "SideMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuCell
      }

      fileprivate init() {}
    }

    struct _SponsorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SponsorView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SubCategoryListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SubCategoryListingCell

      let bundle = R.hostingBundle
      let identifier = "SubCategoryListingCell"
      let name = "SubCategoryListingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryListingCell
      }

      fileprivate init() {}
    }

    struct _SupplierCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupplierCollectionCell

      let bundle = R.hostingBundle
      let identifier = "SupplierCollectionCell"
      let name = "SupplierCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in nib 'SupplierCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierInfoHeaderCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupplierInfoHeaderCollectionCell

      let bundle = R.hostingBundle
      let identifier = "SupplierInfoHeaderCollectionCell"
      let name = "SupplierInfoHeaderCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierInfoHeaderCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierInfoHeaderCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'SupplierInfoHeaderCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierInfoHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierInfoHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_splash_ii", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_splash_ii' is used in nib 'SupplierInfoHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_white' is used in nib 'SupplierInfoHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierListingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupplierListingCell

      let bundle = R.hostingBundle
      let identifier = "SupplierListingCell"
      let name = "SupplierListingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierListingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierListingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "badge_sponsor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'badge_sponsor' is used in nib 'SupplierListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_card' is used in nib 'SupplierListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_cash' is used in nib 'SupplierListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_big_yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_big_yellow' is used in nib 'SupplierListingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_status_online", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_status_online' is used in nib 'SupplierListingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierRatingPopUp: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupplierRatingPopUp"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TempCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TempCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "TempCollectionViewCell"
      let name = "TempCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TempCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TempCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in nib 'TempCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TravelPackagesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TravelPackagesTableViewCell

      let bundle = R.hostingBundle
      let identifier = "TravelPackagesCell"
      let name = "TravelPackagesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TravelPackagesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TravelPackagesTableViewCell
      }

      fileprivate init() {}
    }

    struct _UploadImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UploadImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "UploadImageCollectionCell"
      let name = "UploadImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UploadImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UploadImageCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_cart_plus_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_plus_normal' is used in nib 'UploadImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in nib 'UploadImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UploadedDocCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UploadedDocTableViewCell

      let bundle = R.hostingBundle
      let identifier = "UploadedDocCell"
      let name = "UploadedDocCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UploadedDocTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UploadedDocTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_cross_s copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross_s copy' is used in nib 'UploadedDocCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_success' is used in nib 'UploadedDocCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VPAutoCompleteViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = VPAutoCompleteViewCell

      let bundle = R.hostingBundle
      let identifier = "VPAutoCompleteViewCell"
      let name = "VPAutoCompleteViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VPAutoCompleteViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VPAutoCompleteViewCell
      }

      fileprivate init() {}
    }

    struct _VariantView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VariantView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VehicleImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UICollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "VehicleImageCollectionCell"
      let name = "VehicleImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_car_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_car_white' is used in nib 'VehicleImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try bookService.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try bot.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try chats.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try doctorHome.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try drinkingWater.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try laundry.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainCab.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mixedHome.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try moreScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newTemplateLoginSignUp.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try options.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try order.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try payment.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try referal.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try register.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sideMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splash.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try template1_Design.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tracking.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct bookService: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addLocationFromMapViewController = StoryboardViewControllerResource<AddLocationFromMapViewController>(identifier: "AddLocationFromMapViewController")
      let bundle = R.hostingBundle
      let buyTokenVC = StoryboardViewControllerResource<BuyTokenVC>(identifier: "BuyTokenVC")
      let cancellationVC = StoryboardViewControllerResource<CancellationVC>(identifier: "CancellationVC")
      let confirmBookingVC = StoryboardViewControllerResource<ConfirmBookingVC>(identifier: "ConfirmBookingVC")
      let confirmPickUpViewController = StoryboardViewControllerResource<ConfirmPickUpViewController>(identifier: "ConfirmPickUpViewController")
      let editLocationViewController = StoryboardViewControllerResource<EditLocationViewController>(identifier: "EditLocationViewController")
      let fareBreakdownViewController = StoryboardViewControllerResource<FareBreakdownViewController>(identifier: "FareBreakdownViewController")
      let fullOrderDetails = StoryboardViewControllerResource<FullOrderDetails>(identifier: "FullOrderDetails")
      let homeNavigationController = StoryboardViewControllerResource<HomeNavigationController>(identifier: "HomeNavigationController")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "BookService"
      let ongoingRideDetailsViewController = StoryboardViewControllerResource<OngoingRideDetailsViewController>(identifier: "OngoingRideDetailsViewController")
      let outstandingViewcontroller = StoryboardViewControllerResource<OutstandingViewcontroller>(identifier: "OutstandingViewcontroller")
      let panicModelViewController = StoryboardViewControllerResource<PanicModelViewController>(identifier: "PanicModelViewController")
      let paymentVC = StoryboardViewControllerResource<PaymentVCCab>(identifier: "PaymentVC")
      let promoCodeViewController = StoryboardViewControllerResource<PromoCodeViewController>(identifier: "PromoCodeViewController")
      let razorPayWaitingVC = StoryboardViewControllerResource<RazorPayWaitingVC>(identifier: "RazorPayWaitingVC")
      let razorpayVC = StoryboardViewControllerResource<RazorpayVC>(identifier: "RazorpayVC")
      let rightMenuViewController = StoryboardViewControllerResource<RightMenuViewController>(identifier: "RightMenuViewController")
      let saveAddressVC = StoryboardViewControllerResource<SaveAddressVC>(identifier: "SaveAddressVC")
      let scannerViewController = StoryboardViewControllerResource<ScannerViewController>(identifier: "ScannerViewController")
      let schedulerVC = StoryboardViewControllerResource<SchedulerVC>(identifier: "SchedulerVC")
      let shareRideViewController = StoryboardViewControllerResource<ShareRideViewController>(identifier: "ShareRideViewController")
      let storyVC = StoryboardViewControllerResource<StoryVC>(identifier: "StoryVC")
      let supportVC = StoryboardViewControllerResource<SupportVC>(identifier: "SupportVC")
      let tipScreen = StoryboardViewControllerResource<TipScreen>(identifier: "TipScreen")

      func addLocationFromMapViewController(_: Void = ()) -> AddLocationFromMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addLocationFromMapViewController)
      }

      func buyTokenVC(_: Void = ()) -> BuyTokenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buyTokenVC)
      }

      func cancellationVC(_: Void = ()) -> CancellationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cancellationVC)
      }

      func confirmBookingVC(_: Void = ()) -> ConfirmBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmBookingVC)
      }

      func confirmPickUpViewController(_: Void = ()) -> ConfirmPickUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmPickUpViewController)
      }

      func editLocationViewController(_: Void = ()) -> EditLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editLocationViewController)
      }

      func fareBreakdownViewController(_: Void = ()) -> FareBreakdownViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fareBreakdownViewController)
      }

      func fullOrderDetails(_: Void = ()) -> FullOrderDetails? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fullOrderDetails)
      }

      func homeNavigationController(_: Void = ()) -> HomeNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationController)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }

      func ongoingRideDetailsViewController(_: Void = ()) -> OngoingRideDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ongoingRideDetailsViewController)
      }

      func outstandingViewcontroller(_: Void = ()) -> OutstandingViewcontroller? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outstandingViewcontroller)
      }

      func panicModelViewController(_: Void = ()) -> PanicModelViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: panicModelViewController)
      }

      func paymentVC(_: Void = ()) -> PaymentVCCab? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func promoCodeViewController(_: Void = ()) -> PromoCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promoCodeViewController)
      }

      func razorPayWaitingVC(_: Void = ()) -> RazorPayWaitingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: razorPayWaitingVC)
      }

      func razorpayVC(_: Void = ()) -> RazorpayVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: razorpayVC)
      }

      func rightMenuViewController(_: Void = ()) -> RightMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rightMenuViewController)
      }

      func saveAddressVC(_: Void = ()) -> SaveAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: saveAddressVC)
      }

      func scannerViewController(_: Void = ()) -> ScannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scannerViewController)
      }

      func schedulerVC(_: Void = ()) -> SchedulerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: schedulerVC)
      }

      func shareRideViewController(_: Void = ()) -> ShareRideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareRideViewController)
      }

      func storyVC(_: Void = ()) -> StoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyVC)
      }

      func supportVC(_: Void = ()) -> SupportVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supportVC)
      }

      func tipScreen(_: Void = ()) -> TipScreen? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tipScreen)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowDown' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CallDriver", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CallDriver' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CashOnDelivery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CashOnDelivery' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CreditCard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CreditCard' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropIcon' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropMarker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropMarker' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GasActive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GasActive' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PickUpMarker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PickUpMarker' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PromoCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PromoCode' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StarEmptyLarge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarEmptyLarge' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_location' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_1' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_1off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_1off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_2' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_2off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_2off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_3' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_3off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_3off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_4' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_4off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_4off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_5' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_5off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_5off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_5s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_5s' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Sheet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Sheet' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_bg' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_new_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_new_Icon' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow_black' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_arrow_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow_white' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bike_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bike_active' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bike_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bike_inactive' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_book_by_call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_book_by_call' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_breackdown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_breackdown' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_red' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_ride_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_ride_big' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_car_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_car_inactive' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_active' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_inactive' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cash_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cash_active' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross_s' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_down_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down_arrow' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_location' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gps' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_half_way_stop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_half_way_stop' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_blue' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_grey' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_oilchange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_oilchange' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pick_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pick_location' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_off' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_on' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_recent_locations", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_recent_locations' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ride_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ride_share' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_road_pickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_road_pickup' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_schedule_pickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_schedule_pickup' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_slide_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_slide_arrow' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_slide_arrow-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_slide_arrow-back' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_gray' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_orange' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_token", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_token' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_two_dotted_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_two_dotted_line' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user1' is used in storyboard 'BookService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "in.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'in.png' is used in storyboard 'BookService', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppDarkGrayHigh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppDarkGrayHigh' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppDefaultLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppDefaultLight' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppGrayColor' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppNewRedBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppNewRedBorder' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPurple' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppRed' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppShadowLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppShadowLightGray' is used in storyboard 'BookService', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTextBlack' is used in storyboard 'BookService', but couldn't be loaded.") }
        }
        if _R.storyboard.bookService().addLocationFromMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addLocationFromMapViewController' could not be loaded from storyboard 'BookService' as 'AddLocationFromMapViewController'.") }
        if _R.storyboard.bookService().buyTokenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buyTokenVC' could not be loaded from storyboard 'BookService' as 'BuyTokenVC'.") }
        if _R.storyboard.bookService().cancellationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cancellationVC' could not be loaded from storyboard 'BookService' as 'CancellationVC'.") }
        if _R.storyboard.bookService().confirmBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmBookingVC' could not be loaded from storyboard 'BookService' as 'ConfirmBookingVC'.") }
        if _R.storyboard.bookService().confirmPickUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmPickUpViewController' could not be loaded from storyboard 'BookService' as 'ConfirmPickUpViewController'.") }
        if _R.storyboard.bookService().editLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editLocationViewController' could not be loaded from storyboard 'BookService' as 'EditLocationViewController'.") }
        if _R.storyboard.bookService().fareBreakdownViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fareBreakdownViewController' could not be loaded from storyboard 'BookService' as 'FareBreakdownViewController'.") }
        if _R.storyboard.bookService().fullOrderDetails() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fullOrderDetails' could not be loaded from storyboard 'BookService' as 'FullOrderDetails'.") }
        if _R.storyboard.bookService().homeNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationController' could not be loaded from storyboard 'BookService' as 'HomeNavigationController'.") }
        if _R.storyboard.bookService().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'BookService' as 'HomeVC'.") }
        if _R.storyboard.bookService().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'BookService' as 'MenuViewController'.") }
        if _R.storyboard.bookService().ongoingRideDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ongoingRideDetailsViewController' could not be loaded from storyboard 'BookService' as 'OngoingRideDetailsViewController'.") }
        if _R.storyboard.bookService().outstandingViewcontroller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outstandingViewcontroller' could not be loaded from storyboard 'BookService' as 'OutstandingViewcontroller'.") }
        if _R.storyboard.bookService().panicModelViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'panicModelViewController' could not be loaded from storyboard 'BookService' as 'PanicModelViewController'.") }
        if _R.storyboard.bookService().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'BookService' as 'PaymentVCCab'.") }
        if _R.storyboard.bookService().promoCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promoCodeViewController' could not be loaded from storyboard 'BookService' as 'PromoCodeViewController'.") }
        if _R.storyboard.bookService().razorPayWaitingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'razorPayWaitingVC' could not be loaded from storyboard 'BookService' as 'RazorPayWaitingVC'.") }
        if _R.storyboard.bookService().razorpayVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'razorpayVC' could not be loaded from storyboard 'BookService' as 'RazorpayVC'.") }
        if _R.storyboard.bookService().rightMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rightMenuViewController' could not be loaded from storyboard 'BookService' as 'RightMenuViewController'.") }
        if _R.storyboard.bookService().saveAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'saveAddressVC' could not be loaded from storyboard 'BookService' as 'SaveAddressVC'.") }
        if _R.storyboard.bookService().scannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scannerViewController' could not be loaded from storyboard 'BookService' as 'ScannerViewController'.") }
        if _R.storyboard.bookService().schedulerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'schedulerVC' could not be loaded from storyboard 'BookService' as 'SchedulerVC'.") }
        if _R.storyboard.bookService().shareRideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareRideViewController' could not be loaded from storyboard 'BookService' as 'ShareRideViewController'.") }
        if _R.storyboard.bookService().storyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyVC' could not be loaded from storyboard 'BookService' as 'StoryVC'.") }
        if _R.storyboard.bookService().supportVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supportVC' could not be loaded from storyboard 'BookService' as 'SupportVC'.") }
        if _R.storyboard.bookService().tipScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tipScreen' could not be loaded from storyboard 'BookService' as 'TipScreen'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct bot: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bookTablePopUpVC = StoryboardViewControllerResource<BookTablePopUpVC>(identifier: "BookTablePopUpVC")
      let bundle = R.hostingBundle
      let chatBotChatVC = StoryboardViewControllerResource<ChatBotChatVC>(identifier: "ChatBotChatVC")
      let name = "Bot"

      func bookTablePopUpVC(_: Void = ()) -> BookTablePopUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookTablePopUpVC)
      }

      func chatBotChatVC(_: Void = ()) -> ChatBotChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatBotChatVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "flag_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_us' is used in storyboard 'Bot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ChatBot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ChatBot' is used in storyboard 'Bot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bot_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bot_send' is used in storyboard 'Bot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Bot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in storyboard 'Bot', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.bot().bookTablePopUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookTablePopUpVC' could not be loaded from storyboard 'Bot' as 'BookTablePopUpVC'.") }
        if _R.storyboard.bot().chatBotChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatBotChatVC' could not be loaded from storyboard 'Bot' as 'ChatBotChatVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct chats: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatHeadVC = StoryboardViewControllerResource<ChatHeadVC>(identifier: "ChatHeadVC")
      let name = "Chats"

      func chatHeadVC(_: Void = ()) -> ChatHeadVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatHeadVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Chats', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chats().chatHeadVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatHeadVC' could not be loaded from storyboard 'Chats' as 'ChatHeadVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct doctorHome: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DoctorHomeVC

      let bundle = R.hostingBundle
      let doctorHomeVC = StoryboardViewControllerResource<DoctorHomeVC>(identifier: "DoctorHomeVC")
      let name = "DoctorHome"

      func doctorHomeVC(_: Void = ()) -> DoctorHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: doctorHomeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "homerservices_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homerservices_bg' is used in storyboard 'DoctorHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_location' is used in storyboard 'DoctorHome', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.doctorHome().doctorHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'doctorHomeVC' could not be loaded from storyboard 'DoctorHome' as 'DoctorHomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct drinkingWater: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let bottleReturnVC = StoryboardViewControllerResource<BottleReturnVC>(identifier: "BottleReturnVC")
      let bundle = R.hostingBundle
      let drinkingWaterETokenDeliver = StoryboardViewControllerResource<DrinkingWaterETokenDeliver>(identifier: "DrinkingWaterETokenDeliver")
      let eTokenToBuyVC = StoryboardViewControllerResource<ETokenToBuyVC>(identifier: "ETokenToBuyVC")
      let name = "DrinkingWater"
      let tokenListingVC = StoryboardViewControllerResource<TokenListingVC>(identifier: "TokenListingVC")
      let trackEtokenViewController = StoryboardViewControllerResource<TrackEtokenViewController>(identifier: "TrackEtokenViewController")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func bottleReturnVC(_: Void = ()) -> BottleReturnVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottleReturnVC)
      }

      func drinkingWaterETokenDeliver(_: Void = ()) -> DrinkingWaterETokenDeliver? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drinkingWaterETokenDeliver)
      }

      func eTokenToBuyVC(_: Void = ()) -> ETokenToBuyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eTokenToBuyVC)
      }

      func tokenListingVC(_: Void = ()) -> TokenListingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tokenListingVC)
      }

      func trackEtokenViewController(_: Void = ()) -> TrackEtokenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trackEtokenViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Aquafina", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Aquafina' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowDown' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CallDriver", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CallDriver' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropIcon' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropMarker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropMarker' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PickUpIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PickUpIcon' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_1' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_1off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_1off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_2' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_2off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_2off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_3' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_3off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_3off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_4' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_4off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_4off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_5' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_5off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_5off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_off' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_on' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in storyboard 'DrinkingWater', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.drinkingWater().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'DrinkingWater' as 'AddressPickerVC'.") }
        if _R.storyboard.drinkingWater().bottleReturnVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottleReturnVC' could not be loaded from storyboard 'DrinkingWater' as 'BottleReturnVC'.") }
        if _R.storyboard.drinkingWater().drinkingWaterETokenDeliver() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drinkingWaterETokenDeliver' could not be loaded from storyboard 'DrinkingWater' as 'DrinkingWaterETokenDeliver'.") }
        if _R.storyboard.drinkingWater().eTokenToBuyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eTokenToBuyVC' could not be loaded from storyboard 'DrinkingWater' as 'ETokenToBuyVC'.") }
        if _R.storyboard.drinkingWater().tokenListingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tokenListingVC' could not be loaded from storyboard 'DrinkingWater' as 'TokenListingVC'.") }
        if _R.storyboard.drinkingWater().trackEtokenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trackEtokenViewController' could not be loaded from storyboard 'DrinkingWater' as 'TrackEtokenViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct laundry: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Laundry"
      let orderViewController = StoryboardViewControllerResource<OrderViewController>(identifier: "OrderViewController")
      let pickupDetailsController = StoryboardViewControllerResource<PickupDetailsController>(identifier: "PickupDetailsController")
      let servicesViewController = StoryboardViewControllerResource<ServicesViewController>(identifier: "ServicesViewController")

      func orderViewController(_: Void = ()) -> OrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderViewController)
      }

      func pickupDetailsController(_: Void = ()) -> PickupDetailsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickupDetailsController)
      }

      func servicesViewController(_: Void = ()) -> ServicesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: servicesViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_new' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_nothing_found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_nothing_found' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in storyboard 'Laundry', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.laundry().orderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderViewController' could not be loaded from storyboard 'Laundry' as 'OrderViewController'.") }
        if _R.storyboard.laundry().pickupDetailsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickupDetailsController' could not be loaded from storyboard 'Laundry' as 'PickupDetailsController'.") }
        if _R.storyboard.laundry().servicesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'servicesViewController' could not be loaded from storyboard 'Laundry' as 'ServicesViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let categoryTabVC = StoryboardViewControllerResource<CategoryTabVC>(identifier: "CategoryTabVC")
      let categoryViewController = StoryboardViewControllerResource<CategoryViewController>(identifier: "CategoryViewController")
      let drawerMenuViewController = StoryboardViewControllerResource<DrawerMenuViewController>(identifier: "DrawerMenuViewController")
      let ecommerceHomeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "EcommerceHomeViewController")
      let filterCategoryNavigationVC = StoryboardViewControllerResource<FilterCategoryNavigationVC>(identifier: "FilterCategoryNavigationVC")
      let filterSubCategoryViewController = StoryboardViewControllerResource<FilterSubCategoryViewController>(identifier: "FilterSubCategoryViewController")
      let filterSubSubCategeoryVC = StoryboardViewControllerResource<FilterSubSubCategeoryVC>(identifier: "FilterSubSubCategeoryVC")
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let homeSearchVC = StoryboardViewControllerResource<HomeSearchVC>(identifier: "HomeSearchVC")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let itemListingViewController = StoryboardViewControllerResource<ItemListingViewController>(identifier: "ItemListingViewController")
      let itemTableViewController = StoryboardViewControllerResource<ItemTableViewController>(identifier: "ItemTableViewController")
      let leftNavigationViewController = StoryboardViewControllerResource<LeftNavigationViewController>(identifier: "LeftNavigationViewController")
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let mapViewController = StoryboardViewControllerResource<MapViewController>(identifier: "MapViewController")
      let moreViewController = StoryboardViewControllerResource<MoreViewController>(identifier: "MoreViewController")
      let name = "Main"
      let newLocationViewController = StoryboardViewControllerResource<NewLocationViewController>(identifier: "NewLocationViewController")
      let packageProductListingViewController = StoryboardViewControllerResource<PackageProductListingViewController>(identifier: "PackageProductListingViewController")
      let packageSupplierListingViewController = StoryboardViewControllerResource<PackageSupplierListingViewController>(identifier: "PackageSupplierListingViewController")
      let productDetailViewController = StoryboardViewControllerResource<ProductDetailViewController>(identifier: "ProductDetailViewController")
      let productVariantVC = StoryboardViewControllerResource<ProductVariantVC>(identifier: "ProductVariantVC")
      let rentalFavouritesViewController = StoryboardViewControllerResource<RentalFavouritesViewController>(identifier: "RentalFavouritesViewController")
      let rentalPaymentSummaryViewController = StoryboardViewControllerResource<RentalPaymentSummaryViewController>(identifier: "RentalPaymentSummaryViewController")
      let rentalSupplierDetailViewController = StoryboardViewControllerResource<RentalSupplierDetailViewController>(identifier: "RentalSupplierDetailViewController")
      let rentalSupplierListingViewController = StoryboardViewControllerResource<RentalSupplierListingViewController>(identifier: "RentalSupplierListingViewController")
      let rightNavigationViewController = StoryboardViewControllerResource<RightNavigationViewController>(identifier: "RightNavigationViewController")
      let royoRentalHomeViewController = StoryboardViewControllerResource<RoyoRentalHomeViewController>(identifier: "RoyoRentalHomeViewController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let servicesViewController = StoryboardViewControllerResource<ServicesViewController>(identifier: "ServicesViewController")
      let subcategoryViewController = StoryboardViewControllerResource<SubcategoryViewController>(identifier: "SubcategoryViewController")
      let supplierInfoViewController = StoryboardViewControllerResource<SupplierInfoViewController>(identifier: "SupplierInfoViewController")
      let supplierInfoViewControllerNoFood = StoryboardViewControllerResource<SupplierInfoViewControllerNoFood>(identifier: "SupplierInfoViewControllerNoFood")
      let supplierListingViewController = StoryboardViewControllerResource<SupplierListingViewController>(identifier: "SupplierListingViewController")
      let wishListViewController = StoryboardViewControllerResource<WishListViewController>(identifier: "WishListViewController")

      func categoryTabVC(_: Void = ()) -> CategoryTabVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryTabVC)
      }

      func categoryViewController(_: Void = ()) -> CategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryViewController)
      }

      func drawerMenuViewController(_: Void = ()) -> DrawerMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drawerMenuViewController)
      }

      func ecommerceHomeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ecommerceHomeViewController)
      }

      func filterCategoryNavigationVC(_: Void = ()) -> FilterCategoryNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterCategoryNavigationVC)
      }

      func filterSubCategoryViewController(_: Void = ()) -> FilterSubCategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterSubCategoryViewController)
      }

      func filterSubSubCategeoryVC(_: Void = ()) -> FilterSubSubCategeoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterSubSubCategeoryVC)
      }

      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }

      func homeSearchVC(_: Void = ()) -> HomeSearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeSearchVC)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func itemListingViewController(_: Void = ()) -> ItemListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemListingViewController)
      }

      func itemTableViewController(_: Void = ()) -> ItemTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemTableViewController)
      }

      func leftNavigationViewController(_: Void = ()) -> LeftNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftNavigationViewController)
      }

      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }

      func mapViewController(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapViewController)
      }

      func moreViewController(_: Void = ()) -> MoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moreViewController)
      }

      func newLocationViewController(_: Void = ()) -> NewLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newLocationViewController)
      }

      func packageProductListingViewController(_: Void = ()) -> PackageProductListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: packageProductListingViewController)
      }

      func packageSupplierListingViewController(_: Void = ()) -> PackageSupplierListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: packageSupplierListingViewController)
      }

      func productDetailViewController(_: Void = ()) -> ProductDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailViewController)
      }

      func productVariantVC(_: Void = ()) -> ProductVariantVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productVariantVC)
      }

      func rentalFavouritesViewController(_: Void = ()) -> RentalFavouritesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rentalFavouritesViewController)
      }

      func rentalPaymentSummaryViewController(_: Void = ()) -> RentalPaymentSummaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rentalPaymentSummaryViewController)
      }

      func rentalSupplierDetailViewController(_: Void = ()) -> RentalSupplierDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rentalSupplierDetailViewController)
      }

      func rentalSupplierListingViewController(_: Void = ()) -> RentalSupplierListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rentalSupplierListingViewController)
      }

      func rightNavigationViewController(_: Void = ()) -> RightNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rightNavigationViewController)
      }

      func royoRentalHomeViewController(_: Void = ()) -> RoyoRentalHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: royoRentalHomeViewController)
      }

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      func servicesViewController(_: Void = ()) -> ServicesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: servicesViewController)
      }

      func subcategoryViewController(_: Void = ()) -> SubcategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subcategoryViewController)
      }

      func supplierInfoViewController(_: Void = ()) -> SupplierInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supplierInfoViewController)
      }

      func supplierInfoViewControllerNoFood(_: Void = ()) -> SupplierInfoViewControllerNoFood? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supplierInfoViewControllerNoFood)
      }

      func supplierListingViewController(_: Void = ()) -> SupplierListingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supplierListingViewController)
      }

      func wishListViewController(_: Void = ()) -> WishListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wishListViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "HomeScreen_JNJ", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HomeScreen_JNJ' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IC_SPONSOR-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IC_SPONSOR-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "OrangeArrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'OrangeArrowIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backNew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backNew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_services", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_services' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_splash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:07g-Yv-foh:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:07g-Yv-foh:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:0nT-ln-R84:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:0nT-ln-R84:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:dce-Ny-oKr:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:dce-Ny-oKr:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:rUh-FQ-MRH:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:rUh-FQ-MRH:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clockBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clockBlue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "deliveryWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deliveryWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downArrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downArrowIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favActive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favActive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favInactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favInactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag_ead", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_ead' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homeSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homeSelected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homeUnselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homeUnselected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homerservices_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homerservices_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ChatBot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ChatBot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_UK_flag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_UK_flag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_address", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_address' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_forward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_forward' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_badge_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_badge_big' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_barcode_scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_barcode_scan' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_barcode_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_barcode_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_checked' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comment.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comment.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fb' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_grid_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_grid_view' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_grocery_delivery_charges", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_grocery_delivery_charges' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_grocery_deliverytime", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_grocery_deliverytime' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_instagram-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_instagram-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_list_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_list_view' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_min_amount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_min_amount' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_orders_done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_orders_done' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_cash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_methods", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_methods' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_place' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_checked' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_since", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_since' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sp_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sp_location' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sp_notifications", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sp_notifications' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_status_online", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_status_online' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_twitter-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_twitter-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_youtube", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_youtube' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:8bO-qA-JxV:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:8bO-qA-JxV:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_fade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_fade' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_nothing_found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_nothing_found' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "littleSeasorHeader", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'littleSeasorHeader' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationBlue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_splah_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_splah_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapPin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapPin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pickupWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pickupWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioActiveBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioActiveBlue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioInactiveBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioInactiveBlue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioOffBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioOffBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioOnBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioOnBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rentalBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rentalBg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starRating' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().categoryTabVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryTabVC' could not be loaded from storyboard 'Main' as 'CategoryTabVC'.") }
        if _R.storyboard.main().categoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryViewController' could not be loaded from storyboard 'Main' as 'CategoryViewController'.") }
        if _R.storyboard.main().drawerMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drawerMenuViewController' could not be loaded from storyboard 'Main' as 'DrawerMenuViewController'.") }
        if _R.storyboard.main().ecommerceHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ecommerceHomeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().filterCategoryNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterCategoryNavigationVC' could not be loaded from storyboard 'Main' as 'FilterCategoryNavigationVC'.") }
        if _R.storyboard.main().filterSubCategoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterSubCategoryViewController' could not be loaded from storyboard 'Main' as 'FilterSubCategoryViewController'.") }
        if _R.storyboard.main().filterSubSubCategeoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterSubSubCategeoryVC' could not be loaded from storyboard 'Main' as 'FilterSubSubCategeoryVC'.") }
        if _R.storyboard.main().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'Main' as 'FilterVC'.") }
        if _R.storyboard.main().homeSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeSearchVC' could not be loaded from storyboard 'Main' as 'HomeSearchVC'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().itemListingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemListingViewController' could not be loaded from storyboard 'Main' as 'ItemListingViewController'.") }
        if _R.storyboard.main().itemTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemTableViewController' could not be loaded from storyboard 'Main' as 'ItemTableViewController'.") }
        if _R.storyboard.main().leftNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftNavigationViewController' could not be loaded from storyboard 'Main' as 'LeftNavigationViewController'.") }
        if _R.storyboard.main().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'Main' as 'MainTabBarViewController'.") }
        if _R.storyboard.main().mapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapViewController' could not be loaded from storyboard 'Main' as 'MapViewController'.") }
        if _R.storyboard.main().moreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moreViewController' could not be loaded from storyboard 'Main' as 'MoreViewController'.") }
        if _R.storyboard.main().newLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newLocationViewController' could not be loaded from storyboard 'Main' as 'NewLocationViewController'.") }
        if _R.storyboard.main().packageProductListingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'packageProductListingViewController' could not be loaded from storyboard 'Main' as 'PackageProductListingViewController'.") }
        if _R.storyboard.main().packageSupplierListingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'packageSupplierListingViewController' could not be loaded from storyboard 'Main' as 'PackageSupplierListingViewController'.") }
        if _R.storyboard.main().productDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailViewController' could not be loaded from storyboard 'Main' as 'ProductDetailViewController'.") }
        if _R.storyboard.main().productVariantVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productVariantVC' could not be loaded from storyboard 'Main' as 'ProductVariantVC'.") }
        if _R.storyboard.main().rentalFavouritesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rentalFavouritesViewController' could not be loaded from storyboard 'Main' as 'RentalFavouritesViewController'.") }
        if _R.storyboard.main().rentalPaymentSummaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rentalPaymentSummaryViewController' could not be loaded from storyboard 'Main' as 'RentalPaymentSummaryViewController'.") }
        if _R.storyboard.main().rentalSupplierDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rentalSupplierDetailViewController' could not be loaded from storyboard 'Main' as 'RentalSupplierDetailViewController'.") }
        if _R.storyboard.main().rentalSupplierListingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rentalSupplierListingViewController' could not be loaded from storyboard 'Main' as 'RentalSupplierListingViewController'.") }
        if _R.storyboard.main().rightNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rightNavigationViewController' could not be loaded from storyboard 'Main' as 'RightNavigationViewController'.") }
        if _R.storyboard.main().royoRentalHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'royoRentalHomeViewController' could not be loaded from storyboard 'Main' as 'RoyoRentalHomeViewController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().servicesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'servicesViewController' could not be loaded from storyboard 'Main' as 'ServicesViewController'.") }
        if _R.storyboard.main().subcategoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subcategoryViewController' could not be loaded from storyboard 'Main' as 'SubcategoryViewController'.") }
        if _R.storyboard.main().supplierInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supplierInfoViewController' could not be loaded from storyboard 'Main' as 'SupplierInfoViewController'.") }
        if _R.storyboard.main().supplierInfoViewControllerNoFood() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supplierInfoViewControllerNoFood' could not be loaded from storyboard 'Main' as 'SupplierInfoViewControllerNoFood'.") }
        if _R.storyboard.main().supplierListingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supplierListingViewController' could not be loaded from storyboard 'Main' as 'SupplierListingViewController'.") }
        if _R.storyboard.main().wishListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wishListViewController' could not be loaded from storyboard 'Main' as 'WishListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainCab: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let chatListingVC = StoryboardViewControllerResource<ChatListingVC>(identifier: "ChatListingVC")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let countryCodeSearchViewController = StoryboardViewControllerResource<CountryCodeSearchViewController>(identifier: "CountryCodeSearchViewController")
      let initiallViewController = StoryboardViewControllerResource<InitiallViewController>(identifier: "InitiallViewController")
      let introductionVC = StoryboardViewControllerResource<IntroductionVC>(identifier: "IntroductionVC")
      let landingAndPhoneInputVC = StoryboardViewControllerResource<LandingAndPhoneInputVC>(identifier: "LandingAndPhoneInputVC")
      let name = "MainCab"
      let otpvC = StoryboardViewControllerResource<OTPVC>(identifier: "OTPVC")
      let selectLocationVC = StoryboardViewControllerResource<SelectLocationVCCab>(identifier: "SelectLocationVC")
      let selectMainCategoryViewController = StoryboardViewControllerResource<SelectMainCategoryViewController>(identifier: "SelectMainCategoryViewController")
      let termsAndConditionsVC = StoryboardViewControllerResource<TermsAndConditionsVC>(identifier: "TermsAndConditionsVC")
      let userProfileVC = StoryboardViewControllerResource<UserProfileVC>(identifier: "UserProfileVC")
      let workProgressVC = StoryboardViewControllerResource<WorkProgressVC>(identifier: "WorkProgressVC")

      func chatListingVC(_: Void = ()) -> ChatListingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatListingVC)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func countryCodeSearchViewController(_: Void = ()) -> CountryCodeSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: countryCodeSearchViewController)
      }

      func initiallViewController(_: Void = ()) -> InitiallViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initiallViewController)
      }

      func introductionVC(_: Void = ()) -> IntroductionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introductionVC)
      }

      func landingAndPhoneInputVC(_: Void = ()) -> LandingAndPhoneInputVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingAndPhoneInputVC)
      }

      func otpvC(_: Void = ()) -> OTPVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpvC)
      }

      func selectLocationVC(_: Void = ()) -> SelectLocationVCCab? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectLocationVC)
      }

      func selectMainCategoryViewController(_: Void = ()) -> SelectMainCategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectMainCategoryViewController)
      }

      func termsAndConditionsVC(_: Void = ()) -> TermsAndConditionsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndConditionsVC)
      }

      func userProfileVC(_: Void = ()) -> UserProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileVC)
      }

      func workProgressVC(_: Void = ()) -> WorkProgressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: workProgressVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowDown' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DropIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DropIcon' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Next' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PickUpIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PickUpIcon' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Royo_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Royo_splash' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WT1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WT1' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "advertisment_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'advertisment_1' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "biplifelogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'biplifelogo' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatArcGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatArcGreen' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatArcWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatArcWhite' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_bg' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_bg-g", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_bg-g' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow_black' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_arrow_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow_white' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_book_taxi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_book_taxi' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_active' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_inactive' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross-g", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross-g' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more_white' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_packages-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_packages-1' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_school_ride", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_school_ride' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smile' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_welcome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_welcome' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:3pJ-Pf-WKb:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:3pJ-Pf-WKb:image' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "in.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'in.png' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next_arrow' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkthrough1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough1' is used in storyboard 'MainCab', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppDarkGrayHigh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppDarkGrayHigh' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppDefaultLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppDefaultLight' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppGreen' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppNewRedBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppNewRedBorder' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppOrange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppOrange' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPurple' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppRed' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppShadowLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppShadowLightGray' is used in storyboard 'MainCab', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTextBlack' is used in storyboard 'MainCab', but couldn't be loaded.") }
        }
        if _R.storyboard.mainCab().chatListingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatListingVC' could not be loaded from storyboard 'MainCab' as 'ChatListingVC'.") }
        if _R.storyboard.mainCab().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'MainCab' as 'ChatVC'.") }
        if _R.storyboard.mainCab().countryCodeSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'countryCodeSearchViewController' could not be loaded from storyboard 'MainCab' as 'CountryCodeSearchViewController'.") }
        if _R.storyboard.mainCab().initiallViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initiallViewController' could not be loaded from storyboard 'MainCab' as 'InitiallViewController'.") }
        if _R.storyboard.mainCab().introductionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introductionVC' could not be loaded from storyboard 'MainCab' as 'IntroductionVC'.") }
        if _R.storyboard.mainCab().landingAndPhoneInputVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingAndPhoneInputVC' could not be loaded from storyboard 'MainCab' as 'LandingAndPhoneInputVC'.") }
        if _R.storyboard.mainCab().otpvC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpvC' could not be loaded from storyboard 'MainCab' as 'OTPVC'.") }
        if _R.storyboard.mainCab().selectLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectLocationVC' could not be loaded from storyboard 'MainCab' as 'SelectLocationVCCab'.") }
        if _R.storyboard.mainCab().selectMainCategoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectMainCategoryViewController' could not be loaded from storyboard 'MainCab' as 'SelectMainCategoryViewController'.") }
        if _R.storyboard.mainCab().termsAndConditionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndConditionsVC' could not be loaded from storyboard 'MainCab' as 'TermsAndConditionsVC'.") }
        if _R.storyboard.mainCab().userProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileVC' could not be loaded from storyboard 'MainCab' as 'UserProfileVC'.") }
        if _R.storyboard.mainCab().workProgressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'workProgressVC' could not be loaded from storyboard 'MainCab' as 'WorkProgressVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mixedHome: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mixedHomeVC = StoryboardViewControllerResource<MixedHomeVC>(identifier: "MixedHomeVC")
      let name = "MixedHome"

      func mixedHomeVC(_: Void = ()) -> MixedHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mixedHomeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLogo' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "banner1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner1' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "banner2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner2' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "banner3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner3' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_1' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_2' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cab' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sp_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sp_location' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:sRa-RP-CVt:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:sRa-RP-CVt:image' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoElconcierge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoElconcierge' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shadowOverlay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shadowOverlay' is used in storyboard 'MixedHome', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mixedHome().mixedHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mixedHomeVC' could not be loaded from storyboard 'MixedHome' as 'MixedHomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct moreScreen: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MoreScreen"
      let newHomeScreenVC = StoryboardViewControllerResource<NewHomeScreenVC>(identifier: "NewHomeScreenVC")
      let prescriptionRequestsVC = StoryboardViewControllerResource<PrescriptionRequestsVC>(identifier: "PrescriptionRequestsVC")
      let productReturnPopupVC = StoryboardViewControllerResource<ProductReturnPopupVC>(identifier: "ProductReturnPopupVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let selectLocationVC = StoryboardViewControllerResource<SelectLocationVC>(identifier: "SelectLocationVC")

      func newHomeScreenVC(_: Void = ()) -> NewHomeScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newHomeScreenVC)
      }

      func prescriptionRequestsVC(_: Void = ()) -> PrescriptionRequestsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: prescriptionRequestsVC)
      }

      func productReturnPopupVC(_: Void = ()) -> ProductReturnPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productReturnPopupVC)
      }

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      func selectLocationVC(_: Void = ()) -> SelectLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectLocationVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "flag_ead", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_ead' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_UK_flag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_UK_flag' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_white' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sp_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sp_location' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_order", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_order' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_right-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_right-arrow' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_nothing_found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_nothing_found' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_zippklip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_zippklip' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "return", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'return' is used in storyboard 'MoreScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.moreScreen().newHomeScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newHomeScreenVC' could not be loaded from storyboard 'MoreScreen' as 'NewHomeScreenVC'.") }
        if _R.storyboard.moreScreen().prescriptionRequestsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'prescriptionRequestsVC' could not be loaded from storyboard 'MoreScreen' as 'PrescriptionRequestsVC'.") }
        if _R.storyboard.moreScreen().productReturnPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productReturnPopupVC' could not be loaded from storyboard 'MoreScreen' as 'ProductReturnPopupVC'.") }
        if _R.storyboard.moreScreen().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'MoreScreen' as 'ProfileVC'.") }
        if _R.storyboard.moreScreen().selectLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectLocationVC' could not be loaded from storyboard 'MoreScreen' as 'SelectLocationVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newTemplateLoginSignUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewTemplateLoginSignUp"
      let ntAddPhoneNumberViewController = StoryboardViewControllerResource<NTAddPhoneNumberViewController>(identifier: "NTAddPhoneNumberViewController")
      let ntInstitutionalInfoViewController = StoryboardViewControllerResource<NTInstitutionalInfoViewController>(identifier: "NTInstitutionalInfoViewController")
      let ntLoginSignupTypeViewController = StoryboardViewControllerResource<NTLoginSignupTypeViewController>(identifier: "NTLoginSignupTypeViewController")
      let ntLoginViewController = StoryboardViewControllerResource<NTLoginViewController>(identifier: "NTLoginViewController")
      let ntSignupInstitutionViewController = StoryboardViewControllerResource<NTSignupInstitutionViewController>(identifier: "NTSignupInstitutionViewController")
      let ntSignupViewController = StoryboardViewControllerResource<NTSignupViewController>(identifier: "NTSignupViewController")
      let ntVerificationCodeViewController = StoryboardViewControllerResource<NTVerificationCodeViewController>(identifier: "NTVerificationCodeViewController")

      func ntAddPhoneNumberViewController(_: Void = ()) -> NTAddPhoneNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntAddPhoneNumberViewController)
      }

      func ntInstitutionalInfoViewController(_: Void = ()) -> NTInstitutionalInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntInstitutionalInfoViewController)
      }

      func ntLoginSignupTypeViewController(_: Void = ()) -> NTLoginSignupTypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntLoginSignupTypeViewController)
      }

      func ntLoginViewController(_: Void = ()) -> NTLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntLoginViewController)
      }

      func ntSignupInstitutionViewController(_: Void = ()) -> NTSignupInstitutionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntSignupInstitutionViewController)
      }

      func ntSignupViewController(_: Void = ()) -> NTSignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntSignupViewController)
      }

      func ntVerificationCodeViewController(_: Void = ()) -> NTVerificationCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ntVerificationCodeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: " ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named ' ic_google' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "c_institutional", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'c_institutional' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_bg-g", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_bg-g' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_apple' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross-g", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross-g' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dd_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_black' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dd_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_green' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down_black' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebbok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_facebbok' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_question' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remember_me_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remember_me_selected' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_rememberme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_rememberme' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkthrough1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough1' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPurple' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTextBlack' is used in storyboard 'NewTemplateLoginSignUp', but couldn't be loaded.") }
        }
        if _R.storyboard.newTemplateLoginSignUp().ntAddPhoneNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntAddPhoneNumberViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTAddPhoneNumberViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntInstitutionalInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntInstitutionalInfoViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTInstitutionalInfoViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntLoginSignupTypeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntLoginSignupTypeViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTLoginSignupTypeViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntLoginViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTLoginViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntSignupInstitutionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntSignupInstitutionViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTSignupInstitutionViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntSignupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntSignupViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTSignupViewController'.") }
        if _R.storyboard.newTemplateLoginSignUp().ntVerificationCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ntVerificationCodeViewController' could not be loaded from storyboard 'NewTemplateLoginSignUp' as 'NTVerificationCodeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct options: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addCardViewController = StoryboardViewControllerResource<AddCardViewController>(identifier: "AddCardViewController")
      let addressPickerViewController = StoryboardViewControllerResource<AddressPickerViewController>(identifier: "AddressPickerViewController")
      let barCodeScannerViewController = StoryboardViewControllerResource<BarCodeScannerViewController>(identifier: "BarCodeScannerViewController")
      let bundle = R.hostingBundle
      let cartViewController = StoryboardViewControllerResource<CartViewController>(identifier: "CartViewController")
      let categorySelectionController = StoryboardViewControllerResource<CategorySelectionController>(identifier: "CategorySelectionController")
      let checkCustomizationViewController = StoryboardViewControllerResource<CheckCustomizationViewController>(identifier: "CheckCustomizationViewController")
      let compareProductResultController = StoryboardViewControllerResource<CompareProductResultController>(identifier: "CompareProductResultController")
      let compareProductsController = StoryboardViewControllerResource<CompareProductsController>(identifier: "CompareProductsController")
      let customizationViewController = StoryboardViewControllerResource<CustomizationViewController>(identifier: "CustomizationViewController")
      let filterViewController = StoryboardViewControllerResource<FilterViewController>(identifier: "FilterViewController")
      let liveSupportViewController = StoryboardViewControllerResource<LiveSupportViewController>(identifier: "LiveSupportViewController")
      let loyalityPointsViewController = StoryboardViewControllerResource<LoyalityPointsViewController>(identifier: "LoyalityPointsViewController")
      let loyaltyPointOrdersController = StoryboardViewControllerResource<LoyaltyPointOrdersController>(identifier: "LoyaltyPointOrdersController")
      let myFavoritesViewController = StoryboardViewControllerResource<MyFavoritesViewController>(identifier: "MyFavoritesViewController")
      let name = "Options"
      let notificationsViewController = StoryboardViewControllerResource<NotificationsViewController>(identifier: "NotificationsViewController")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let promotionsViewController = StoryboardViewControllerResource<PromotionsViewController>(identifier: "PromotionsViewController")
      let questionsViewController = StoryboardViewControllerResource<QuestionsViewController>(identifier: "QuestionsViewController")
      let restaurantDescVC = StoryboardViewControllerResource<RestaurantDescVC>(identifier: "RestaurantDescVC")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let termsAndConditionsController = StoryboardViewControllerResource<TermsAndConditionsController>(identifier: "TermsAndConditionsController")

      func addCardViewController(_: Void = ()) -> AddCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardViewController)
      }

      func addressPickerViewController(_: Void = ()) -> AddressPickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerViewController)
      }

      func barCodeScannerViewController(_: Void = ()) -> BarCodeScannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: barCodeScannerViewController)
      }

      func cartViewController(_: Void = ()) -> CartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartViewController)
      }

      func categorySelectionController(_: Void = ()) -> CategorySelectionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categorySelectionController)
      }

      func checkCustomizationViewController(_: Void = ()) -> CheckCustomizationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkCustomizationViewController)
      }

      func compareProductResultController(_: Void = ()) -> CompareProductResultController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: compareProductResultController)
      }

      func compareProductsController(_: Void = ()) -> CompareProductsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: compareProductsController)
      }

      func customizationViewController(_: Void = ()) -> CustomizationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customizationViewController)
      }

      func filterViewController(_: Void = ()) -> FilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterViewController)
      }

      func liveSupportViewController(_: Void = ()) -> LiveSupportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: liveSupportViewController)
      }

      func loyalityPointsViewController(_: Void = ()) -> LoyalityPointsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loyalityPointsViewController)
      }

      func loyaltyPointOrdersController(_: Void = ()) -> LoyaltyPointOrdersController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loyaltyPointOrdersController)
      }

      func myFavoritesViewController(_: Void = ()) -> MyFavoritesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myFavoritesViewController)
      }

      func notificationsViewController(_: Void = ()) -> NotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsViewController)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func promotionsViewController(_: Void = ()) -> PromotionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promotionsViewController)
      }

      func questionsViewController(_: Void = ()) -> QuestionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionsViewController)
      }

      func restaurantDescVC(_: Void = ()) -> RestaurantDescVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantDescVC)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func termsAndConditionsController(_: Void = ()) -> TermsAndConditionsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndConditionsController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button:ZYQ-hg-o1b:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:ZYQ-hg-o1b:image' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "discount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'discount' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downArrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downArrowIcon' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dubai3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dubai3' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_us' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_white' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_barcode_scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_barcode_scan' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_red' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_white' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_on' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_checked' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_lp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_lp' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_lp_medal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_lp_medal' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu_white' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_new' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_place' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_edit' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_location_dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_location_dark' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_fade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_fade' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_nothing_found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_nothing_found' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plusIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plusIcon' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in storyboard 'Options', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder' is used in storyboard 'Options', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.options().addCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardViewController' could not be loaded from storyboard 'Options' as 'AddCardViewController'.") }
        if _R.storyboard.options().addressPickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerViewController' could not be loaded from storyboard 'Options' as 'AddressPickerViewController'.") }
        if _R.storyboard.options().barCodeScannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'barCodeScannerViewController' could not be loaded from storyboard 'Options' as 'BarCodeScannerViewController'.") }
        if _R.storyboard.options().cartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartViewController' could not be loaded from storyboard 'Options' as 'CartViewController'.") }
        if _R.storyboard.options().categorySelectionController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categorySelectionController' could not be loaded from storyboard 'Options' as 'CategorySelectionController'.") }
        if _R.storyboard.options().checkCustomizationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkCustomizationViewController' could not be loaded from storyboard 'Options' as 'CheckCustomizationViewController'.") }
        if _R.storyboard.options().compareProductResultController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'compareProductResultController' could not be loaded from storyboard 'Options' as 'CompareProductResultController'.") }
        if _R.storyboard.options().compareProductsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'compareProductsController' could not be loaded from storyboard 'Options' as 'CompareProductsController'.") }
        if _R.storyboard.options().customizationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customizationViewController' could not be loaded from storyboard 'Options' as 'CustomizationViewController'.") }
        if _R.storyboard.options().filterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterViewController' could not be loaded from storyboard 'Options' as 'FilterViewController'.") }
        if _R.storyboard.options().liveSupportViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'liveSupportViewController' could not be loaded from storyboard 'Options' as 'LiveSupportViewController'.") }
        if _R.storyboard.options().loyalityPointsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loyalityPointsViewController' could not be loaded from storyboard 'Options' as 'LoyalityPointsViewController'.") }
        if _R.storyboard.options().loyaltyPointOrdersController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loyaltyPointOrdersController' could not be loaded from storyboard 'Options' as 'LoyaltyPointOrdersController'.") }
        if _R.storyboard.options().myFavoritesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myFavoritesViewController' could not be loaded from storyboard 'Options' as 'MyFavoritesViewController'.") }
        if _R.storyboard.options().notificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsViewController' could not be loaded from storyboard 'Options' as 'NotificationsViewController'.") }
        if _R.storyboard.options().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Options' as 'PaymentVC'.") }
        if _R.storyboard.options().promotionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promotionsViewController' could not be loaded from storyboard 'Options' as 'PromotionsViewController'.") }
        if _R.storyboard.options().questionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionsViewController' could not be loaded from storyboard 'Options' as 'QuestionsViewController'.") }
        if _R.storyboard.options().restaurantDescVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantDescVC' could not be loaded from storyboard 'Options' as 'RestaurantDescVC'.") }
        if _R.storyboard.options().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Options' as 'SettingsViewController'.") }
        if _R.storyboard.options().termsAndConditionsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndConditionsController' could not be loaded from storyboard 'Options' as 'TermsAndConditionsController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct order: Rswift.StoryboardResourceType, Rswift.Validatable {
      let agentListingVC = StoryboardViewControllerResource<AgentListingVC>(identifier: "AgentListingVC")
      let agentTimeSlotVC = StoryboardViewControllerResource<AgentTimeSlotVC>(identifier: "AgentTimeSlotVC")
      let bundle = R.hostingBundle
      let deliveryViewController = StoryboardViewControllerResource<DeliveryViewController>(identifier: "DeliveryViewController")
      let loyaltyPointsSummaryController = StoryboardViewControllerResource<LoyaltyPointsSummaryController>(identifier: "LoyaltyPointsSummaryController")
      let name = "Order"
      let orderDetailController = StoryboardViewControllerResource<OrderDetailController>(identifier: "OrderDetailController")
      let orderHistoryViewController = StoryboardViewControllerResource<OrderHistoryViewController>(identifier: "OrderHistoryViewController")
      let orderSchedularViewController = StoryboardViewControllerResource<OrderSchedularViewController>(identifier: "OrderSchedularViewController")
      let orderSummaryController = StoryboardViewControllerResource<OrderSummaryController>(identifier: "OrderSummaryController")
      let paymentMethodController = StoryboardViewControllerResource<PaymentMethodController>(identifier: "PaymentMethodController")
      let rateMyOrderController = StoryboardViewControllerResource<RateMyOrderController>(identifier: "RateMyOrderController")
      let rateReviewsVC = StoryboardViewControllerResource<RateReviewsVC>(identifier: "RateReviewsVC")
      let scheduledOrderController = StoryboardViewControllerResource<ScheduledOrderController>(identifier: "ScheduledOrderController")
      let trackMyOrderViewController = StoryboardViewControllerResource<TrackMyOrderViewController>(identifier: "TrackMyOrderViewController")
      let upcomingOrdersViewController = StoryboardViewControllerResource<UpcomingOrdersViewController>(identifier: "UpcomingOrdersViewController")

      func agentListingVC(_: Void = ()) -> AgentListingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agentListingVC)
      }

      func agentTimeSlotVC(_: Void = ()) -> AgentTimeSlotVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agentTimeSlotVC)
      }

      func deliveryViewController(_: Void = ()) -> DeliveryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryViewController)
      }

      func loyaltyPointsSummaryController(_: Void = ()) -> LoyaltyPointsSummaryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loyaltyPointsSummaryController)
      }

      func orderDetailController(_: Void = ()) -> OrderDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailController)
      }

      func orderHistoryViewController(_: Void = ()) -> OrderHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderHistoryViewController)
      }

      func orderSchedularViewController(_: Void = ()) -> OrderSchedularViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderSchedularViewController)
      }

      func orderSummaryController(_: Void = ()) -> OrderSummaryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderSummaryController)
      }

      func paymentMethodController(_: Void = ()) -> PaymentMethodController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentMethodController)
      }

      func rateMyOrderController(_: Void = ()) -> RateMyOrderController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rateMyOrderController)
      }

      func rateReviewsVC(_: Void = ()) -> RateReviewsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rateReviewsVC)
      }

      func scheduledOrderController(_: Void = ()) -> ScheduledOrderController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduledOrderController)
      }

      func trackMyOrderViewController(_: Void = ()) -> TrackMyOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trackMyOrderViewController)
      }

      func upcomingOrdersViewController(_: Void = ()) -> UpcomingOrdersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: upcomingOrdersViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "flag_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_us' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender_circle' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_white' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_on' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_image_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_image_white' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu_white' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_new' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_card' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_nothing_found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_nothing_found' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message.fill' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone.circle.fill' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_off' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_on' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in storyboard 'Order', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.order().agentListingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agentListingVC' could not be loaded from storyboard 'Order' as 'AgentListingVC'.") }
        if _R.storyboard.order().agentTimeSlotVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agentTimeSlotVC' could not be loaded from storyboard 'Order' as 'AgentTimeSlotVC'.") }
        if _R.storyboard.order().deliveryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryViewController' could not be loaded from storyboard 'Order' as 'DeliveryViewController'.") }
        if _R.storyboard.order().loyaltyPointsSummaryController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loyaltyPointsSummaryController' could not be loaded from storyboard 'Order' as 'LoyaltyPointsSummaryController'.") }
        if _R.storyboard.order().orderDetailController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailController' could not be loaded from storyboard 'Order' as 'OrderDetailController'.") }
        if _R.storyboard.order().orderHistoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderHistoryViewController' could not be loaded from storyboard 'Order' as 'OrderHistoryViewController'.") }
        if _R.storyboard.order().orderSchedularViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderSchedularViewController' could not be loaded from storyboard 'Order' as 'OrderSchedularViewController'.") }
        if _R.storyboard.order().orderSummaryController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderSummaryController' could not be loaded from storyboard 'Order' as 'OrderSummaryController'.") }
        if _R.storyboard.order().paymentMethodController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentMethodController' could not be loaded from storyboard 'Order' as 'PaymentMethodController'.") }
        if _R.storyboard.order().rateMyOrderController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rateMyOrderController' could not be loaded from storyboard 'Order' as 'RateMyOrderController'.") }
        if _R.storyboard.order().rateReviewsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rateReviewsVC' could not be loaded from storyboard 'Order' as 'RateReviewsVC'.") }
        if _R.storyboard.order().scheduledOrderController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduledOrderController' could not be loaded from storyboard 'Order' as 'ScheduledOrderController'.") }
        if _R.storyboard.order().trackMyOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trackMyOrderViewController' could not be loaded from storyboard 'Order' as 'TrackMyOrderViewController'.") }
        if _R.storyboard.order().upcomingOrdersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'upcomingOrdersViewController' could not be loaded from storyboard 'Order' as 'UpcomingOrdersViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct payment: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cardListingVC = StoryboardViewControllerResource<CardListingVC>(identifier: "CardListingVC")
      let conektaPaymentVC = StoryboardViewControllerResource<ConektaPaymentVC>(identifier: "ConektaPaymentVC")
      let name = "Payment"
      let paymentWebviewVC = StoryboardViewControllerResource<PaymentWebviewVC>(identifier: "PaymentWebviewVC")
      let paystackPaymentVC = StoryboardViewControllerResource<PaystackPaymentVC>(identifier: "PaystackPaymentVC")
      let stripePaymentViewController = StoryboardViewControllerResource<StripePaymentViewController>(identifier: "StripePaymentViewController")
      let zelleViewController = StoryboardViewControllerResource<ZelleViewController>(identifier: "ZelleViewController")

      func cardListingVC(_: Void = ()) -> CardListingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardListingVC)
      }

      func conektaPaymentVC(_: Void = ()) -> ConektaPaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conektaPaymentVC)
      }

      func paymentWebviewVC(_: Void = ()) -> PaymentWebviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentWebviewVC)
      }

      func paystackPaymentVC(_: Void = ()) -> PaystackPaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paystackPaymentVC)
      }

      func stripePaymentViewController(_: Void = ()) -> StripePaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stripePaymentViewController)
      }

      func zelleViewController(_: Void = ()) -> ZelleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: zelleViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Conekta logo-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Conekta logo-1' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder' is used in storyboard 'Payment', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.payment().cardListingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardListingVC' could not be loaded from storyboard 'Payment' as 'CardListingVC'.") }
        if _R.storyboard.payment().conektaPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conektaPaymentVC' could not be loaded from storyboard 'Payment' as 'ConektaPaymentVC'.") }
        if _R.storyboard.payment().paymentWebviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentWebviewVC' could not be loaded from storyboard 'Payment' as 'PaymentWebviewVC'.") }
        if _R.storyboard.payment().paystackPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paystackPaymentVC' could not be loaded from storyboard 'Payment' as 'PaystackPaymentVC'.") }
        if _R.storyboard.payment().stripePaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stripePaymentViewController' could not be loaded from storyboard 'Payment' as 'StripePaymentViewController'.") }
        if _R.storyboard.payment().zelleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'zelleViewController' could not be loaded from storyboard 'Payment' as 'ZelleViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct referal: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Referal"
      let referalDetailViewController = StoryboardViewControllerResource<ReferalDetailViewController>(identifier: "ReferalDetailViewController")
      let referalViewController = StoryboardViewControllerResource<ReferalViewController>(identifier: "ReferalViewController")
      let referredUsersViewController = StoryboardViewControllerResource<ReferredUsersViewController>(identifier: "ReferredUsersViewController")

      func referalDetailViewController(_: Void = ()) -> ReferalDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referalDetailViewController)
      }

      func referalViewController(_: Void = ()) -> ReferalViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referalViewController)
      }

      func referredUsersViewController(_: Void = ()) -> ReferredUsersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referredUsersViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Referal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_refer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_refer' is used in storyboard 'Referal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:7aY-ul-OLj:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:7aY-ul-OLj:image' is used in storyboard 'Referal', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.referal().referalDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referalDetailViewController' could not be loaded from storyboard 'Referal' as 'ReferalDetailViewController'.") }
        if _R.storyboard.referal().referalViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referalViewController' could not be loaded from storyboard 'Referal' as 'ReferalViewController'.") }
        if _R.storyboard.referal().referredUsersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referredUsersViewController' could not be loaded from storyboard 'Referal' as 'ReferredUsersViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct register: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chooseLocationVC = StoryboardViewControllerResource<ChooseLocationVC>(identifier: "ChooseLocationVC")
      let chooseLocationVC2 = StoryboardViewControllerResource<ChooseLocationVC>(identifier: "ChooseLocationVC2")
      let locationViewController = StoryboardViewControllerResource<LocationViewController>(identifier: "LocationViewController")
      let loginNewVC = StoryboardViewControllerResource<LoginNewVC>(identifier: "LoginNewVC")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Register"
      let otpViewController = StoryboardViewControllerResource<OTPViewController>(identifier: "OTPViewController")
      let phoneNoViewController = StoryboardViewControllerResource<PhoneNoViewController>(identifier: "PhoneNoViewController")
      let registerFirstStepController = StoryboardViewControllerResource<RegisterFirstStepController>(identifier: "RegisterFirstStepController")
      let registerSingleScreenVC = StoryboardViewControllerResource<RegisterSingleScreenVC>(identifier: "RegisterSingleScreenVC")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let signupDeclarationVC = StoryboardViewControllerResource<SignupDeclarationVC>(identifier: "SignupDeclarationVC")
      let signupSelectionVC = StoryboardViewControllerResource<SignupSelectionVC>(identifier: "SignupSelectionVC")
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")

      func chooseLocationVC(_: Void = ()) -> ChooseLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseLocationVC)
      }

      func chooseLocationVC2(_: Void = ()) -> ChooseLocationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseLocationVC2)
      }

      func locationViewController(_: Void = ()) -> LocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: locationViewController)
      }

      func loginNewVC(_: Void = ()) -> LoginNewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginNewVC)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func otpViewController(_: Void = ()) -> OTPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpViewController)
      }

      func phoneNoViewController(_: Void = ()) -> PhoneNoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneNoViewController)
      }

      func registerFirstStepController(_: Void = ()) -> RegisterFirstStepController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerFirstStepController)
      }

      func registerSingleScreenVC(_: Void = ()) -> RegisterSingleScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerSingleScreenVC)
      }

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      func signupDeclarationVC(_: Void = ()) -> SignupDeclarationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupDeclarationVC)
      }

      func signupSelectionVC(_: Void = ()) -> SignupSelectionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupSelectionVC)
      }

      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AppLoginBG_ECom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLoginBG_ECom' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "AppLogoFood", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLogoFood' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downArrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downArrowIcon' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_checked' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_down_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down_arrow' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dummy_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dummy_user' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_grey' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_visibility_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_visibility_off' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_visibility_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_visibility_on' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_tianquiz", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_tianquiz' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "poneeex_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'poneeex_logo' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioActiveBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioActiveBlue' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radioInactiveBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioInactiveBlue' is used in storyboard 'Register', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'Register', but couldn't be loaded.") }
        }
        if _R.storyboard.register().chooseLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseLocationVC' could not be loaded from storyboard 'Register' as 'ChooseLocationVC'.") }
        if _R.storyboard.register().chooseLocationVC2() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseLocationVC2' could not be loaded from storyboard 'Register' as 'ChooseLocationVC'.") }
        if _R.storyboard.register().locationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'locationViewController' could not be loaded from storyboard 'Register' as 'LocationViewController'.") }
        if _R.storyboard.register().loginNewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginNewVC' could not be loaded from storyboard 'Register' as 'LoginNewVC'.") }
        if _R.storyboard.register().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Register' as 'LoginViewController'.") }
        if _R.storyboard.register().otpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpViewController' could not be loaded from storyboard 'Register' as 'OTPViewController'.") }
        if _R.storyboard.register().phoneNoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneNoViewController' could not be loaded from storyboard 'Register' as 'PhoneNoViewController'.") }
        if _R.storyboard.register().registerFirstStepController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerFirstStepController' could not be loaded from storyboard 'Register' as 'RegisterFirstStepController'.") }
        if _R.storyboard.register().registerSingleScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerSingleScreenVC' could not be loaded from storyboard 'Register' as 'RegisterSingleScreenVC'.") }
        if _R.storyboard.register().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Register' as 'RegisterViewController'.") }
        if _R.storyboard.register().signupDeclarationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupDeclarationVC' could not be loaded from storyboard 'Register' as 'SignupDeclarationVC'.") }
        if _R.storyboard.register().signupSelectionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupSelectionVC' could not be loaded from storyboard 'Register' as 'SignupSelectionVC'.") }
        if _R.storyboard.register().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Register' as 'SplashViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sideMenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutUsVC = StoryboardViewControllerResource<AboutUsVC>(identifier: "AboutUsVC")
      let addCardDetailsVC = StoryboardViewControllerResource<AddCardDetailsVC>(identifier: "AddCardDetailsVC")
      let addCardViewController = StoryboardViewControllerResource<AddCardViewControllerCab>(identifier: "AddCardViewController")
      let addMoneyVC = StoryboardViewControllerResource<AddMoneyVC>(identifier: "AddMoneyVC")
      let bookingDetailVC = StoryboardViewControllerResource<BookingDetailVC>(identifier: "BookingDetailVC")
      let bookingsVC = StoryboardViewControllerResource<BookingsVC>(identifier: "BookingsVC")
      let bundle = R.hostingBundle
      let cardListViewController = StoryboardViewControllerResource<CardListViewController>(identifier: "CardListViewController")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let couponVC = StoryboardViewControllerResource<CouponVC>(identifier: "CouponVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let emergencyContactVC = StoryboardViewControllerResource<EmergencyContactVC>(identifier: "EmergencyContactVC")
      let name = "SideMenu"
      let noticeboardController = StoryboardViewControllerResource<NoticeboardController>(identifier: "NoticeboardController")
      let packageDetailViewController = StoryboardViewControllerResource<PackageDetailViewController>(identifier: "PackageDetailViewController")
      let referralVC = StoryboardViewControllerResource<ReferralVC>(identifier: "ReferralVC")
      let sendMoneyVCViewController = StoryboardViewControllerResource<SendMoneyVCViewController>(identifier: "SendMoneyVCViewController")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let travelPackagesViewController = StoryboardViewControllerResource<TravelPackagesViewController>(identifier: "TravelPackagesViewController")
      let walletVCViewController = StoryboardViewControllerResource<WalletVCViewController>(identifier: "WalletVCViewController")

      func aboutUsVC(_: Void = ()) -> AboutUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsVC)
      }

      func addCardDetailsVC(_: Void = ()) -> AddCardDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardDetailsVC)
      }

      func addCardViewController(_: Void = ()) -> AddCardViewControllerCab? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardViewController)
      }

      func addMoneyVC(_: Void = ()) -> AddMoneyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addMoneyVC)
      }

      func bookingDetailVC(_: Void = ()) -> BookingDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingDetailVC)
      }

      func bookingsVC(_: Void = ()) -> BookingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingsVC)
      }

      func cardListViewController(_: Void = ()) -> CardListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardListViewController)
      }

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      func couponVC(_: Void = ()) -> CouponVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func emergencyContactVC(_: Void = ()) -> EmergencyContactVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emergencyContactVC)
      }

      func noticeboardController(_: Void = ()) -> NoticeboardController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeboardController)
      }

      func packageDetailViewController(_: Void = ()) -> PackageDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: packageDetailViewController)
      }

      func referralVC(_: Void = ()) -> ReferralVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referralVC)
      }

      func sendMoneyVCViewController(_: Void = ()) -> SendMoneyVCViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneyVCViewController)
      }

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      func travelPackagesViewController(_: Void = ()) -> TravelPackagesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: travelPackagesViewController)
      }

      func walletVCViewController(_: Void = ()) -> WalletVCViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVCViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowDown' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Calender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Calender' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RoyoLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RoyoLogo' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_arrow_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow_black' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call_admin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call_admin' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_ride_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_ride_big' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_active' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross_s' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_location' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mail_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mail_us' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pick_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pick_location' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_gray' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_orange' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_text_illus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_text_illus' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_two_dotted_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_two_dotted_line' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unverify", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unverify' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_verify", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_verify' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "in.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'in.png' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ride_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ride_logo' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "us.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'us.png' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppNewRedBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppNewRedBorder' is used in storyboard 'SideMenu', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPurple' is used in storyboard 'SideMenu', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTextBlack' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        }
        if _R.storyboard.sideMenu().aboutUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsVC' could not be loaded from storyboard 'SideMenu' as 'AboutUsVC'.") }
        if _R.storyboard.sideMenu().addCardDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardDetailsVC' could not be loaded from storyboard 'SideMenu' as 'AddCardDetailsVC'.") }
        if _R.storyboard.sideMenu().addCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardViewController' could not be loaded from storyboard 'SideMenu' as 'AddCardViewControllerCab'.") }
        if _R.storyboard.sideMenu().addMoneyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addMoneyVC' could not be loaded from storyboard 'SideMenu' as 'AddMoneyVC'.") }
        if _R.storyboard.sideMenu().bookingDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingDetailVC' could not be loaded from storyboard 'SideMenu' as 'BookingDetailVC'.") }
        if _R.storyboard.sideMenu().bookingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingsVC' could not be loaded from storyboard 'SideMenu' as 'BookingsVC'.") }
        if _R.storyboard.sideMenu().cardListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardListViewController' could not be loaded from storyboard 'SideMenu' as 'CardListViewController'.") }
        if _R.storyboard.sideMenu().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'SideMenu' as 'ContactUsVC'.") }
        if _R.storyboard.sideMenu().couponVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponVC' could not be loaded from storyboard 'SideMenu' as 'CouponVC'.") }
        if _R.storyboard.sideMenu().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'SideMenu' as 'EditProfileVC'.") }
        if _R.storyboard.sideMenu().emergencyContactVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emergencyContactVC' could not be loaded from storyboard 'SideMenu' as 'EmergencyContactVC'.") }
        if _R.storyboard.sideMenu().noticeboardController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeboardController' could not be loaded from storyboard 'SideMenu' as 'NoticeboardController'.") }
        if _R.storyboard.sideMenu().packageDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'packageDetailViewController' could not be loaded from storyboard 'SideMenu' as 'PackageDetailViewController'.") }
        if _R.storyboard.sideMenu().referralVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referralVC' could not be loaded from storyboard 'SideMenu' as 'ReferralVC'.") }
        if _R.storyboard.sideMenu().sendMoneyVCViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneyVCViewController' could not be loaded from storyboard 'SideMenu' as 'SendMoneyVCViewController'.") }
        if _R.storyboard.sideMenu().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'SideMenu' as 'SettingsVC'.") }
        if _R.storyboard.sideMenu().travelPackagesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'travelPackagesViewController' could not be loaded from storyboard 'SideMenu' as 'TravelPackagesViewController'.") }
        if _R.storyboard.sideMenu().walletVCViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVCViewController' could not be loaded from storyboard 'SideMenu' as 'WalletVCViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let askLocationViewController = StoryboardViewControllerResource<AskLocationViewController>(identifier: "AskLocationViewController")
      let bundle = R.hostingBundle
      let menuSearchVC = StoryboardViewControllerResource<MenuSearchVC>(identifier: "MenuSearchVC")
      let name = "Splash"
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let popOverVC = StoryboardViewControllerResource<PopOverVC>(identifier: "PopOverVC")
      let restaurantDetailVC = StoryboardViewControllerResource<RestaurantDetailVC>(identifier: "RestaurantDetailVC")
      let restaurantMenuVC = StoryboardViewControllerResource<RestaurantMenuVC>(identifier: "RestaurantMenuVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func askLocationViewController(_: Void = ()) -> AskLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: askLocationViewController)
      }

      func menuSearchVC(_: Void = ()) -> MenuSearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuSearchVC)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      func popOverVC(_: Void = ()) -> PopOverVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popOverVC)
      }

      func restaurantDetailVC(_: Void = ()) -> RestaurantDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantDetailVC)
      }

      func restaurantMenuVC(_: Void = ()) -> RestaurantMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantMenuVC)
      }

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "HomeScreen_JNJ", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HomeScreen_JNJ' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Splashelconcierge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splashelconcierge' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backNew_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backNew_white' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:JNk-Lt-Fws:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:JNk-Lt-Fws:image' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:vtp-CG-2Yr:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:vtp-CG-2Yr:image' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "discover_ecommerce", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'discover_ecommerce' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heartUnselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heartUnselected' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back copy' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_white_pressed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_white_pressed' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'instagram' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin-outline' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search_white' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thena_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thena_splash' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upload' is used in storyboard 'Splash', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splash().askLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'askLocationViewController' could not be loaded from storyboard 'Splash' as 'AskLocationViewController'.") }
        if _R.storyboard.splash().menuSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuSearchVC' could not be loaded from storyboard 'Splash' as 'MenuSearchVC'.") }
        if _R.storyboard.splash().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Splash' as 'OnboardingViewController'.") }
        if _R.storyboard.splash().popOverVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popOverVC' could not be loaded from storyboard 'Splash' as 'PopOverVC'.") }
        if _R.storyboard.splash().restaurantDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantDetailVC' could not be loaded from storyboard 'Splash' as 'RestaurantDetailVC'.") }
        if _R.storyboard.splash().restaurantMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantMenuVC' could not be loaded from storyboard 'Splash' as 'RestaurantMenuVC'.") }
        if _R.storyboard.splash().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Splash' as 'SplashVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct template1_Design: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let landingAndPhoneInputVCTemplate1 = StoryboardViewControllerResource<LandingAndPhoneInputVCTemplate1>(identifier: "LandingAndPhoneInputVCTemplate1")
      let name = "Template1_Design"

      func landingAndPhoneInputVCTemplate1(_: Void = ()) -> LandingAndPhoneInputVCTemplate1? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingAndPhoneInputVCTemplate1)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_checkbox_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkbox_inactive' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown-green' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next_arrow' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPurple' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
          if UIKit.UIColor(named: "App_Color1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'App_Color1' is used in storyboard 'Template1_Design', but couldn't be loaded.") }
        }
        if _R.storyboard.template1_Design().landingAndPhoneInputVCTemplate1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingAndPhoneInputVCTemplate1' could not be loaded from storyboard 'Template1_Design' as 'LandingAndPhoneInputVCTemplate1'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tracking: Rswift.StoryboardResourceType, Rswift.Validatable {
      let agentOrderTrakingVC = StoryboardViewControllerResource<AgentOrderTrakingVC>(identifier: "AgentOrderTrakingVC")
      let bundle = R.hostingBundle
      let name = "Tracking"
      let trackingViewController = StoryboardViewControllerResource<TrackingViewController>(identifier: "TrackingViewController")

      func agentOrderTrakingVC(_: Void = ()) -> AgentOrderTrakingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agentOrderTrakingVC)
      }

      func trackingViewController(_: Void = ()) -> TrackingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trackingViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "flag_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag_us' is used in storyboard 'Tracking', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Tracking', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tracking().agentOrderTrakingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agentOrderTrakingVC' could not be loaded from storyboard 'Tracking' as 'AgentOrderTrakingVC'.") }
        if _R.storyboard.tracking().trackingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trackingViewController' could not be loaded from storyboard 'Tracking' as 'TrackingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
